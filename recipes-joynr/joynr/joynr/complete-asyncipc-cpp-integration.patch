From 1aea96823d77862baba24b8d6a59ab5887db411c Wed, 24 Feb 2016 10:52:53 +0100
From: Michal Gubriansky <michal.gubriansky@rec-global.com>
Date: Wed, 24 Feb 2016 10:51:52 +0100
Subject: [PATCH] complete c++ implementation

diff --git a/.gitignore b/.gitignore
index aef3b00..238421e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,22 +1,29 @@
-target/
-.classpath
-.project
-.checkstyle
-.settings/
-.externalToolBuilders/
-/gen
-src/main/generated/
-bounceproxy.build-.log
-/java/messaging/messaging-service/logs
-THIRD-PARTY.properties
-/*-build/
-.DS_Store
-.idea/
-*.iml
-logs/
-examples/radio-app/gps-provider-joynr.properties
-joynrpersistence/
-derby.log
-/build/
-javascript/joynr.properties
-javascript/apps/radio/joynr.properties
+target/
+.classpath
+.project
+.checkstyle
+.settings/
+.externalToolBuilders/
+/gen
+src/main/generated/
+bounceproxy.build-.log
+/java/messaging/messaging-service/logs
+THIRD-PARTY.properties
+/*-build/
+.DS_Store
+.idea/
+*.iml
+logs/
+examples/radio-app/gps-provider-joynr.properties
+joynrpersistence/
+derby.log
+/build/
+javascript/joynr.properties
+javascript/apps/radio/joynr.properties
+dependency-reduced-pom.xml
+CMakeFiles/
+*_automoc.cpp
+Makefile
+cmake_install.cmake
+moc_*
+bin/
\ No newline at end of file
diff --git a/basemodel/src/main/franca/joynr/DiscoveryTypes.fidl b/basemodel/src/main/franca/joynr/DiscoveryTypes.fidl
index 9420e55..f155cbb 100644
--- a/basemodel/src/main/franca/joynr/DiscoveryTypes.fidl
+++ b/basemodel/src/main/franca/joynr/DiscoveryTypes.fidl
@@ -1,154 +1,156 @@
-/*
- * #%L
- * %%
- * Copyright (C) 2011 - 2014 BMW Car IT GmbH
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * #L%
- */
-package types
-
-typeCollection {
-
-	<** @description: a custom parameter consisting of a name and a value **>
-	struct CustomParameter {
-		<** @description: the name of the custom parameter **>
-		String name
-		<** @description: the value of the custom parameter **>
-		String value
-	}
-
-	<** @description: the scope in which the provider is registered **>
-	enumeration ProviderScope{
-		<** @description: indicates that the provider is for use with the local and global cluster controller **>
-		GLOBAL
-		<** @description: indicates that the provider is only for use with the local cluster controller **>
-		LOCAL
-	}
-
-	<** @description: the provider quality of service settings **>
-	struct ProviderQos {
-		<**
-			@description: the list of Provider-Specific and InterfaceSpecific
-				QoS Parameters
-		**>
-		CustomParameter[] customParameters
-
-		/*
-		 * the following QosParameters are joyn-internal, and
-		 * need to be implemented by every provider
-		 */
-
-		<**
-			@description: the version of the provider
-		**>
-		Int32 providerVersion
-
-		<**
-			@description: the priority value of the provider used for discovery
-		**>
-		Int64 priority
-
-		<**
-			@description: the scope of the provider (e.g. if it is to be used only
-			with the local cluster controller)
-		**>
-		ProviderScope scope
-
-		<**
-			@description: true, if the provider supports onChangeSubscriptions,
-			false otherwise
-		**>
-		Boolean supportsOnChangeSubscriptions
-	}
-
-	<** @description: Enumeration specifying the discovery scope choices **>
-	enumeration DiscoveryScope	{
-		<** @description: Consider only entries from local cache **>
-		LOCAL_ONLY
-		<** @description: Consider only entries from local cache, in no results are found, query global cache as well **>
-		LOCAL_THEN_GLOBAL
-		<** @description: Consider both local and global entries **>
-		LOCAL_AND_GLOBAL
-		<** @description: Consider only global entries **>
-		GLOBAL_ONLY
-	}
-
-	<** @description: Enumeration specifying the different means for communication **>
-	enumeration CommunicationMiddleware {
-		<** @description: Joynr internal communication **>
-		JOYNR
-		<** @description: Communication using CommonAPI over DBus **>
-		COMMONAPI_DBUS
-		<** @description: Communication using Browser **>
-		BROWSER
-		<** @description: Communication using web sockets **>
-		WEBSOCKET
-		<** @description: Communication using Some IP protocol **>
-		SOME_IP
-		<** @description: Communication using in process means **>
-		IN_PROCESS
-		<** @description: None of the above **>
-		NONE
-	}
-
-	<** @description: Discovery quality of service settings **>
-	struct DiscoveryQos {
-		<** @description: The maximum age of a cached entry in milliseconds **>
-		Int64 cacheMaxAge
-		<** @description: The discovery scope **>
-		DiscoveryScope discoveryScope
-		<** @description: True, if the provider is required to support the OnChange publication **>
-		Boolean providerMustSupportOnChange
-	}
-
-	struct DiscoveryEntry {
-		<** @description: the domain to register the provider with **>
-		String domain
-		<** @description: the name of the provider interface **>
-		String interfaceName
-		<** @description: the participant ID of the provider **>
-		String participantId
-		<** @description: the qos of the provider **>
-		ProviderQos qos
-		<**
-			@description: a list of communications middlewares that can be used
-				to access the provider
-		**>
-		CommunicationMiddleware[] connections
-	}
-
-	<** @description: the capability information holding the information for a provider **>
-	struct CapabilityInformation {
-		<** @description: the domain name of the provider **>
-		String domain
-
-		<** @description: the name of the interface of the provider **>
-		String interfaceName
-
-		<** @description: the provider quality of service settings **>
-		ProviderQos providerQos
-
-		<** @description: the channel id of the provider **>
-		String channelId
-
-		<** @description: the participant id of the provider **>
-		String participantId
-	}
-
-	<** @description: the channel URL information **>
-	struct ChannelUrlInformation {
-		<** @description: a list of urls **>
-		String[] urls
-	}
-}
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2014 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+package types
+
+typeCollection {
+
+	<** @description: a custom parameter consisting of a name and a value **>
+	struct CustomParameter {
+		<** @description: the name of the custom parameter **>
+		String name
+		<** @description: the value of the custom parameter **>
+		String value
+	}
+
+	<** @description: the scope in which the provider is registered **>
+	enumeration ProviderScope{
+		<** @description: indicates that the provider is for use with the local and global cluster controller **>
+		GLOBAL
+		<** @description: indicates that the provider is only for use with the local cluster controller **>
+		LOCAL
+	}
+
+	<** @description: the provider quality of service settings **>
+	struct ProviderQos {
+		<**
+			@description: the list of Provider-Specific and InterfaceSpecific
+				QoS Parameters
+		**>
+		CustomParameter[] customParameters
+
+		/*
+		 * the following QosParameters are joyn-internal, and
+		 * need to be implemented by every provider
+		 */
+
+		<**
+			@description: the version of the provider
+		**>
+		Int32 providerVersion
+
+		<**
+			@description: the priority value of the provider used for discovery
+		**>
+		Int64 priority
+
+		<**
+			@description: the scope of the provider (e.g. if it is to be used only
+			with the local cluster controller)
+		**>
+		ProviderScope scope
+
+		<**
+			@description: true, if the provider supports onChangeSubscriptions,
+			false otherwise
+		**>
+		Boolean supportsOnChangeSubscriptions
+	}
+
+	<** @description: Enumeration specifying the discovery scope choices **>
+	enumeration DiscoveryScope	{
+		<** @description: Consider only entries from local cache **>
+		LOCAL_ONLY
+		<** @description: Consider only entries from local cache, in no results are found, query global cache as well **>
+		LOCAL_THEN_GLOBAL
+		<** @description: Consider both local and global entries **>
+		LOCAL_AND_GLOBAL
+		<** @description: Consider only global entries **>
+		GLOBAL_ONLY
+	}
+
+	<** @description: Enumeration specifying the different means for communication **>
+	enumeration CommunicationMiddleware {
+		<** @description: Joynr internal communication **>
+		JOYNR
+		<** @description: Communication using CommonAPI over DBus **>
+		COMMONAPI_DBUS
+		<** @description: Communication using AsyncIPC **>
+		ASYNCIPC
+		<** @description: Communication using Browser **>
+		BROWSER
+		<** @description: Communication using web sockets **>
+		WEBSOCKET
+		<** @description: Communication using Some IP protocol **>
+		SOME_IP
+		<** @description: Communication using in process means **>
+		IN_PROCESS
+		<** @description: None of the above **>
+		NONE
+	}
+
+	<** @description: Discovery quality of service settings **>
+	struct DiscoveryQos {
+		<** @description: The maximum age of a cached entry in milliseconds **>
+		Int64 cacheMaxAge
+		<** @description: The discovery scope **>
+		DiscoveryScope discoveryScope
+		<** @description: True, if the provider is required to support the OnChange publication **>
+		Boolean providerMustSupportOnChange
+	}
+
+	struct DiscoveryEntry {
+		<** @description: the domain to register the provider with **>
+		String domain
+		<** @description: the name of the provider interface **>
+		String interfaceName
+		<** @description: the participant ID of the provider **>
+		String participantId
+		<** @description: the qos of the provider **>
+		ProviderQos qos
+		<**
+			@description: a list of communications middlewares that can be used
+				to access the provider
+		**>
+		CommunicationMiddleware[] connections
+	}
+
+	<** @description: the capability information holding the information for a provider **>
+	struct CapabilityInformation {
+		<** @description: the domain name of the provider **>
+		String domain
+
+		<** @description: the name of the interface of the provider **>
+		String interfaceName
+
+		<** @description: the provider quality of service settings **>
+		ProviderQos providerQos
+
+		<** @description: the channel id of the provider **>
+		String channelId
+
+		<** @description: the participant id of the provider **>
+		String participantId
+	}
+
+	<** @description: the channel URL information **>
+	struct ChannelUrlInformation {
+		<** @description: a list of urls **>
+		String[] urls
+	}
+}
diff --git a/basemodel/src/main/franca/joynr/Routing.fidl b/basemodel/src/main/franca/joynr/Routing.fidl
index fe9861c..66430ee 100644
--- a/basemodel/src/main/franca/joynr/Routing.fidl
+++ b/basemodel/src/main/franca/joynr/Routing.fidl
@@ -1,203 +1,227 @@
-/*
- * #%L
- * %%
- * Copyright (C) 2011 - 2015 BMW Car IT GmbH
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * #L%
- */
-package system
-
-typeCollection RoutingTypes {
-	<** @description: Generic Address **>
-	struct Address polymorphic {}
-
-	<** @description: Channel Address **>
-	struct ChannelAddress extends Address {
-		<** @description: Channel identification **>
-		String channelId
-	}
-
-	<** @description: CommonApiDbus address **>
-	struct CommonApiDbusAddress extends Address {
-		<** @description: Domain name **>
-		String domain
-
-		<** @description: Name of service **>
-		String serviceName
-
-		<** @description: the ID of the target participant **>
-		String participantId
-	}
-
-	<** @description: Browser address **>
-	struct BrowserAddress extends Address {
-		<** @description: the ID of the browser window **>
-		String windowId
-	}
-
-	<** @description: Websocket protocol type **>
-	enumeration WebSocketProtocol  {
-		<** @description: Websocket (non-secure) **>
-		WS
-
-		<** @description: Websocket (secure) **>
-		WSS
-	}
-
-	<** @description: Websocket address **>
-	struct WebSocketAddress extends Address {
-		<** @description: Websocket protocol type **>
-		WebSocketProtocol protocol
-
-		<** @description: Websocket host **>
-		String host
-
-		<** @description: Websocket port **>
-		Int32 port
-
-		<** @description: Websocket path **>
-		String path
-	}
-
-	<** @description: Websocket client address **>
-	struct WebSocketClientAddress extends Address {
-		<** @description: Websocket client ID **>
-		String id
-	}
-}
-
-<**
-	@description: The <code>Routing</code> interface is a joynr internal
-		interface. joynr uses a hierarchy of <code>MessageRouter</code>s to
-		route messages from source to destination. The <code>Routing</code>
-		interface is used to update routing information between parent and
-		child <code>MessageRouter</code>s.
-**>
-interface Routing {
-
-	version {major 0 minor 1}
-
-	<**
-		@description: Adds a hop to the parent routing table.
-			<br/>
-			The overloaded methods (one for each concrete Address type) is
-			needed since polymorphism is currently not supported by joynr.
-	**>
-	method addNextHop {
-		in {
-			<** @description: the ID of the target participant **>
-			String participantId
-			<**
-				@description: the messaging address of the next hop towards
-					the corresponding participant ID
-			**>
-			RoutingTypes.ChannelAddress channelAddress
-		}
-	}
-
-	<**
-		@description: Adds a hop to the parent routing table.
-			<br/>
-			The overloaded methods (one for each concrete Address type) is
-			needed since polymorphism is currently not supported by joynr.
-	**>
-	method addNextHop {
-		in {
-			<** @description: the ID of the target participant **>
-			String participantId
-			<**
-				@description: the messaging address of the next hop towards
-					the corresponding participant ID
-			**>
-			RoutingTypes.CommonApiDbusAddress commonApiDbusAddress
-		}
-	}
-
-	<**
-		@description: Adds a hop to the parent routing table.
-			<br/>
-			The overloaded methods (one for each concrete Address type) is
-			needed since polymorphism is currently not supported by joynr.
-	**>
-	method addNextHop {
-		in {
-			<** @description: the ID of the target participant **>
-			String participantId
-			<**
-				@description: the messaging address of the next hop towards
-					the corresponding participant ID
-			**>
-			RoutingTypes.BrowserAddress browserAddress
-		}
-	}
-
-	<**
-		@description: Adds a hop to the parent routing table.
-			<br/>
-			The overloaded methods (one for each concrete Address type) is
-			needed since polymorphism is currently not supported by joynr.
-	**>
-	method addNextHop {
-		in {
-			<** @description: the ID of the target participant **>
-			String participantId
-			<**
-				@description: the messaging address of the next hop towards
-					the corresponding participant ID
-			**>
-			RoutingTypes.WebSocketAddress webSocketAddress
-		}
-	}
-
-	<**
-		@description: Adds a hop to the parent routing table.
-			<br/>
-			The overloaded methods (one for each concrete Address type) is
-			needed since polymorphism is currently not supported by joynr.
-	**>
-	method addNextHop {
-		in {
-			<** @description: the ID of the target participant **>
-			String participantId
-			<**
-				@description: the messaging address of the next hop towards
-					the corresponding participant ID
-			**>
-			RoutingTypes.WebSocketClientAddress webSocketClientAddress
-		}
-	}
-
-	<** @description: Removes a hop from the parent routing table. **>
-	method removeNextHop {
-		in {
-			<** @description: the ID of the target participant **>
-			String participantId
-		}
-	}
-
-	<**
-		@description: Asks the parent routing table whether it is able to
-			resolve the destination participant ID.
-	**>
-	method resolveNextHop {
-		in {
-			<** @description: the ID of the target participant to resolve **>
-			String participantId
-		}
-		out {
-			<** @description: true, if the participant ID could be resolved **>
-			Boolean resolved
-		}
-	}
-}
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2015 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+package system
+
+typeCollection RoutingTypes {
+	<** @description: Generic Address **>
+	struct Address polymorphic {}
+
+	<** @description: Channel Address **>
+	struct ChannelAddress extends Address {
+		<** @description: Channel identification **>
+		String channelId
+	}
+
+	<** @description: CommonApiDbus address **>
+	struct CommonApiDbusAddress extends Address {
+		<** @description: Domain name **>
+		String domain
+
+		<** @description: Name of service **>
+		String serviceName
+
+		<** @description: the ID of the target participant **>
+		String participantId
+	}
+
+	<** @description: AsyncIPC address **>
+	struct AsyncIPCAddress extends Address {
+		<** @description: Queue name **>
+		String queueId
+	}
+
+	<** @description: Browser address **>
+	struct BrowserAddress extends Address {
+		<** @description: the ID of the browser window **>
+		String windowId
+	}
+
+	<** @description: Websocket protocol type **>
+	enumeration WebSocketProtocol  {
+		<** @description: Websocket (non-secure) **>
+		WS
+
+		<** @description: Websocket (secure) **>
+		WSS
+	}
+
+	<** @description: Websocket address **>
+	struct WebSocketAddress extends Address {
+		<** @description: Websocket protocol type **>
+		WebSocketProtocol protocol
+
+		<** @description: Websocket host **>
+		String host
+
+		<** @description: Websocket port **>
+		Int32 port
+
+		<** @description: Websocket path **>
+		String path
+	}
+
+	<** @description: Websocket client address **>
+	struct WebSocketClientAddress extends Address {
+		<** @description: Websocket client ID **>
+		String id
+	}
+}
+
+<**
+	@description: The <code>Routing</code> interface is a joynr internal
+		interface. joynr uses a hierarchy of <code>MessageRouter</code>s to
+		route messages from source to destination. The <code>Routing</code>
+		interface is used to update routing information between parent and
+		child <code>MessageRouter</code>s.
+**>
+interface Routing {
+
+	version {major 0 minor 1}
+
+	<**
+		@description: Adds a hop to the parent routing table.
+			<br/>
+			The overloaded methods (one for each concrete Address type) is
+			needed since polymorphism is currently not supported by joynr.
+	**>
+	method addNextHop {
+		in {
+			<** @description: the ID of the target participant **>
+			String participantId
+			<**
+				@description: the messaging address of the next hop towards
+					the corresponding participant ID
+			**>
+			RoutingTypes.ChannelAddress channelAddress
+		}
+	}
+
+	<**
+		@description: Adds a hop to the parent routing table.
+			<br/>
+			The overloaded methods (one for each concrete Address type) is
+			needed since polymorphism is currently not supported by joynr.
+	**>
+	method addNextHop {
+		in {
+			<** @description: the ID of the target participant **>
+			String participantId
+			<**
+				@description: the messaging address of the next hop towards
+					the corresponding participant ID
+			**>
+			RoutingTypes.CommonApiDbusAddress commonApiDbusAddress
+		}
+	}
+
+	<**
+		@description: Adds a hop to the parent routing table.
+			<br/>
+			The overloaded methods (one for each concrete Address type) is
+			needed since polymorphism is currently not supported by joynr.
+	**>
+	method addNextHop {
+		in {
+			<** @description: the ID of the target participant **>
+			String participantId
+			<**
+				@description: the messaging address of the next hop towards
+					the corresponding participant ID
+			**>
+			RoutingTypes.AsyncIPCAddress asyncIPCAddress
+		}
+	}
+
+	<**
+		@description: Adds a hop to the parent routing table.
+			<br/>
+			The overloaded methods (one for each concrete Address type) is
+			needed since polymorphism is currently not supported by joynr.
+	**>
+	method addNextHop {
+		in {
+			<** @description: the ID of the target participant **>
+			String participantId
+			<**
+				@description: the messaging address of the next hop towards
+					the corresponding participant ID
+			**>
+			RoutingTypes.BrowserAddress browserAddress
+		}
+	}
+
+	<**
+		@description: Adds a hop to the parent routing table.
+			<br/>
+			The overloaded methods (one for each concrete Address type) is
+			needed since polymorphism is currently not supported by joynr.
+	**>
+	method addNextHop {
+		in {
+			<** @description: the ID of the target participant **>
+			String participantId
+			<**
+				@description: the messaging address of the next hop towards
+					the corresponding participant ID
+			**>
+			RoutingTypes.WebSocketAddress webSocketAddress
+		}
+	}
+
+	<**
+		@description: Adds a hop to the parent routing table.
+			<br/>
+			The overloaded methods (one for each concrete Address type) is
+			needed since polymorphism is currently not supported by joynr.
+	**>
+	method addNextHop {
+		in {
+			<** @description: the ID of the target participant **>
+			String participantId
+			<**
+				@description: the messaging address of the next hop towards
+					the corresponding participant ID
+			**>
+			RoutingTypes.WebSocketClientAddress webSocketClientAddress
+		}
+	}
+
+	<** @description: Removes a hop from the parent routing table. **>
+	method removeNextHop {
+		in {
+			<** @description: the ID of the target participant **>
+			String participantId
+		}
+	}
+
+	<**
+		@description: Asks the parent routing table whether it is able to
+			resolve the destination participant ID.
+	**>
+	method resolveNextHop {
+		in {
+			<** @description: the ID of the target participant to resolve **>
+			String participantId
+		}
+		out {
+			<** @description: true, if the participant ID could be resolved **>
+			Boolean resolved
+		}
+	}
+}
diff --git a/cpp/.gitignore b/cpp/.gitignore
index 7e8edb4..f0e048a 100644
--- a/cpp/.gitignore
+++ b/cpp/.gitignore
@@ -1,22 +1,35 @@
-CMakeLists.txt.user*
-cluster-controller/include/joynr/JoynrClusterControllerExport.h
-common/include/joynr/JoynrCommonExport.h
-common/include/joynr/JoynrConfig.h
-common/include/joynr/RuntimeConfig.h
-libjoynr/include/joynr/JoynrExport.h
-libjoynr/include/joynr/infrastructure/
-libjoynr/include/joynr/system/
-libjoynr/include/joynr/types/
-libjoynr/communication-model/
-libjoynr/in-process/generated/
-libjoynr/joynr-messaging/generated/
-libjoynr/provider/generated/
-libjoynr/proxy/generated/
-runtimes/include/joynr/JoynrClusterControllerRuntimeExport.h
-runtimes/include/joynr/JoynrRuntimeExport.h
-common-api/joynr/
-common-api/src-gen
-/.project
-/.settings
-tests/gen/
-/docs
+CMakeLists.txt.user*
+cluster-controller/include/joynr/JoynrClusterControllerExport.h
+common/include/joynr/JoynrCommonExport.h
+common/include/joynr/JoynrConfig.h
+common/include/joynr/RuntimeConfig.h
+libjoynr/include/joynr/JoynrExport.h
+libjoynr/include/joynr/infrastructure/
+libjoynr/include/joynr/system/
+libjoynr/include/joynr/types/
+libjoynr/communication-model/
+libjoynr/in-process/generated/
+libjoynr/joynr-messaging/generated/
+libjoynr/provider/generated/
+libjoynr/proxy/generated/
+runtimes/include/joynr/JoynrClusterControllerRuntimeExport.h
+runtimes/include/joynr/JoynrRuntimeExport.h
+common-api/joynr/
+common-api/src-gen
+/.project
+/.settings
+tests/gen/
+/docs
+/bin/
+/CMakeFiles/
+/cmake_install.cmake
+/CMakeCache.txt
+/JoynrConfig.cmake
+/JoynrConfig.cmake.install-tree
+/JoynrConfigVersion.cmake
+/JoynrConfigVersion.cmake.in
+/Makefile
+/ThirdParty/
+/tests/
+/jsonserializer/
+/compile_commands.json
diff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt
index cda6db9..ebd59d2 100644
--- a/cpp/CMakeLists.txt
+++ b/cpp/CMakeLists.txt
@@ -1,793 +1,810 @@
-# Parts of this file are inspired by a CMake tutorial (http://www.cmake.org/Wiki/CMake/)
-# that is available under Creative Commons Attribution 2.5 Generic (CC BY 2.5, http://creativecommons.org/licenses/by/2.5/).
-# There are no attributions specified by the author.
-
-cmake_minimum_required(VERSION 2.8.11)
-
-######## Project settings ########
-project(joynr-0.14.1)
-set(JOYNR_MAJOR_VERSION 0)
-set(JOYNR_MINOR_VERSION 14)
-set(JOYNR_PATCH_VERSION 1)
-set(
-    JOYNR_VERSION
-    ${JOYNR_MAJOR_VERSION}.${JOYNR_MINOR_VERSION}.${JOYNR_PATCH_VERSION}
-)
-
-# Policy for Qt linking on Windows
-if(POLICY CMP0020)
-    cmake_policy(SET CMP0020 OLD)
-endif(POLICY CMP0020)
-
-if(NOT CMAKE_BUILD_TYPE)
-    message(STATUS "setting default value 'Debug' for CMAKE_BUILD_TYPE")
-    set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Build type" FORCE)
-endif()
-
-set_property(
-    CACHE
-    CMAKE_BUILD_TYPE
-    PROPERTY STRINGS
-    "Debug"
-    "Release"
-)
-
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMake")
-include(Sanitizers)
-
-message(STATUS "variable CMAKE_MODULE_PATH=" ${CMAKE_MODULE_PATH})
-message(STATUS "variable CMAKE_PREFIX_PATH=" ${CMAKE_PREFIX_PATH})
-message(STATUS "variable CMAKE_VERSION=" ${CMAKE_VERSION})
-message(STATUS "variable CMAKE_ROOT=" ${CMAKE_ROOT})
-message(STATUS "variable CMAKE_SOURCE_DIR=" ${CMAKE_SOURCE_DIR})
-message(STATUS "variable CMAKE_CURRENT_SOURCE_DIR=" ${CMAKE_CURRENT_SOURCE_DIR})
-
-set(INSTALL_LIB_DIR lib CACHE PATH "Installation sub directory for libraries")
-set(INSTALL_BIN_DIR bin CACHE PATH "Installation sub directory for executables")
-set(INSTALL_INCLUDE_DIR include CACHE PATH "Installation sub directory for header files")
-set(INSTALL_CMAKE_DIR lib/cmake/Joynr CACHE PATH "Installation sub directory for CMake files")
-
-if(NOT INSTALL_TEST_DIR)
-    set(INSTALL_TEST_DIR "${INSTALL_BIN_DIR}" CACHE PATH "Installation sub directory for tests")
-endif(NOT INSTALL_TEST_DIR)
-
-# Make absolute paths relative (otherwise the export files break for cross-compiling)
-foreach(p LIB BIN INCLUDE CMAKE)
-    set(var INSTALL_${p}_DIR)
-    if(IS_ABSOLUTE "${${var}}")
-        file(
-            RELATIVE_PATH ${var}
-            "${CMAKE_INSTALL_PREFIX}"
-            "${${var}}"
-        )
-    endif()
-endforeach()
-
-message(STATUS "----------------- INSTALL LOCATIONS -----------------")
-message(STATUS "CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}")
-message(STATUS "INSTALL_LIB_DIR      = ${INSTALL_LIB_DIR}")
-message(STATUS "INSTALL_BIN_DIR      = ${INSTALL_BIN_DIR}")
-message(STATUS "INSTALL_TEST_DIR     = ${INSTALL_TEST_DIR}")
-message(STATUS "INSTALL_INCLUDE_DIR  = ${INSTALL_INCLUDE_DIR}")
-message(STATUS "INSTALL_CMAKE_DIR    = ${INSTALL_CMAKE_DIR}")
-message(STATUS "-----------------------------------------------------")
-
-# should we use DBUS to communicate between libjoynr and cluster-controller
-option(
-    USE_DBUS_COMMONAPI_COMMUNICATION
-    "Use DBUS and CommonAPI to communicate between libjoynr and cluster-controller?"
-    OFF
-)
-message(STATUS "option USE_DBUS_COMMONAPI_COMMUNICATION=" ${USE_DBUS_COMMONAPI_COMMUNICATION})
-
-option(
-    BUILD_TESTS
-    "Build test binaries?"
-    ON
-)
-message(STATUS "option BUILD_TESTS=" ${BUILD_TESTS})
-
-option(
-    ENABLE_GCOV
-    "Use GCOV to meassure test code coverage?"
-    OFF
-)
-message(STATUS "option ENABLE_GCOV=" ${ENABLE_GCOV})
-
-option(
-    ENABLE_DOXYGEN
-    "Use DOXYGEN to build documentation?"
-    ON
-)
-message(STATUS "option ENABLE_DOXYGEN=" ${ENABLE_DOXYGEN})
-
-include(LocateProgram)
-
-#### BEGIN clang-format ####
-
-option(
-    ENABLE_CLANG_FORMATTER
-    "Use clang-formatter to format source code?"
-    ON
-)
-
-message(STATUS "option ENABLE_CLANG_FORMATTER=" ${ENABLE_CLANG_FORMATTER})
-
-if(${ENABLE_CLANG_FORMATTER})
-    LocateProgram(clang-format CLANG_FORMAT_PATH)
-    add_custom_target(format)
-endif(${ENABLE_CLANG_FORMATTER})
-
-include(AddClangFormat)
-#### END clang-format ####
-
-
-#### BEGIN include-what-you-use ####
-
-# include-what-you-use can be used with CMake 3.3.0 and higher
-if("${CMAKE_VERSION}" VERSION_GREATER 3.3.0)
-
-    option(
-        ENABLE_INCLUDE_WHAT_YOU_USE
-        "Use include-what-you-use to identify missing/superfluous includes?"
-        OFF
-    )
-
-    message(STATUS "option ENABLE_INCLUDE_WHAT_YOU_USE=" ${ENABLE_INCLUDE_WHAT_YOU_USE})
-
-    if(${ENABLE_INCLUDE_WHAT_YOU_USE})
-        LocateProgram(include-what-you-use INCLUDE_WHAT_YOU_USE_PATH)
-    endif(${ENABLE_INCLUDE_WHAT_YOU_USE})
-
-    set(INCLUDE_WHAT_YOU_USE_OPTIONS "" CACHE STRING "additional options for include-what-you-use")
-    
-    set(INCLUDE_WHAT_YOU_USE_PATH_AND_OPTIONS
-        ${INCLUDE_WHAT_YOU_USE_PATH}
-        ${INCLUDE_WHAT_YOU_USE_OPTIONS}
-    )
-
-endif("${CMAKE_VERSION}" VERSION_GREATER 3.3.0)
-
-include(AddIncludeWhatYouUse)
-
-#### END include-what-you-use ####
-
-
-#### BEGIN clang-tidy ####
-
-option(
-    ENABLE_CLANG_TIDY
-    "Use clang-tidy for code analysis/cleanup?"
-    OFF
-)
-
-message(STATUS "option ENABLE_CLANG_TIDY=" ${ENABLE_CLANG_TIDY})
-set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
-
-if(${ENABLE_CLANG_TIDY})
-    LocateProgram(clang-tidy CLANG_TIDY_PATH)
-    add_custom_target(tidy)
-
-    set(
-        CLANG_TIDY_OPTIONS
-        -checks=*
-        -header-filter=.*joynr.*
-        CACHE LIST "additional options for clang-tidy")
-
-    set(CLANG_TIDY_TARGET_FILES "" CACHE LIST "files which will be cleaned up by clang-tidy")
-    option(CLANG_TIDY_APPLY_FIXES "files which will be cleaned up by clang-tidy" ON)
-    option(CLANG_TIDY_FORMAT "format files after applying fixes" ON)
-
-    set(CLANG_TIDY_FIXES_PATH "${CMAKE_BINARY_DIR}/tidy-fixes/" CACHE FILEPATH "location of exported fixes from 'clang-tidy'")
-    file(MAKE_DIRECTORY ${CLANG_TIDY_FIXES_PATH})
-
-    if(${CLANG_TIDY_APPLY_FIXES})
-        LocateProgram(clang-apply-replacements CLANG_APPLY_REPLACEMENTS_PATH)
-
-        set(CLANG_APPLY_REPLACEMENTS_OPTIONS "-remove-change-desc-files")
-        if(${CLANG_TIDY_FORMAT})
-            set(CLANG_APPLY_REPLACEMENTS_OPTIONS ${CLANG_APPLY_REPLACEMENTS_OPTIONS} "-format")
-        endif(${CLANG_TIDY_FORMAT})
-
-        add_custom_command(TARGET tidy
-                           POST_BUILD
-                           COMMAND ${CLANG_APPLY_REPLACEMENTS_PATH} ${CLANG_APPLY_REPLACEMENTS_OPTIONS} ${CLANG_TIDY_FIXES_PATH}
-                           VERBATIM
-        )
-    endif(${CLANG_TIDY_APPLY_FIXES})
-
-endif(${ENABLE_CLANG_TIDY})
-
-include(AddClangTidy)
-
-#### END clang-tidy ####
-
-
-option(
-    BUILD_CLUSTER_CONTROLLER
-    "Build ClusterController?"
-    ON
-)
-
-if(NOT DEFINED JOYNR_SERVER)
-    set(JOYNR_SERVER "localhost:8080")
-endif(NOT DEFINED JOYNR_SERVER)
-message(STATUS "variable JOYNR_SERVER=" ${JOYNR_SERVER})
-
-message(STATUS "variable CMAKE_BUILD_TYPE=" ${CMAKE_BUILD_TYPE})
-
-# Set the binary directory
-set(JOYNR_BINARY_DIR ${CMAKE_BINARY_DIR}/bin)
-message(STATUS "variable JOYNR_BINARY_DIR=" ${JOYNR_BINARY_DIR})
-
-if(${ENABLE_GCOV})
-    list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMake/code-coverage")
-    include(CodeCoverage)
-    setup_target_for_coverage("UnitCoverageHtml" g_UnitTests "coverage")
-    setup_target_for_coverage_cobertura("UnitCoverageTarget" g_UnitTests "coverage" "--gtest_output=xml:g_UnitTests.junit.xml" "'.*/libs/.*|.*/build/.*|.*/tests/.*|.*/generated/.*'")
-    # copy the resource folder to the build folder, because some files are required for the tests
-    add_custom_target(CopyResourceFolderToBuildDir
-        cp -r bin/resources .
-
-        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
-        COMMENT "Copy resources to build directory."
-    )
-    add_dependencies(UnitCoverageTarget CopyResourceFolderToBuildDir)
-    #setup_target_for_coverage_cobertura("IntegrationCoverageTarget" g_IntegrationTests "integrationCoverage.xml")
-    message(STATUS "setting flags to measure test coverage.")
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage")
-    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage")
-    #set(LDFLAGS "{$LDFLAGS} -fprofile-arcs -ftest-coverage")
-endif(${ENABLE_GCOV})
-
-# Doxygen documentation build
-if(ENABLE_DOXYGEN)
-    find_package(Doxygen REQUIRED)
-    message(STATUS "doxygen DOXYGEN_FOUND=${DOXYGEN_FOUND}")
-    add_custom_target(doxygen
-        COMMAND /bin/bash ${CMAKE_SOURCE_DIR}/run_doxygen.sh ${DOXYGEN_EXECUTABLE} ${CMAKE_SOURCE_DIR}
-        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
-        COMMENT "Creating doxygen documentation"
-        VERBATIM
-    )
-endif(ENABLE_DOXYGEN)
-
-message(STATUS "############ Import: Qt5 ############")
-
-# Find includes in corresponding build directories (Qt MOCs are created in current build dir)
-set(CMAKE_INCLUDE_CURRENT_DIR ON)
-
-find_package(Qt5Core)
-find_package(Qt5WebSockets)
-find_package(Qt5Sql)
-
-# Qt-Websockets and Qt-Core is only needed for the Cluster-Controller
-
-IF(${Qt5Core_FOUND} AND ${Qt5WebSockets_FOUND})
-
-    message(STATUS "variable Qt5Core_VERSION_STRING=${Qt5Core_VERSION_STRING}")
-    message(STATUS "variable Qt5Core_INCLUDE_DIRS=${Qt5Core_INCLUDE_DIRS}")
-    get_target_property(Qt5Core_LOCATION Qt5::Core LOCATION)
-    message(STATUS "variable Qt5::Core LOCATION=${Qt5Core_LOCATION}")
-    message(STATUS "variable Qt5Core_LIBRARIES=${Qt5Core_LIBRARIES}")
-    message(STATUS "variable Qt5Core_DEFINITIONS=${Qt5Core_DEFINITIONS}")
-
-    message(STATUS "variable Qt5WebSockets_VERSION_STRING=${Qt5WebSockets_VERSION_STRING}")
-    message(STATUS "variable Qt5WebSockets_INCLUDE_DIRS=${Qt5WebSockets_INCLUDE_DIRS}")
-    get_target_property(Qt5WebSockets_LOCATION Qt5::WebSockets LOCATION)
-    message(STATUS "variable Qt5::WebSockets LOCATION=${Qt5WebSockets_LOCATION}")
-    message(STATUS "variable Qt5WebSockets_LIBRARIES=${Qt5WebSockets_LIBRARIES}")
-    message(STATUS "variable Qt5WebSockets_DEFINITIONS=${Qt5WebSockets_DEFINITIONS}")
-
-    message(STATUS "variable Qt5Sql_VERSION_STRING=${Qt5Sql_VERSION_STRING}")
-    message(STATUS "variable Qt5Sql_INCLUDE_DIRS=${Qt5Sql_INCLUDE_DIRS}")
-    get_target_property(Qt5Sql_LOCATION Qt5::Sql LOCATION)
-    message(STATUS "variable Qt5Sql LOCATION=${Qt5Sql_LOCATION}")
-    message(STATUS "variable Qt5Sql_LIBRARIES=${Qt5Sql_LIBRARIES}")
-    message(STATUS "variable Qt5Sql_DEFINITIONS=${Qt5Sql_DEFINITIONS}")
-    
-ELSE(${Qt5Core_FOUND} AND ${Qt5WebSockets_FOUND})
-
-    SET(BUILD_CLUSTER_CONTROLLER OFF)
-
-ENDIF(${Qt5Core_FOUND} AND ${Qt5WebSockets_FOUND})
-
-message(STATUS "option BUILD_CLUSTER_CONTROLLER=" ${BUILD_CLUSTER_CONTROLLER})
-
-find_package(Qt5Test REQUIRED)
-message(STATUS "variable Qt5Test_VERSION_STRING=${Qt5Test_VERSION_STRING}")
-message(STATUS "variable Qt5Test_INCLUDE_DIRS=${Qt5Test_INCLUDE_DIRS}")
-get_target_property(Qt5Test_LOCATION Qt5::Test LOCATION)
-message(STATUS "variable Qt5::Test LOCATION=${Qt5Test_LOCATION}")
-message(STATUS "variable Qt5Test_LIBRARIES=${Qt5Test_LIBRARIES}")
-message(STATUS "variable Qt5Test_DEFINITIONS=${Qt5Test_DEFINITIONS}")
-
-######## Add Boost ########
-
-find_package(Boost 1.56.0 REQUIRED
-    COMPONENTS
-    system
-    thread
-)
-
-include_directories(${Boost_INCLUDE_DIRS})
-
-message(STATUS "############ Import: cURL ############")
-if(${WIN32})
-    if(NOT CURL_HOME)
-        if(DEFINED ENV{CURL_HOME})
-            message(STATUS "setting CURL_HOME from environment variable")
-            message(STATUS "environment variable CURL_HOME=" $ENV{CURL_HOME})
-            set(CURL_HOME $ENV{CURL_HOME})
-        else()
-            message(FATAL_ERROR "CURL_HOME variable not set")
-        endif()
-    endif(NOT CURL_HOME)
-    message(STATUS "variable CURL_HOME=" ${CURL_HOME})
-
-    find_path(CURL_INCLUDE_DIRS
-        NAMES curl/curl.h
-        PATHS ${CURL_HOME}
-        PATH_SUFFIXES include
-        NO_DEFAULT_PATH
-    )
-
-    set(curl_version_header ${CURL_INCLUDE_DIRS}/curl/curlver.h)
-    if(EXISTS ${curl_version_header})
-        file(STRINGS ${curl_version_header} curl_version_define REGEX "^#define[\t ]+LIBCURL_VERSION[\t ]+\".*\"")
-        string(REGEX REPLACE "^#define[\t ]+LIBCURL_VERSION[\t ]+\"([^\"]*)\".*" "\\1" CURL_VERSION_STRING "${curl_version_define}")
-        unset(curl_version_define)
-    endif()
-    unset(curl_version_header)
-
-    if(CMAKE_GENERATOR MATCHES "Visual Studio")
-        message(AUTHOR_WARNING "When using the Visual Studio makefile generator, no prefixes are used to find libraries. Therefore, we add additional prefixes here to CMAKE_FIND_LIBRARY_PREFIXES.")
-        message(AUTHOR_WARNING "When using the Visual Studio makefile generator, only .lib suffixes are used to find libraries. Therefore, we add additional suffixes here to CMAKE_FIND_LIBRARY_SUFFIXES.")
-        # saving the old state of CMAKE_FIND_LIBRARY_*
-        set(CMAKE_FIND_LIBRARY_PREFIXES_org ${CMAKE_FIND_LIBRARY_PREFIXES})
-        set(CMAKE_FIND_LIBRARY_SUFFIXES_org ${CMAKE_FIND_LIBRARY_SUFFIXES})
-        message(STATUS "variable CMAKE_FIND_LIBRARY_PREFIXES_org=" ${CMAKE_FIND_LIBRARY_PREFIXES_org})
-        message(STATUS "variable CMAKE_FIND_LIBRARY_SUFFIXES_org=" ${CMAKE_FIND_LIBRARY_SUFFIXES_org})
-        # adding additional prefixes and suffixes
-        set(CMAKE_FIND_LIBRARY_PREFIXES ${CMAKE_FIND_LIBRARY_PREFIXES} "lib")
-        set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES} ".dll" ".dll.a" ".a")
-    endif(CMAKE_GENERATOR MATCHES "Visual Studio")
-
-    message(STATUS "variable CMAKE_FIND_LIBRARY_PREFIXES=" ${CMAKE_FIND_LIBRARY_PREFIXES})
-    message(STATUS "variable CMAKE_FIND_LIBRARY_SUFFIXES=" ${CMAKE_FIND_LIBRARY_SUFFIXES})
-
-    find_library(CURL_LIBRARIES
-        NAMES curldll
-        PATHS ${CURL_HOME}
-        PATH_SUFFIXES lib
-        NO_DEFAULT_PATH
-    )
-
-    if(CMAKE_GENERATOR MATCHES "Visual Studio")
-        # restoring old state of CMAKE_FIND_LIBRARY_*
-        # NOTE: We need quotes around the variables here, because they could be empty.
-        #       This would cause the variable to be unset.
-        set(CMAKE_FIND_LIBRARY_PREFIXES "${CMAKE_FIND_LIBRARY_PREFIXES_org}")
-        set(CMAKE_FIND_LIBRARY_SUFFIXES "${CMAKE_FIND_LIBRARY_SUFFIXES_org}")
-        message(STATUS "variable restored CMAKE_FIND_LIBRARY_PREFIXES=" ${CMAKE_FIND_LIBRARY_PREFIXES})
-        message(STATUS "variable restored CMAKE_FIND_LIBRARY_SUFFIXES=" ${CMAKE_FIND_LIBRARY_SUFFIXES})
-    endif(CMAKE_GENERATOR MATCHES "Visual Studio")
-
-    if(CURL_INCLUDE_DIRS AND CURL_VERSION_STRING AND CURL_LIBRARIES)
-        set(CURL_FOUND TRUE)
-    else()
-        set(CURL_FOUND FALSE)
-    endif()
-else(${WIN32})
-    find_package(CURL REQUIRED)
-endif(${WIN32})
-
-message(STATUS "variable CURL_FOUND=" ${CURL_FOUND})
-message(STATUS "variable CURL_VERSION_STRING=" ${CURL_VERSION_STRING})
-message(STATUS "variable CURL_INCLUDE_DIRS=" ${CURL_INCLUDE_DIRS})
-message(STATUS "variable CURL_LIBRARIES=" ${CURL_LIBRARIES})
-
-if(NOT CURL_FOUND)
-    message(FATAL_ERROR "Could not find library: curl.")
-endif()
-
-include_directories(
-   SYSTEM ${CURL_INCLUDE_DIRS}
-)
-
-include(AddExternalProject)
-
-### Add libwebsockets ###########################################################
-if (USE_PLATFORM_LIBWEBSOCKETS)
-    find_package(PkgConfig REQUIRED)
-    pkg_check_modules(libwebsockets REQUIRED libwebsockets)
-else(USE_PLATFORM_LIBWEBSOCKETS)
-    AddExternalProject(
-        libwebsockets
-        GIT_REPOSITORY https://github.com/warmcat/libwebsockets
-        GIT_TAG v1.5-chrome47-firefox41
-        TIMEOUT 10
-        # Disable svn update
-        UPDATE_COMMAND ""
-        PATCH_COMMAND patch -f -d ${CMAKE_BINARY_DIR}/ThirdParty/src/libwebsockets -p1 < ${CMAKE_SOURCE_DIR}/CMake/libwebsockets-FixEmptyExtensions.patch
-        # Configure libwebsockets library features
-        CMAKE_ARGS  -DLWS_WITH_SSL=0
-                    -DLWS_WITHOUT_CLIENT=0
-                    -DLWS_WITHOUT_SERVER=0
-                    -DLWS_WITHOUT_EXTENSIONS=1
-                    -DLWS_WITHOUT_TESTAPPS=1
-                    -DLWS_WITHOUT_TEST_SERVER=1
-                    -DLWS_WITHOUT_TEST_SERVER_EXTPOLL=1
-                    -DLWS_WITHOUT_TEST_PING=1
-                    -DLWS_WITHOUT_TEST_CLIENT=1
-                    -DLWS_WITH_ZLIB=OFF
-                    -DLWS_WITHOUT_TEST_FRAGGLE=1
-                    -DCMAKE_INSTALL_PREFIX=${CMAKE_SOURCE_DIR}
-                    -DCMAKE_POSITION_INDEPENDENT_CODE=1
-        BUILD_BYPRODUCTS ${CMAKE_BINARY_DIR}/ThirdParty/src/libwebsockets-build/lib/libwebsockets.a
-    )
-
-    ExternalProject_Get_Property(libwebsockets SOURCE_DIR)
-    ExternalProject_Get_Property(libwebsockets BINARY_DIR)
-
-    set(libwebsockets_LIBRARIES ${BINARY_DIR}/lib/libwebsockets.a )
-    set(libwebsockets_INCLUDE_DIRS
-        ${SOURCE_DIR}/lib
-        ${BINARY_DIR}
-    )
-endif(USE_PLATFORM_LIBWEBSOCKETS)
-
-
-message(STATUS "variable libwebsockets_LIBRARIES=${libwebsockets_LIBRARIES}")
-message(STATUS "variable libwebsockets_INCLUDE_DIRS=${libwebsockets_INCLUDE_DIRS}")
-
-# ---------------------------------------------- Build library --------------------------------------------------
-
-include(GenerateExportHeader)
-
-set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${JOYNR_BINARY_DIR})
-set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${JOYNR_BINARY_DIR})
-set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${JOYNR_BINARY_DIR})
-
-######## Build and include settings ########
-link_directories(
-    ${LINK_DIRECTORIES}
-)
-
-######## SET LOG LEVEL #########
-# JOYNR_MAX_LOG_LEVEL_FATAL
-# JOYNR_MAX_LOG_LEVEL_ERROR
-# JOYNR_MAX_LOG_LEVEL_WARN
-# JOYNR_MAX_LOG_LEVEL_INFO
-# JOYNR_MAX_LOG_LEVEL_DEBUG
-# JOYNR_MAX_LOG_LEVEL_TRACE
-
-# for every other build type than debug we limit log messages to level ERROR
-string(TOLOWER "${CMAKE_BUILD_TYPE}" CMAKE_BUILD_TYPE_TOLOWER)
-if(CMAKE_BUILD_TYPE_TOLOWER MATCHES debug)
-    set(JOYNR_MAX_LOG_LEVEL "TRACE" CACHE STRING "joynr max log level")
-else()
-    set(JOYNR_MAX_LOG_LEVEL "ERROR" CACHE STRING "joynr max log level")
-endif()
-
-set_property(
-             CACHE
-             JOYNR_MAX_LOG_LEVEL
-             PROPERTY STRINGS
-             FATAL
-             ERROR
-             WARN
-             INFO
-             DEBUG
-             TRACE
-)
-
-add_definitions("-DJOYNR_MAX_LOG_LEVEL_${JOYNR_MAX_LOG_LEVEL}")
-
-######## DEFAULT COMPILER FLAGS #############
-
-#Other Warnings that could be turned on:
-#-Wpedantic
-#-Wpadded
-#-Wswitch-default //but QT moc_files produce lots of warnings here.
-
-message(STATUS "CMAKE_GENERATOR=" ${CMAKE_GENERATOR})
-message(STATUS "compiler CMAKE_C_COMPILER=" ${CMAKE_C_COMPILER})
-message(STATUS "compiler CMAKE_C_COMPILER_ID=" ${CMAKE_C_COMPILER_ID})
-message(STATUS "compiler CMAKE_C_COMPILER_VERSION=" ${CMAKE_C_COMPILER_VERSION})
-message(STATUS "compiler CMAKE_CXX_COMPILER=" ${CMAKE_CXX_COMPILER})
-message(STATUS "compiler CMAKE_CXX_COMPILER_ID=" ${CMAKE_CXX_COMPILER_ID})
-message(STATUS "compiler CMAKE_CXX_COMPILER_VERSION=" ${CMAKE_CXX_COMPILER_VERSION})
-# Compiler flags that depend on compiler type and OS
-if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
-        set (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${MSVCC_AUTO_INCLUDE} /MP")
-
-        # When compiling with DEBUG turn on runtime error checks (RTC1) and
-        # Buffer Overflow detection (GS)
-        set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${MSVCC_AUTO_INCLUDE} /RTC1 /GS /MP")
-endif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
-
-if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
-    # common-api/CMakeLists.txt overwrites CMAKE_CXX_FLAGS to deactivate warnings for CommonAPI
-    # generated code.
-    # All changes to CMAKE_CXX_FLAGS that are not warnings should be added there as well.
-    set(GNU_CXX_FLAGS "-pipe -g")
-    set(GNU_CXX_FLAGS "${GNU_CXX_FLAGS} -Wall -Wunused-value -Wunused -Wcast-qual -Wpointer-arith")
-    set(GNU_CXX_FLAGS "${GNU_CXX_FLAGS} -Wextra -Wcast-align -Wdisabled-optimization -Wformat-y2k")
-    set(GNU_CXX_FLAGS "${GNU_CXX_FLAGS} -Wno-format-extra-args -Wformat-nonliteral -Wformat=2 -Winit-self")
-    set(GNU_CXX_FLAGS "${GNU_CXX_FLAGS} -Winvalid-pch -Wunsafe-loop-optimizations -Wmissing-include-dirs")
-    set(GNU_CXX_FLAGS "${GNU_CXX_FLAGS} -Wmissing-braces -Wpacked -Wredundant-decls -Wstack-protector")
-    set(GNU_CXX_FLAGS "${GNU_CXX_FLAGS} -Wswitch-enum -Wuninitialized -Weffc++ -Wformat-security")
-    if(${WIN32})
-            # This setting does not work in linux:
-            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GNU_CXX_FLAGS} -enable-auto-import")
-    else()
-            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GNU_CXX_FLAGS} -pthread")
-    endif(${WIN32})
-    # check GNU CXX compiler version
-    if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER "4.9" OR CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL "4.9")
-        message(STATUS "C++11 activated.")
-        add_definitions(-D_GLIBCXX_USE_NANOSLEEP)
-        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")
-    else()
-        message(FATAL_ERROR "C++11 and a gcc compiler with a version higher than 4.9 is needed.")
-    endif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER "4.9" OR CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL "4.9")
-endif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
-
-if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --std=c++11 -Wno-unknown-pragmas")
-    if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
-        option(
-            USE_STDLIB_LIBCPP
-            "use libc++"
-            OFF
-        )
-        if(USE_STDLIB_LIBCPP)
-            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
-        endif()
-        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
-    else()
-        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
-    endif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
-        
-    add_definitions(-DGTEST_USE_OWN_TR1_TUPLE=1)
-endif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
-
-if(${USE_DBUS_COMMONAPI_COMMUNICATION})
-    message(STATUS "### DBUS CommonAPI configuration ###")
-
-    find_package(PkgConfig)
-    pkg_check_modules(DBUS1 REQUIRED dbus-1)
-    message(STATUS "variable DBUS_INCLUDE_DIRS=" ${DBUS1_INCLUDE_DIRS})
-    message(STATUS "variable DBUS1_LIBRARIES=" ${DBUS1_LIBRARIES})
-    message(STATUS "variable DBUS1_LIBRARY_DIRS=" ${DBUS1_LIBRARY_DIRS})
-    pkg_check_modules(COMMONAPI REQUIRED CommonAPI=2.1.4)
-    message(STATUS "variable COMMONAPI_INCLUDE_DIRS=" ${COMMONAPI_INCLUDE_DIRS})
-    message(STATUS "variable COMMONAPI_LIBRARIES=" ${COMMONAPI_LIBRARIES})
-    message(STATUS "variable COMMONAPI_VERSION=" ${COMMONAPI_VERSION})
-    pkg_check_modules(COMMONAPI_DBUS REQUIRED CommonAPI-DBus=2.1.4)
-    message(STATUS "variable COMMONAPI_DBUS_INCLUDE_DIRS=" ${COMMONAPI_DBUS_INCLUDE_DIRS})
-    message(STATUS "variable COMMONAPI_DBUS_LIBRARIES=" ${COMMONAPI_DBUS_LIBRARIES})
-    message(STATUS "variable COMMONAPI_DBUS_VERSION=" ${COMMONAPI_DBUS_VERSION})
-
-    include_directories(
-        SYSTEM
-        ${COMMONAPI_INCLUDE_DIRS}
-        ${DBUS1_INCLUDE_DIRS}
-        ${COMMONAPI_DBUS_INCLUDE_DIRS}
-    )
-
-    link_directories(${DBUS1_LIBRARY_DIRS} ${COMMONAPI_LIBRARY_DIRS} ${COMMONAPI_DBUS_LIBRARY_DIRS})
-endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
-
-
-### Add spdlog ###########################################################
-find_package(Threads) # sets CMAKE_THREAD_LIBS_INIT
-
-message(STATUS "############ Download: spdlog ############")
-set(SPDLOG_SOURCE_URL "https://github.com/gabime/spdlog")
-set(SPDLOG_SOURCE_TYPE "GIT_REPOSITORY")
-if(SPDLOG_ROOT)
-    set(SPDLOG_SOURCE_URL "${SPDLOG_ROOT}")
-    set(SPDLOG_SOURCE_TYPE "URL")
-endif(SPDLOG_ROOT)
-message(STATUS "Using source for spdlog: ${SPDLOG_SOURCE_URL}")
-
-
-AddExternalProject(
-    spdlog
-    ${SPDLOG_SOURCE_TYPE} "${SPDLOG_SOURCE_URL}"
-    TIMEOUT 10
-    # Disable configure step
-    CONFIGURE_COMMAND ""
-    # Disable build step
-    BUILD_COMMAND ""
-)
-
-ExternalProject_Get_Property(spdlog SOURCE_DIR)
-set(spdlog_SOURCE_DIR ${SOURCE_DIR})
-
-######## Add submodules ########
-if(${USE_DBUS_COMMONAPI_COMMUNICATION})
-    add_subdirectory(common-api)
-endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
-add_subdirectory(common)
-add_subdirectory(jsonserializer)
-add_subdirectory(libjoynr)
-if(${BUILD_CLUSTER_CONTROLLER})
-    add_subdirectory(cluster-controller)
-else()
-    # We still use the websocket default configuration file
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cluster-controller/resources/default-websocket.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/default-websocket.settings)
-    install(
-        FILES
-            ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/default-websocket.settings
-        DESTINATION ${INSTALL_BIN_DIR}/resources/
-    )
-endif(${BUILD_CLUSTER_CONTROLLER})
-add_subdirectory(runtimes)
-if(${BUILD_TESTS})
-    add_subdirectory(tests)
-endif(${BUILD_TESTS})
-
-######## Install targets ########
-
-set(
-    TARGET_LIBS
-    JoynrCommon
-    Joynr
-    JoynrWsRuntime
-    jsonserializer
-)
-
-if(${BUILD_CLUSTER_CONTROLLER})
-    LIST(
-        APPEND
-        TARGET_LIBS
-        JoynrClusterController
-        JoynrClusterControllerRuntime
-    )
-endif(${BUILD_CLUSTER_CONTROLLER})
-
-if(${USE_DBUS_COMMONAPI_COMMUNICATION})
-    list(
-        APPEND TARGET_LIBS
-        JoynrDbusRuntime
-        JoynrCommonAPI
-    )
-endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
-
-# export all targets from the build tree to use by outside projects
-export(
-    TARGETS
-    ${TARGET_LIBS}
-    FILE "${JOYNR_BINARY_DIR}/JoynrTargets.cmake"
-)
-
-# store the current build dir in the CMake user package registry
-# find_package may use it while searching for Joynr
-export(PACKAGE Joynr)
-
-# install the export targets for use with the install-tree
-install(
-    EXPORT JoynrTargets
-    DESTINATION "${INSTALL_CMAKE_DIR}" COMPONENT dev
-    FILE "JoynrTargets.cmake"
-)
-
-# Create the JoynrConfig.cmake and JoynrConfigVersion files
-set(
-    JoynrConfig_LIB_COMMON_LIBRARIES
-    JoynrCommon
-    Joynr
-    jsonserializer
-    ${CMAKE_THREAD_LIBS_INIT}
-)
-
-if(${BUILD_CLUSTER_CONTROLLER})
-    set(
-        JoynrConfig_LIB_INPROCESS_LIBRARIES
-        JoynrClusterController
-        JoynrClusterControllerRuntime
-    )
-endif(${BUILD_CLUSTER_CONTROLLER})
-
-set(
-    JoynrConfig_LIB_WS_LIBRARIES
-    JoynrWsRuntime
-)
-
-if(${USE_DBUS_COMMONAPI_COMMUNICATION})
-    set(
-        JoynrConfig_LIB_DBUS_LIBRARIES
-        JoynrDbusRuntime
-    )
-endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
-
-# ... for the build tree
-get_target_property(JoynrCommon_PUBLIC_INCLUDE_DIRECTORY JoynrCommon PUBLIC_INCLUDE_DIRECTORY)
-get_target_property(Joynr_PUBLIC_INCLUDE_DIRECTORY Joynr PUBLIC_INCLUDE_DIRECTORY)
-get_target_property(jsonserializer_PUBLIC_INCLUDE_DIRECTORY jsonserializer PUBLIC_INCLUDE_DIRECTORY)
-message(STATUS "variable jsonserializer_PUBLIC_INCLUDE_DIRECTORY=" ${jsonserializer_PUBLIC_INCLUDE_DIRECTORY})
-
-set(
-    JoynrConfig_LIB_COMMON_INCLUDE_DIRS
-    ${JoynrCommon_PUBLIC_INCLUDE_DIRECTORY}
-    ${Joynr_PUBLIC_INCLUDE_DIRECTORY}
-    ${spdlog_SOURCE_DIR}/include
-    ${jsonserializer_PUBLIC_INCLUDE_DIRECTORY}
-    ${jsmn_SOURCE_DIR}
-    ${runtime_PUBLIC_INCLUDE_DIRECTORY}
-)
-if(${BUILD_CLUSTER_CONTROLLER})
-    get_target_property(JoynrClusterController_PUBLIC_INCLUDE_DIRECTORY JoynrClusterController PUBLIC_INCLUDE_DIRECTORY)
-    get_target_property(JoynrClusterControllerRuntime_PUBLIC_INCLUDE_DIRECTORY JoynrClusterControllerRuntime PUBLIC_INCLUDE_DIRECTORY)
-    set(
-        JoynrConfig_LIB_INPROCESS_INCLUDE_DIRS
-        ${JoynrClusterController_PUBLIC_INCLUDE_DIRECTORY}
-        ${JoynrClusterControllerRuntime_PUBLIC_INCLUDE_DIRECTORY}
-    )
-endif(${BUILD_CLUSTER_CONTROLLER})
-set(
-    JoynrConfig_LIB_WS_INCLUDE_DIRS
-    ${JoynrCommon_PUBLIC_INCLUDE_DIRECTORY}
-    ${Joynr_PUBLIC_INCLUDE_DIRECTORY}
-    ${spdlog_SOURCE_DIR}/include
-    ${jsonserializer_PUBLIC_INCLUDE_DIRECTORY}
-    ${jsmn_SOURCE_DIR}
-)
-if(${USE_DBUS_COMMONAPI_COMMUNICATION})
-    set(
-        JoynrConfig_LIB_DBUS_INCLUDE_DIRS
-        ${JoynrCommon_PUBLIC_INCLUDE_DIRECTORY}
-        ${Joynr_PUBLIC_INCLUDE_DIRECTORY}
-        ${spdlog_SOURCE_DIR}/include
-        ${jsonserializer_PUBLIC_INCLUDE_DIRECTORY}
-        ${jsmn_SOURCE_DIR}
-    )
-endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
-set(JoynrConfig_TARGETS_FILE "${JOYNR_BINARY_DIR}/JoynrTargets.cmake")
-set(JoynrConfig_INSTALL_BIN_DIR "${JOYNR_BINARY_DIR}")
-
-configure_file(
-    JoynrConfig.cmake.in
-    "JoynrConfig.cmake" @ONLY
-)
-# ... for the install tree
-file(
-    RELATIVE_PATH RELATIVE_INSTALL_INCLUDE_DIR
-    "${CMAKE_INSTALL_PREFIX}/${INSTALL_CMAKE_DIR}"
-    "${CMAKE_INSTALL_PREFIX}/${INSTALL_INCLUDE_DIR}"
-)
-set(JoynrConfig_LIB_INPROCESS_INCLUDE_DIRS "\${CMAKE_CURRENT_LIST_DIR}/${RELATIVE_INSTALL_INCLUDE_DIR}")
-set(JoynrConfig_TARGETS_FILE "\${CMAKE_CURRENT_LIST_DIR}/JoynrTargets.cmake")
-file(
-    RELATIVE_PATH RELATIVE_INSTALL_BIN_DIR
-    "${CMAKE_INSTALL_PREFIX}/${INSTALL_CMAKE_DIR}"
-    "${CMAKE_INSTALL_PREFIX}/${INSTALL_BIN_DIR}"
-)
-set(JoynrConfig_INSTALL_BIN_DIR "\${CMAKE_CURRENT_LIST_DIR}/${RELATIVE_INSTALL_BIN_DIR}")
-configure_file(
-    JoynrConfig.cmake.in
-    "JoynrConfig.cmake.install-tree" @ONLY
-)
-# ... for both
-configure_file(
-    JoynrConfigVersion.cmake.in
-    "JoynrConfigVersion.cmake" @ONLY
-)
-
-# install the JoynrConfig.cmake and JoynrConfigVersion.cmake
-install(
-    FILES "${CMAKE_CURRENT_BINARY_DIR}/JoynrConfig.cmake.install-tree"
-    DESTINATION "${INSTALL_CMAKE_DIR}" COMPONENT dev
-    RENAME "JoynrConfig.cmake"
-)
-install(
-    FILES "${CMAKE_CURRENT_BINARY_DIR}/JoynrConfigVersion.cmake"
-    DESTINATION "${INSTALL_CMAKE_DIR}" COMPONENT dev
-)
-
-
-######### Documentation settings ########
-#configure_file(${CMAKE_CURRENT_SOURCE_DIR}/doxygen.cfg.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)
+# Parts of this file are inspired by a CMake tutorial (http://www.cmake.org/Wiki/CMake/)
+# that is available under Creative Commons Attribution 2.5 Generic (CC BY 2.5, http://creativecommons.org/licenses/by/2.5/).
+# There are no attributions specified by the author.
+
+cmake_minimum_required(VERSION 2.8.11)
+
+######## Project settings ########
+project(joynr-0.14.1)
+set(JOYNR_MAJOR_VERSION 0)
+set(JOYNR_MINOR_VERSION 14)
+set(JOYNR_PATCH_VERSION 1)
+set(
+    JOYNR_VERSION
+    ${JOYNR_MAJOR_VERSION}.${JOYNR_MINOR_VERSION}.${JOYNR_PATCH_VERSION}
+)
+
+# Policy for Qt linking on Windows
+if(POLICY CMP0020)
+    cmake_policy(SET CMP0020 OLD)
+endif(POLICY CMP0020)
+
+if(NOT CMAKE_BUILD_TYPE)
+    message(STATUS "setting default value 'Debug' for CMAKE_BUILD_TYPE")
+    set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Build type" FORCE)
+endif()
+
+set_property(
+    CACHE
+    CMAKE_BUILD_TYPE
+    PROPERTY STRINGS
+    "Debug"
+    "Release"
+)
+
+list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMake")
+include(Sanitizers)
+
+message(STATUS "variable CMAKE_MODULE_PATH=" ${CMAKE_MODULE_PATH})
+message(STATUS "variable CMAKE_PREFIX_PATH=" ${CMAKE_PREFIX_PATH})
+message(STATUS "variable CMAKE_VERSION=" ${CMAKE_VERSION})
+message(STATUS "variable CMAKE_ROOT=" ${CMAKE_ROOT})
+message(STATUS "variable CMAKE_SOURCE_DIR=" ${CMAKE_SOURCE_DIR})
+message(STATUS "variable CMAKE_CURRENT_SOURCE_DIR=" ${CMAKE_CURRENT_SOURCE_DIR})
+
+set(INSTALL_LIB_DIR lib CACHE PATH "Installation sub directory for libraries")
+set(INSTALL_BIN_DIR bin CACHE PATH "Installation sub directory for executables")
+set(INSTALL_INCLUDE_DIR include CACHE PATH "Installation sub directory for header files")
+set(INSTALL_CMAKE_DIR lib/cmake/Joynr CACHE PATH "Installation sub directory for CMake files")
+
+if(NOT INSTALL_TEST_DIR)
+    set(INSTALL_TEST_DIR "${INSTALL_BIN_DIR}" CACHE PATH "Installation sub directory for tests")
+endif(NOT INSTALL_TEST_DIR)
+
+# Make absolute paths relative (otherwise the export files break for cross-compiling)
+foreach(p LIB BIN INCLUDE CMAKE)
+    set(var INSTALL_${p}_DIR)
+    if(IS_ABSOLUTE "${${var}}")
+        file(
+            RELATIVE_PATH ${var}
+            "${CMAKE_INSTALL_PREFIX}"
+            "${${var}}"
+        )
+    endif()
+endforeach()
+
+message(STATUS "----------------- INSTALL LOCATIONS -----------------")
+message(STATUS "CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}")
+message(STATUS "INSTALL_LIB_DIR      = ${INSTALL_LIB_DIR}")
+message(STATUS "INSTALL_BIN_DIR      = ${INSTALL_BIN_DIR}")
+message(STATUS "INSTALL_TEST_DIR     = ${INSTALL_TEST_DIR}")
+message(STATUS "INSTALL_INCLUDE_DIR  = ${INSTALL_INCLUDE_DIR}")
+message(STATUS "INSTALL_CMAKE_DIR    = ${INSTALL_CMAKE_DIR}")
+message(STATUS "-----------------------------------------------------")
+
+# should we use DBUS to communicate between libjoynr and cluster-controller
+option(
+    USE_DBUS_COMMONAPI_COMMUNICATION
+    "Use DBUS and CommonAPI to communicate between libjoynr and cluster-controller?"
+    OFF
+)
+message(STATUS "option USE_DBUS_COMMONAPI_COMMUNICATION=" ${USE_DBUS_COMMONAPI_COMMUNICATION})
+
+option(
+    BUILD_TESTS
+    "Build test binaries?"
+    ON
+)
+message(STATUS "option BUILD_TESTS=" ${BUILD_TESTS})
+
+option(
+    ENABLE_GCOV
+    "Use GCOV to meassure test code coverage?"
+    OFF
+)
+message(STATUS "option ENABLE_GCOV=" ${ENABLE_GCOV})
+
+option(
+    ENABLE_DOXYGEN
+    "Use DOXYGEN to build documentation?"
+    ON
+)
+message(STATUS "option ENABLE_DOXYGEN=" ${ENABLE_DOXYGEN})
+
+include(LocateProgram)
+
+#### BEGIN clang-format ####
+
+option(
+    ENABLE_CLANG_FORMATTER
+    "Use clang-formatter to format source code?"
+    ON
+)
+
+message(STATUS "option ENABLE_CLANG_FORMATTER=" ${ENABLE_CLANG_FORMATTER})
+
+if(${ENABLE_CLANG_FORMATTER})
+    LocateProgram(clang-format CLANG_FORMAT_PATH)
+    add_custom_target(format)
+endif(${ENABLE_CLANG_FORMATTER})
+
+include(AddClangFormat)
+#### END clang-format ####
+
+
+#### BEGIN include-what-you-use ####
+
+# include-what-you-use can be used with CMake 3.3.0 and higher
+if("${CMAKE_VERSION}" VERSION_GREATER 3.3.0)
+
+    option(
+        ENABLE_INCLUDE_WHAT_YOU_USE
+        "Use include-what-you-use to identify missing/superfluous includes?"
+        OFF
+    )
+
+    message(STATUS "option ENABLE_INCLUDE_WHAT_YOU_USE=" ${ENABLE_INCLUDE_WHAT_YOU_USE})
+
+    if(${ENABLE_INCLUDE_WHAT_YOU_USE})
+        LocateProgram(include-what-you-use INCLUDE_WHAT_YOU_USE_PATH)
+    endif(${ENABLE_INCLUDE_WHAT_YOU_USE})
+
+    set(INCLUDE_WHAT_YOU_USE_OPTIONS "" CACHE STRING "additional options for include-what-you-use")
+    
+    set(INCLUDE_WHAT_YOU_USE_PATH_AND_OPTIONS
+        ${INCLUDE_WHAT_YOU_USE_PATH}
+        ${INCLUDE_WHAT_YOU_USE_OPTIONS}
+    )
+
+endif("${CMAKE_VERSION}" VERSION_GREATER 3.3.0)
+
+include(AddIncludeWhatYouUse)
+
+#### END include-what-you-use ####
+
+
+#### BEGIN clang-tidy ####
+
+option(
+    ENABLE_CLANG_TIDY
+    "Use clang-tidy for code analysis/cleanup?"
+    OFF
+)
+
+message(STATUS "option ENABLE_CLANG_TIDY=" ${ENABLE_CLANG_TIDY})
+set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
+
+if(${ENABLE_CLANG_TIDY})
+    LocateProgram(clang-tidy CLANG_TIDY_PATH)
+    add_custom_target(tidy)
+
+    set(
+        CLANG_TIDY_OPTIONS
+        -checks=*
+        -header-filter=.*joynr.*
+        CACHE LIST "additional options for clang-tidy")
+
+    set(CLANG_TIDY_TARGET_FILES "" CACHE LIST "files which will be cleaned up by clang-tidy")
+    option(CLANG_TIDY_APPLY_FIXES "files which will be cleaned up by clang-tidy" ON)
+    option(CLANG_TIDY_FORMAT "format files after applying fixes" ON)
+
+    set(CLANG_TIDY_FIXES_PATH "${CMAKE_BINARY_DIR}/tidy-fixes/" CACHE FILEPATH "location of exported fixes from 'clang-tidy'")
+    file(MAKE_DIRECTORY ${CLANG_TIDY_FIXES_PATH})
+
+    if(${CLANG_TIDY_APPLY_FIXES})
+        LocateProgram(clang-apply-replacements CLANG_APPLY_REPLACEMENTS_PATH)
+
+        set(CLANG_APPLY_REPLACEMENTS_OPTIONS "-remove-change-desc-files")
+        if(${CLANG_TIDY_FORMAT})
+            set(CLANG_APPLY_REPLACEMENTS_OPTIONS ${CLANG_APPLY_REPLACEMENTS_OPTIONS} "-format")
+        endif(${CLANG_TIDY_FORMAT})
+
+        add_custom_command(TARGET tidy
+                           POST_BUILD
+                           COMMAND ${CLANG_APPLY_REPLACEMENTS_PATH} ${CLANG_APPLY_REPLACEMENTS_OPTIONS} ${CLANG_TIDY_FIXES_PATH}
+                           VERBATIM
+        )
+    endif(${CLANG_TIDY_APPLY_FIXES})
+
+endif(${ENABLE_CLANG_TIDY})
+
+include(AddClangTidy)
+
+#### END clang-tidy ####
+
+
+option(
+    BUILD_CLUSTER_CONTROLLER
+    "Build ClusterController?"
+    ON
+)
+
+if(NOT DEFINED JOYNR_SERVER)
+    set(JOYNR_SERVER "localhost:8080")
+endif(NOT DEFINED JOYNR_SERVER)
+message(STATUS "variable JOYNR_SERVER=" ${JOYNR_SERVER})
+
+message(STATUS "variable CMAKE_BUILD_TYPE=" ${CMAKE_BUILD_TYPE})
+
+# Set the binary directory
+set(JOYNR_BINARY_DIR ${CMAKE_BINARY_DIR}/bin)
+message(STATUS "variable JOYNR_BINARY_DIR=" ${JOYNR_BINARY_DIR})
+
+if(${ENABLE_GCOV})
+    list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMake/code-coverage")
+    include(CodeCoverage)
+    setup_target_for_coverage("UnitCoverageHtml" g_UnitTests "coverage")
+    setup_target_for_coverage_cobertura("UnitCoverageTarget" g_UnitTests "coverage" "--gtest_output=xml:g_UnitTests.junit.xml" "'.*/libs/.*|.*/build/.*|.*/tests/.*|.*/generated/.*'")
+    # copy the resource folder to the build folder, because some files are required for the tests
+    add_custom_target(CopyResourceFolderToBuildDir
+        cp -r bin/resources .
+
+        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
+        COMMENT "Copy resources to build directory."
+    )
+    add_dependencies(UnitCoverageTarget CopyResourceFolderToBuildDir)
+    #setup_target_for_coverage_cobertura("IntegrationCoverageTarget" g_IntegrationTests "integrationCoverage.xml")
+    message(STATUS "setting flags to measure test coverage.")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage")
+    #set(LDFLAGS "{$LDFLAGS} -fprofile-arcs -ftest-coverage")
+endif(${ENABLE_GCOV})
+
+# Doxygen documentation build
+if(ENABLE_DOXYGEN)
+    find_package(Doxygen REQUIRED)
+    message(STATUS "doxygen DOXYGEN_FOUND=${DOXYGEN_FOUND}")
+    add_custom_target(doxygen
+        COMMAND /bin/bash ${CMAKE_SOURCE_DIR}/run_doxygen.sh ${DOXYGEN_EXECUTABLE} ${CMAKE_SOURCE_DIR}
+        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
+        COMMENT "Creating doxygen documentation"
+        VERBATIM
+    )
+endif(ENABLE_DOXYGEN)
+
+message(STATUS "############ Import: Qt5 ############")
+
+# Find includes in corresponding build directories (Qt MOCs are created in current build dir)
+set(CMAKE_INCLUDE_CURRENT_DIR ON)
+
+find_package(Qt5Core)
+find_package(Qt5WebSockets)
+find_package(Qt5Sql)
+
+# Qt-Websockets and Qt-Core is only needed for the Cluster-Controller
+
+IF(${Qt5Core_FOUND} AND ${Qt5WebSockets_FOUND})
+
+    message(STATUS "variable Qt5Core_VERSION_STRING=${Qt5Core_VERSION_STRING}")
+    message(STATUS "variable Qt5Core_INCLUDE_DIRS=${Qt5Core_INCLUDE_DIRS}")
+    get_target_property(Qt5Core_LOCATION Qt5::Core LOCATION)
+    message(STATUS "variable Qt5::Core LOCATION=${Qt5Core_LOCATION}")
+    message(STATUS "variable Qt5Core_LIBRARIES=${Qt5Core_LIBRARIES}")
+    message(STATUS "variable Qt5Core_DEFINITIONS=${Qt5Core_DEFINITIONS}")
+
+    message(STATUS "variable Qt5WebSockets_VERSION_STRING=${Qt5WebSockets_VERSION_STRING}")
+    message(STATUS "variable Qt5WebSockets_INCLUDE_DIRS=${Qt5WebSockets_INCLUDE_DIRS}")
+    get_target_property(Qt5WebSockets_LOCATION Qt5::WebSockets LOCATION)
+    message(STATUS "variable Qt5::WebSockets LOCATION=${Qt5WebSockets_LOCATION}")
+    message(STATUS "variable Qt5WebSockets_LIBRARIES=${Qt5WebSockets_LIBRARIES}")
+    message(STATUS "variable Qt5WebSockets_DEFINITIONS=${Qt5WebSockets_DEFINITIONS}")
+
+    message(STATUS "variable Qt5Sql_VERSION_STRING=${Qt5Sql_VERSION_STRING}")
+    message(STATUS "variable Qt5Sql_INCLUDE_DIRS=${Qt5Sql_INCLUDE_DIRS}")
+    get_target_property(Qt5Sql_LOCATION Qt5::Sql LOCATION)
+    message(STATUS "variable Qt5Sql LOCATION=${Qt5Sql_LOCATION}")
+    message(STATUS "variable Qt5Sql_LIBRARIES=${Qt5Sql_LIBRARIES}")
+    message(STATUS "variable Qt5Sql_DEFINITIONS=${Qt5Sql_DEFINITIONS}")
+    
+ELSE(${Qt5Core_FOUND} AND ${Qt5WebSockets_FOUND})
+
+    SET(BUILD_CLUSTER_CONTROLLER OFF)
+
+ENDIF(${Qt5Core_FOUND} AND ${Qt5WebSockets_FOUND})
+
+message(STATUS "option BUILD_CLUSTER_CONTROLLER=" ${BUILD_CLUSTER_CONTROLLER})
+
+find_package(Qt5Test REQUIRED)
+message(STATUS "variable Qt5Test_VERSION_STRING=${Qt5Test_VERSION_STRING}")
+message(STATUS "variable Qt5Test_INCLUDE_DIRS=${Qt5Test_INCLUDE_DIRS}")
+get_target_property(Qt5Test_LOCATION Qt5::Test LOCATION)
+message(STATUS "variable Qt5::Test LOCATION=${Qt5Test_LOCATION}")
+message(STATUS "variable Qt5Test_LIBRARIES=${Qt5Test_LIBRARIES}")
+message(STATUS "variable Qt5Test_DEFINITIONS=${Qt5Test_DEFINITIONS}")
+
+######## Add Boost ########
+
+find_package(Boost 1.56.0 REQUIRED
+    COMPONENTS
+    system
+    thread
+)
+
+include_directories(${Boost_INCLUDE_DIRS})
+
+message(STATUS "############ Import: cURL ############")
+if(${WIN32})
+    if(NOT CURL_HOME)
+        if(DEFINED ENV{CURL_HOME})
+            message(STATUS "setting CURL_HOME from environment variable")
+            message(STATUS "environment variable CURL_HOME=" $ENV{CURL_HOME})
+            set(CURL_HOME $ENV{CURL_HOME})
+        else()
+            message(FATAL_ERROR "CURL_HOME variable not set")
+        endif()
+    endif(NOT CURL_HOME)
+    message(STATUS "variable CURL_HOME=" ${CURL_HOME})
+
+    find_path(CURL_INCLUDE_DIRS
+        NAMES curl/curl.h
+        PATHS ${CURL_HOME}
+        PATH_SUFFIXES include
+        NO_DEFAULT_PATH
+    )
+
+    set(curl_version_header ${CURL_INCLUDE_DIRS}/curl/curlver.h)
+    if(EXISTS ${curl_version_header})
+        file(STRINGS ${curl_version_header} curl_version_define REGEX "^#define[\t ]+LIBCURL_VERSION[\t ]+\".*\"")
+        string(REGEX REPLACE "^#define[\t ]+LIBCURL_VERSION[\t ]+\"([^\"]*)\".*" "\\1" CURL_VERSION_STRING "${curl_version_define}")
+        unset(curl_version_define)
+    endif()
+    unset(curl_version_header)
+
+    if(CMAKE_GENERATOR MATCHES "Visual Studio")
+        message(AUTHOR_WARNING "When using the Visual Studio makefile generator, no prefixes are used to find libraries. Therefore, we add additional prefixes here to CMAKE_FIND_LIBRARY_PREFIXES.")
+        message(AUTHOR_WARNING "When using the Visual Studio makefile generator, only .lib suffixes are used to find libraries. Therefore, we add additional suffixes here to CMAKE_FIND_LIBRARY_SUFFIXES.")
+        # saving the old state of CMAKE_FIND_LIBRARY_*
+        set(CMAKE_FIND_LIBRARY_PREFIXES_org ${CMAKE_FIND_LIBRARY_PREFIXES})
+        set(CMAKE_FIND_LIBRARY_SUFFIXES_org ${CMAKE_FIND_LIBRARY_SUFFIXES})
+        message(STATUS "variable CMAKE_FIND_LIBRARY_PREFIXES_org=" ${CMAKE_FIND_LIBRARY_PREFIXES_org})
+        message(STATUS "variable CMAKE_FIND_LIBRARY_SUFFIXES_org=" ${CMAKE_FIND_LIBRARY_SUFFIXES_org})
+        # adding additional prefixes and suffixes
+        set(CMAKE_FIND_LIBRARY_PREFIXES ${CMAKE_FIND_LIBRARY_PREFIXES} "lib")
+        set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES} ".dll" ".dll.a" ".a")
+    endif(CMAKE_GENERATOR MATCHES "Visual Studio")
+
+    message(STATUS "variable CMAKE_FIND_LIBRARY_PREFIXES=" ${CMAKE_FIND_LIBRARY_PREFIXES})
+    message(STATUS "variable CMAKE_FIND_LIBRARY_SUFFIXES=" ${CMAKE_FIND_LIBRARY_SUFFIXES})
+
+    find_library(CURL_LIBRARIES
+        NAMES curldll
+        PATHS ${CURL_HOME}
+        PATH_SUFFIXES lib
+        NO_DEFAULT_PATH
+    )
+
+    if(CMAKE_GENERATOR MATCHES "Visual Studio")
+        # restoring old state of CMAKE_FIND_LIBRARY_*
+        # NOTE: We need quotes around the variables here, because they could be empty.
+        #       This would cause the variable to be unset.
+        set(CMAKE_FIND_LIBRARY_PREFIXES "${CMAKE_FIND_LIBRARY_PREFIXES_org}")
+        set(CMAKE_FIND_LIBRARY_SUFFIXES "${CMAKE_FIND_LIBRARY_SUFFIXES_org}")
+        message(STATUS "variable restored CMAKE_FIND_LIBRARY_PREFIXES=" ${CMAKE_FIND_LIBRARY_PREFIXES})
+        message(STATUS "variable restored CMAKE_FIND_LIBRARY_SUFFIXES=" ${CMAKE_FIND_LIBRARY_SUFFIXES})
+    endif(CMAKE_GENERATOR MATCHES "Visual Studio")
+
+    if(CURL_INCLUDE_DIRS AND CURL_VERSION_STRING AND CURL_LIBRARIES)
+        set(CURL_FOUND TRUE)
+    else()
+        set(CURL_FOUND FALSE)
+    endif()
+else(${WIN32})
+    find_package(CURL REQUIRED)
+endif(${WIN32})
+
+message(STATUS "variable CURL_FOUND=" ${CURL_FOUND})
+message(STATUS "variable CURL_VERSION_STRING=" ${CURL_VERSION_STRING})
+message(STATUS "variable CURL_INCLUDE_DIRS=" ${CURL_INCLUDE_DIRS})
+message(STATUS "variable CURL_LIBRARIES=" ${CURL_LIBRARIES})
+
+if(NOT CURL_FOUND)
+    message(FATAL_ERROR "Could not find library: curl.")
+endif()
+
+include_directories(
+   SYSTEM ${CURL_INCLUDE_DIRS}
+)
+
+include(AddExternalProject)
+
+### Add libwebsockets ###########################################################
+if (USE_PLATFORM_LIBWEBSOCKETS)
+    find_package(PkgConfig REQUIRED)
+    pkg_check_modules(libwebsockets REQUIRED libwebsockets)
+else(USE_PLATFORM_LIBWEBSOCKETS)
+    AddExternalProject(
+        libwebsockets
+        GIT_REPOSITORY https://github.com/warmcat/libwebsockets
+        GIT_TAG v1.5-chrome47-firefox41
+        TIMEOUT 10
+       # Disable svn update
+        UPDATE_COMMAND ""
+        PATCH_COMMAND patch -f -d ${CMAKE_BINARY_DIR}/ThirdParty/src/libwebsockets -p1 < ${CMAKE_SOURCE_DIR}/CMake/libwebsockets-FixEmptyExtensions.patch
+       # Configure libwebsockets library features
+        CMAKE_ARGS  -DLWS_WITH_SSL=0
+                    -DLWS_WITHOUT_CLIENT=0
+                    -DLWS_WITHOUT_SERVER=0
+                    -DLWS_WITHOUT_EXTENSIONS=1
+                    -DLWS_WITHOUT_TESTAPPS=1
+                    -DLWS_WITHOUT_TEST_SERVER=1
+                    -DLWS_WITHOUT_TEST_SERVER_EXTPOLL=1
+                    -DLWS_WITHOUT_TEST_PING=1
+                    -DLWS_WITHOUT_TEST_CLIENT=1
+                    -DLWS_WITH_ZLIB=OFF
+                    -DLWS_WITHOUT_TEST_FRAGGLE=1
+                    -DCMAKE_INSTALL_PREFIX=${CMAKE_SOURCE_DIR}
+                    -DCMAKE_POSITION_INDEPENDENT_CODE=1
+        BUILD_BYPRODUCTS ${CMAKE_BINARY_DIR}/ThirdParty/src/libwebsockets-build/lib/libwebsockets.a
+    )
+
+    ExternalProject_Get_Property(libwebsockets SOURCE_DIR)
+    ExternalProject_Get_Property(libwebsockets BINARY_DIR)
+
+    set(libwebsockets_LIBRARIES ${BINARY_DIR}/lib/libwebsockets.a )
+    set(libwebsockets_INCLUDE_DIRS
+        ${SOURCE_DIR}/lib
+        ${BINARY_DIR}
+    )
+endif(USE_PLATFORM_LIBWEBSOCKETS)
+
+
+message(STATUS "variable libwebsockets_LIBRARIES=${libwebsockets_LIBRARIES}")
+message(STATUS "variable libwebsockets_INCLUDE_DIRS=${libwebsockets_INCLUDE_DIRS}")
+
+# ---------------------------------------------- Build library --------------------------------------------------
+
+include(GenerateExportHeader)
+
+set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${JOYNR_BINARY_DIR})
+set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${JOYNR_BINARY_DIR})
+set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${JOYNR_BINARY_DIR})
+
+######## Build and include settings ########
+link_directories(
+    ${LINK_DIRECTORIES}
+)
+
+######## SET LOG LEVEL #########
+# JOYNR_MAX_LOG_LEVEL_FATAL
+# JOYNR_MAX_LOG_LEVEL_ERROR
+# JOYNR_MAX_LOG_LEVEL_WARN
+# JOYNR_MAX_LOG_LEVEL_INFO
+# JOYNR_MAX_LOG_LEVEL_DEBUG
+# JOYNR_MAX_LOG_LEVEL_TRACE
+
+# for every other build type than debug we limit log messages to level ERROR
+string(TOLOWER "${CMAKE_BUILD_TYPE}" CMAKE_BUILD_TYPE_TOLOWER)
+if(CMAKE_BUILD_TYPE_TOLOWER MATCHES debug)
+    set(JOYNR_MAX_LOG_LEVEL "TRACE" CACHE STRING "joynr max log level")
+else()
+    set(JOYNR_MAX_LOG_LEVEL "ERROR" CACHE STRING "joynr max log level")
+endif()
+
+set_property(
+             CACHE
+             JOYNR_MAX_LOG_LEVEL
+             PROPERTY STRINGS
+             FATAL
+             ERROR
+             WARN
+             INFO
+             DEBUG
+             TRACE
+)
+
+add_definitions("-DJOYNR_MAX_LOG_LEVEL_${JOYNR_MAX_LOG_LEVEL}")
+
+######## DEFAULT COMPILER FLAGS #############
+
+#Other Warnings that could be turned on:
+#-Wpedantic
+#-Wpadded
+#-Wswitch-default //but QT moc_files produce lots of warnings here.
+
+message(STATUS "CMAKE_GENERATOR=" ${CMAKE_GENERATOR})
+message(STATUS "compiler CMAKE_C_COMPILER=" ${CMAKE_C_COMPILER})
+message(STATUS "compiler CMAKE_C_COMPILER_ID=" ${CMAKE_C_COMPILER_ID})
+message(STATUS "compiler CMAKE_C_COMPILER_VERSION=" ${CMAKE_C_COMPILER_VERSION})
+message(STATUS "compiler CMAKE_CXX_COMPILER=" ${CMAKE_CXX_COMPILER})
+message(STATUS "compiler CMAKE_CXX_COMPILER_ID=" ${CMAKE_CXX_COMPILER_ID})
+message(STATUS "compiler CMAKE_CXX_COMPILER_VERSION=" ${CMAKE_CXX_COMPILER_VERSION})
+# Compiler flags that depend on compiler type and OS
+if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
+        set (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${MSVCC_AUTO_INCLUDE} /MP")
+
+        # When compiling with DEBUG turn on runtime error checks (RTC1) and
+        # Buffer Overflow detection (GS)
+        set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${MSVCC_AUTO_INCLUDE} /RTC1 /GS /MP")
+endif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
+
+if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
+    # common-api/CMakeLists.txt overwrites CMAKE_CXX_FLAGS to deactivate warnings for CommonAPI
+    # generated code.
+    # All changes to CMAKE_CXX_FLAGS that are not warnings should be added there as well.
+    set(GNU_CXX_FLAGS "-pipe -g")
+    set(GNU_CXX_FLAGS "${GNU_CXX_FLAGS} -Wall -Wunused-value -Wunused -Wcast-qual -Wpointer-arith")
+    set(GNU_CXX_FLAGS "${GNU_CXX_FLAGS} -Wextra -Wcast-align -Wdisabled-optimization -Wformat-y2k")
+    set(GNU_CXX_FLAGS "${GNU_CXX_FLAGS} -Wno-format-extra-args -Wformat-nonliteral -Wformat=2 -Winit-self")
+    set(GNU_CXX_FLAGS "${GNU_CXX_FLAGS} -Winvalid-pch -Wunsafe-loop-optimizations -Wmissing-include-dirs")
+    set(GNU_CXX_FLAGS "${GNU_CXX_FLAGS} -Wmissing-braces -Wpacked -Wredundant-decls -Wstack-protector")
+    set(GNU_CXX_FLAGS "${GNU_CXX_FLAGS} -Wswitch-enum -Wuninitialized -Weffc++ -Wformat-security")
+    if(${WIN32})
+            # This setting does not work in linux:
+            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GNU_CXX_FLAGS} -enable-auto-import")
+    else()
+            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GNU_CXX_FLAGS} -pthread")
+    endif(${WIN32})
+    # check GNU CXX compiler version
+    if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER "4.9" OR CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL "4.9")
+        message(STATUS "C++11 activated.")
+        add_definitions(-D_GLIBCXX_USE_NANOSLEEP)
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")
+    else()
+        message(FATAL_ERROR "C++11 and a gcc compiler with a version higher than 4.9 is needed.")
+    endif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER "4.9" OR CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL "4.9")
+endif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
+
+if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --std=c++11 -Wno-unknown-pragmas")
+    if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
+        option(
+            USE_STDLIB_LIBCPP
+            "use libc++"
+            OFF
+        )
+        if(USE_STDLIB_LIBCPP)
+            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
+        endif()
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
+    else()
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
+    endif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
+        
+    add_definitions(-DGTEST_USE_OWN_TR1_TUPLE=1)
+endif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
+
+if(${USE_DBUS_COMMONAPI_COMMUNICATION})
+    message(STATUS "### DBUS CommonAPI configuration ###")
+
+    find_package(PkgConfig)
+    pkg_check_modules(DBUS1 REQUIRED dbus-1)
+    message(STATUS "variable DBUS_INCLUDE_DIRS=" ${DBUS1_INCLUDE_DIRS})
+    message(STATUS "variable DBUS1_LIBRARIES=" ${DBUS1_LIBRARIES})
+    message(STATUS "variable DBUS1_LIBRARY_DIRS=" ${DBUS1_LIBRARY_DIRS})
+    pkg_check_modules(COMMONAPI REQUIRED CommonAPI=2.1.4)
+    message(STATUS "variable COMMONAPI_INCLUDE_DIRS=" ${COMMONAPI_INCLUDE_DIRS})
+    message(STATUS "variable COMMONAPI_LIBRARIES=" ${COMMONAPI_LIBRARIES})
+    message(STATUS "variable COMMONAPI_VERSION=" ${COMMONAPI_VERSION})
+    pkg_check_modules(COMMONAPI_DBUS REQUIRED CommonAPI-DBus=2.1.4)
+    message(STATUS "variable COMMONAPI_DBUS_INCLUDE_DIRS=" ${COMMONAPI_DBUS_INCLUDE_DIRS})
+    message(STATUS "variable COMMONAPI_DBUS_LIBRARIES=" ${COMMONAPI_DBUS_LIBRARIES})
+    message(STATUS "variable COMMONAPI_DBUS_VERSION=" ${COMMONAPI_DBUS_VERSION})
+
+    include_directories(
+        SYSTEM
+        ${COMMONAPI_INCLUDE_DIRS}
+        ${DBUS1_INCLUDE_DIRS}
+        ${COMMONAPI_DBUS_INCLUDE_DIRS}
+    )
+
+    link_directories(${DBUS1_LIBRARY_DIRS} ${COMMONAPI_LIBRARY_DIRS} ${COMMONAPI_DBUS_LIBRARY_DIRS})
+endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
+
+
+### Add spdlog ###########################################################
+find_package(Threads) # sets CMAKE_THREAD_LIBS_INIT
+
+message(STATUS "############ Download: spdlog ############")
+set(SPDLOG_SOURCE_URL "https://github.com/gabime/spdlog")
+set(SPDLOG_SOURCE_TYPE "GIT_REPOSITORY")
+if(SPDLOG_ROOT)
+    set(SPDLOG_SOURCE_URL "${SPDLOG_ROOT}")
+    set(SPDLOG_SOURCE_TYPE "URL")
+endif(SPDLOG_ROOT)
+message(STATUS "Using source for spdlog: ${SPDLOG_SOURCE_URL}")
+
+
+AddExternalProject(
+    spdlog
+    ${SPDLOG_SOURCE_TYPE} "${SPDLOG_SOURCE_URL}"
+    TIMEOUT 10
+    # Disable configure step
+    CONFIGURE_COMMAND ""
+    # Disable build step
+    BUILD_COMMAND ""
+)
+
+ExternalProject_Get_Property(spdlog SOURCE_DIR)
+set(spdlog_SOURCE_DIR ${SOURCE_DIR})
+
+######## Add submodules ########
+if(${USE_DBUS_COMMONAPI_COMMUNICATION})
+    add_subdirectory(common-api)
+endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
+add_subdirectory(common)
+add_subdirectory(jsonserializer)
+add_subdirectory(libjoynr)
+if(${BUILD_CLUSTER_CONTROLLER})
+    add_subdirectory(cluster-controller)
+else()
+    # We still use the websocket default configuration file
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cluster-controller/resources/default-websocket.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/default-websocket.settings)
+    install(
+        FILES
+            ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/default-websocket.settings
+        DESTINATION ${INSTALL_BIN_DIR}/resources/
+    )
+endif(${BUILD_CLUSTER_CONTROLLER})
+add_subdirectory(runtimes)
+if(${BUILD_TESTS})
+    add_subdirectory(tests)
+endif(${BUILD_TESTS})
+
+######## Install targets ########
+
+set(
+    TARGET_LIBS
+    JoynrCommon
+    Joynr
+    JoynrWsRuntime
+    JoynrAsyncIPCRuntime
+    jsonserializer
+)
+
+if(${BUILD_CLUSTER_CONTROLLER})
+    LIST(
+        APPEND
+        TARGET_LIBS
+        JoynrClusterController
+        JoynrClusterControllerRuntime
+    )
+endif(${BUILD_CLUSTER_CONTROLLER})
+
+if(${USE_DBUS_COMMONAPI_COMMUNICATION})
+    list(
+        APPEND TARGET_LIBS
+        JoynrDbusRuntime
+        JoynrCommonAPI
+    )
+endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
+
+# export all targets from the build tree to use by outside projects
+export(
+    TARGETS
+    ${TARGET_LIBS}
+    FILE "${JOYNR_BINARY_DIR}/JoynrTargets.cmake"
+)
+
+# store the current build dir in the CMake user package registry
+# find_package may use it while searching for Joynr
+export(PACKAGE Joynr)
+
+# install the export targets for use with the install-tree
+install(
+    EXPORT JoynrTargets
+    DESTINATION "${INSTALL_CMAKE_DIR}" COMPONENT dev
+    FILE "JoynrTargets.cmake"
+)
+
+# Create the JoynrConfig.cmake and JoynrConfigVersion files
+set(
+    JoynrConfig_LIB_COMMON_LIBRARIES
+    JoynrCommon
+    Joynr
+    jsonserializer
+    ${CMAKE_THREAD_LIBS_INIT}
+)
+
+if(${BUILD_CLUSTER_CONTROLLER})
+    set(
+        JoynrConfig_LIB_INPROCESS_LIBRARIES
+        JoynrClusterController
+        JoynrClusterControllerRuntime
+    )
+endif(${BUILD_CLUSTER_CONTROLLER})
+
+set(
+    JoynrConfig_LIB_WS_LIBRARIES
+    JoynrWsRuntime
+)
+
+set(
+    JoynrConfig_LIB_ASYNCIPC_LIBRARIES
+    JoynrCommon
+    Joynr
+    jsonserializer
+    JoynrAsyncIPCRuntime
+)
+
+if(${USE_DBUS_COMMONAPI_COMMUNICATION})
+    set(
+        JoynrConfig_LIB_DBUS_LIBRARIES
+        JoynrDbusRuntime
+    )
+endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
+
+# ... for the build tree
+get_target_property(JoynrCommon_PUBLIC_INCLUDE_DIRECTORY JoynrCommon PUBLIC_INCLUDE_DIRECTORY)
+get_target_property(Joynr_PUBLIC_INCLUDE_DIRECTORY Joynr PUBLIC_INCLUDE_DIRECTORY)
+get_target_property(jsonserializer_PUBLIC_INCLUDE_DIRECTORY jsonserializer PUBLIC_INCLUDE_DIRECTORY)
+message(STATUS "variable jsonserializer_PUBLIC_INCLUDE_DIRECTORY=" ${jsonserializer_PUBLIC_INCLUDE_DIRECTORY})
+
+set(
+    JoynrConfig_LIB_COMMON_INCLUDE_DIRS
+    ${JoynrCommon_PUBLIC_INCLUDE_DIRECTORY}
+    ${Joynr_PUBLIC_INCLUDE_DIRECTORY}
+    ${spdlog_SOURCE_DIR}/include
+    ${jsonserializer_PUBLIC_INCLUDE_DIRECTORY}
+    ${jsmn_SOURCE_DIR}
+    ${runtime_PUBLIC_INCLUDE_DIRECTORY}
+)
+if(${BUILD_CLUSTER_CONTROLLER})
+    get_target_property(JoynrClusterController_PUBLIC_INCLUDE_DIRECTORY JoynrClusterController PUBLIC_INCLUDE_DIRECTORY)
+    get_target_property(JoynrClusterControllerRuntime_PUBLIC_INCLUDE_DIRECTORY JoynrClusterControllerRuntime PUBLIC_INCLUDE_DIRECTORY)
+    set(
+        JoynrConfig_LIB_INPROCESS_INCLUDE_DIRS
+        ${JoynrClusterController_PUBLIC_INCLUDE_DIRECTORY}
+        ${JoynrClusterControllerRuntime_PUBLIC_INCLUDE_DIRECTORY}
+    )
+endif(${BUILD_CLUSTER_CONTROLLER})
+set(
+    JoynrConfig_LIB_WS_INCLUDE_DIRS
+    ${JoynrCommon_PUBLIC_INCLUDE_DIRECTORY}
+    ${Joynr_PUBLIC_INCLUDE_DIRECTORY}
+    ${spdlog_SOURCE_DIR}/include
+    ${jsonserializer_PUBLIC_INCLUDE_DIRECTORY}
+    ${jsmn_SOURCE_DIR}
+)
+set(
+    JoynrConfig_LIB_ASYNCIPC_INCLUDE_DIRS
+    ${JoynrCommon_PUBLIC_INCLUDE_DIRECTORY}
+    ${Joynr_PUBLIC_INCLUDE_DIRECTORY}
+    ${spdlog_SOURCE_DIR}/include
+    ${jsonserializer_PUBLIC_INCLUDE_DIRECTORY}
+    ${jsmn_SOURCE_DIR}
+)
+if(${USE_DBUS_COMMONAPI_COMMUNICATION})
+    set(
+        JoynrConfig_LIB_DBUS_INCLUDE_DIRS
+        ${JoynrCommon_PUBLIC_INCLUDE_DIRECTORY}
+        ${Joynr_PUBLIC_INCLUDE_DIRECTORY}
+        ${spdlog_SOURCE_DIR}/include
+        ${jsonserializer_PUBLIC_INCLUDE_DIRECTORY}
+        ${jsmn_SOURCE_DIR}
+    )
+endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
+set(JoynrConfig_TARGETS_FILE "${JOYNR_BINARY_DIR}/JoynrTargets.cmake")
+set(JoynrConfig_INSTALL_BIN_DIR "${JOYNR_BINARY_DIR}")
+
+configure_file(
+    JoynrConfig.cmake.in
+    "JoynrConfig.cmake" @ONLY
+)
+# ... for the install tree
+file(
+    RELATIVE_PATH RELATIVE_INSTALL_INCLUDE_DIR
+    "${CMAKE_INSTALL_PREFIX}/${INSTALL_CMAKE_DIR}"
+    "${CMAKE_INSTALL_PREFIX}/${INSTALL_INCLUDE_DIR}"
+)
+set(JoynrConfig_LIB_INPROCESS_INCLUDE_DIRS "\${CMAKE_CURRENT_LIST_DIR}/${RELATIVE_INSTALL_INCLUDE_DIR}")
+set(JoynrConfig_TARGETS_FILE "\${CMAKE_CURRENT_LIST_DIR}/JoynrTargets.cmake")
+file(
+    RELATIVE_PATH RELATIVE_INSTALL_BIN_DIR
+    "${CMAKE_INSTALL_PREFIX}/${INSTALL_CMAKE_DIR}"
+    "${CMAKE_INSTALL_PREFIX}/${INSTALL_BIN_DIR}"
+)
+set(JoynrConfig_INSTALL_BIN_DIR "\${CMAKE_CURRENT_LIST_DIR}/${RELATIVE_INSTALL_BIN_DIR}")
+configure_file(
+    JoynrConfig.cmake.in
+    "JoynrConfig.cmake.install-tree" @ONLY
+)
+# ... for both
+configure_file(
+    JoynrConfigVersion.cmake.in
+    "JoynrConfigVersion.cmake" @ONLY
+)
+
+# install the JoynrConfig.cmake and JoynrConfigVersion.cmake
+install(
+    FILES "${CMAKE_CURRENT_BINARY_DIR}/JoynrConfig.cmake.install-tree"
+    DESTINATION "${INSTALL_CMAKE_DIR}" COMPONENT dev
+    RENAME "JoynrConfig.cmake"
+)
+install(
+    FILES "${CMAKE_CURRENT_BINARY_DIR}/JoynrConfigVersion.cmake"
+    DESTINATION "${INSTALL_CMAKE_DIR}" COMPONENT dev
+)
+
+
+######### Documentation settings ########
+#configure_file(${CMAKE_CURRENT_SOURCE_DIR}/doxygen.cfg.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)
diff --git a/cpp/JoynrConfig.cmake.in b/cpp/JoynrConfig.cmake.in
index c3993cb..bd12f64 100644
--- a/cpp/JoynrConfig.cmake.in
+++ b/cpp/JoynrConfig.cmake.in
@@ -1,127 +1,142 @@
-# - Config file for the Joynr package
-# It defines the following variables
-#   Joynr_EXECUTABLES                  - The Joynr executables.
-#   Joynr_RESOURCES_DIR                - Directory containing resource and settings files for Joynr
-#                                        executables.
-#   Joynr_LIB_COMMON_INCLUDE_DIRS      - Common include directories needed for generated code.
-#   Joynr_LIB_COMMON_LIBRARIES         - Common libraries needed for generated code.
-#
-#   Joynr_LIB_INPROCESS_INCLUDE_DIRS   - Include directories for libJoynr with in-process
-#                                        communication.
-#                                        This includes also header files needed to build the cluster
-#                                        controller.
-#   Joynr_LIB_INPROCESS_LIBRARIES      - Libraries needed for libJoynr with in-process
-#                                        communication.
-#                                        This includes also libraries needed to build the cluster
-#                                        controller.
-#
-#   Joynr_LIB_WS_INCLUDE_DIRS          - Include directories for standalone libJoynr with WebSocket
-#                                        communication.
-#                                        (without cluster controller)
-#   Joynr_LIB_WS_LIBRARIES             - Libraries needed for standalone libJoynr with WebSocket
-#                                        communication.
-#                                        (without cluster controller)
-#
-#   Joynr_LIB_DBUS_INCLUDE_DIRS        - Include directories for standalone libJoynr with DBus
-#                                        communication.
-#                                        (without cluster controller)
-#   Joynr_LIB_DBUS_LIBRARIES           - Libraries needed for standalone libJoynr with DBus
-#                                        communication.
-#                                        (without cluster controller)
-
-# This file is derived from a CMake tutorial (http://www.cmake.org/Wiki/CMake/)
-# that is available under Creative Commons Attribution 2.5 Generic (CC BY 2.5, http://creativecommons.org/licenses/by/2.5/). 
-# There are no attributions specified by the author.
-
-set(
-    USE_DBUS_COMMONAPI_COMMUNICATION
-    @USE_DBUS_COMMONAPI_COMMUNICATION@
-)
-
-# QT5
-find_package(Qt5Core REQUIRED)
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Qt5Core_EXECUTABLE_COMPILE_FLAGS}")
-find_package(Qt5WebSockets)
-find_package(Qt5Sql REQUIRED)
-
-# Boost
-find_package(Boost 1.56.0 REQUIRED
-    COMPONENTS
-    system
-    thread
-)
-
-# Our library dependencies (contains definitions for IMPORTED targets)
-include(@JoynrConfig_TARGETS_FILE@)
-
-# Compute paths
-get_filename_component(JOYNR_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
-
-# default configuration
-set(
-    Joynr_LIB_COMMON_INCLUDE_DIRS
-    "${Boost_INCLUDE_DIRS}"
-    @JoynrConfig_LIB_COMMON_INCLUDE_DIRS@
-)
-
-set(
-    Joynr_LIB_COMMON_LIBRARIES
-    "${Boost_LIBRARIES}"
-    @JoynrConfig_LIB_COMMON_LIBRARIES@
-)
-
-set(Joynr_EXECUTABLES)
-set(
-    Joynr_RESOURCES_DIR
-    @JoynrConfig_INSTALL_BIN_DIR@/resources
-)
-
-# in-process configuration
-set(
-    Joynr_LIB_INPROCESS_INCLUDE_DIRS
-    "${Qt5Core_INCLUDE_DIRS}"
-    "${Qt5Sql_INCLUDE_DIRS}"
-    "${Joynr_LIB_COMMON_INCLUDE_DIRS}"
-    @JoynrConfig_LIB_INPROCESS_INCLUDE_DIRS@
-)
-
-set(
-    Joynr_LIB_INPROCESS_LIBRARIES
-    "${Qt5Core_LIBRARIES}"
-    "${Qt5Sql_LIBRARIES}"
-    "${Joynr_LIB_COMMON_LIBRARIES}"
-    @JoynrConfig_LIB_INPROCESS_LIBRARIES@
-)
-
-# WebSockets configuration
-set(
-    Joynr_LIB_WS_INCLUDE_DIRS
-    "${Joynr_LIB_COMMON_INCLUDE_DIRS}"
-    @JoynrConfig_LIB_WS_INCLUDE_DIRS@
-)
-
-set(
-    Joynr_LIB_WS_LIBRARIES
-    "${Joynr_LIB_COMMON_LIBRARIES}"
-    @JoynrConfig_LIB_WS_LIBRARIES@
-)
-
-# Dbus configuration
-if(${USE_DBUS_COMMONAPI_COMMUNICATION})
-    set(
-        Joynr_LIB_DBUS_INCLUDE_DIRS
-        "${Joynr_LIB_COMMON_INCLUDE_DIRS}"
-        @JoynrConfig_LIB_DBUS_INCLUDE_DIRS@
-    )
-
-    set(
-        Joynr_LIB_DBUS_LIBRARIES
-        "${Joynr_LIB_COMMON_LIBRARIES}"
-        @JoynrConfig_LIB_DBUS_LIBRARIES@
-    )
-endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
-
-list(
-    APPEND Joynr_EXECUTABLES
-    @JoynrConfig_INSTALL_BIN_DIR@/cluster-controller
-)
+# - Config file for the Joynr package
+# It defines the following variables
+#   Joynr_EXECUTABLES                  - The Joynr executables.
+#   Joynr_RESOURCES_DIR                - Directory containing resource and settings files for Joynr
+#                                        executables.
+#   Joynr_LIB_COMMON_INCLUDE_DIRS      - Common include directories needed for generated code.
+#   Joynr_LIB_COMMON_LIBRARIES         - Common libraries needed for generated code.
+#
+#   Joynr_LIB_INPROCESS_INCLUDE_DIRS   - Include directories for libJoynr with in-process
+#                                        communication.
+#                                        This includes also header files needed to build the cluster
+#                                        controller.
+#   Joynr_LIB_INPROCESS_LIBRARIES      - Libraries needed for libJoynr with in-process
+#                                        communication.
+#                                        This includes also libraries needed to build the cluster
+#                                        controller.
+#
+#   Joynr_LIB_WS_INCLUDE_DIRS          - Include directories for standalone libJoynr with WebSocket
+#                                        communication.
+#                                        (without cluster controller)
+#   Joynr_LIB_WS_LIBRARIES             - Libraries needed for standalone libJoynr with WebSocket
+#                                        communication.
+#                                        (without cluster controller)
+#
+#   Joynr_LIB_DBUS_INCLUDE_DIRS        - Include directories for standalone libJoynr with DBus
+#                                        communication.
+#                                        (without cluster controller)
+#   Joynr_LIB_DBUS_LIBRARIES           - Libraries needed for standalone libJoynr with DBus
+#                                        communication.
+#                                        (without cluster controller)
+
+# This file is derived from a CMake tutorial (http://www.cmake.org/Wiki/CMake/)
+# that is available under Creative Commons Attribution 2.5 Generic (CC BY 2.5, http://creativecommons.org/licenses/by/2.5/). 
+# There are no attributions specified by the author.
+
+set(
+    USE_DBUS_COMMONAPI_COMMUNICATION
+    @USE_DBUS_COMMONAPI_COMMUNICATION@
+)
+
+# QT5
+find_package(Qt5Core REQUIRED)
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Qt5Core_EXECUTABLE_COMPILE_FLAGS}")
+find_package(Qt5WebSockets)
+find_package(Qt5Sql REQUIRED)
+
+# Boost
+find_package(Boost 1.56.0 REQUIRED
+    COMPONENTS
+    system
+    thread
+)
+
+# Our library dependencies (contains definitions for IMPORTED targets)
+include(@JoynrConfig_TARGETS_FILE@)
+
+# Compute paths
+get_filename_component(JOYNR_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
+
+# default configuration
+set(
+    Joynr_LIB_COMMON_INCLUDE_DIRS
+    "${Boost_INCLUDE_DIRS}"
+    @JoynrConfig_LIB_COMMON_INCLUDE_DIRS@
+)
+
+set(
+    Joynr_LIB_COMMON_LIBRARIES
+    "${Boost_LIBRARIES}"
+    @JoynrConfig_LIB_COMMON_LIBRARIES@
+)
+
+set(Joynr_EXECUTABLES)
+set(
+    Joynr_RESOURCES_DIR
+    @JoynrConfig_INSTALL_BIN_DIR@/resources
+)
+
+# in-process configuration
+set(
+    Joynr_LIB_INPROCESS_INCLUDE_DIRS
+    "${Qt5Core_INCLUDE_DIRS}"
+    "${Qt5Sql_INCLUDE_DIRS}"
+    "${Joynr_LIB_COMMON_INCLUDE_DIRS}"
+    @JoynrConfig_LIB_INPROCESS_INCLUDE_DIRS@
+)
+
+set(
+    Joynr_LIB_INPROCESS_LIBRARIES
+    "${Qt5Core_LIBRARIES}"
+    "${Qt5Sql_LIBRARIES}"
+    "${Joynr_LIB_COMMON_LIBRARIES}"
+    @JoynrConfig_LIB_INPROCESS_LIBRARIES@
+)
+
+# WebSockets configuration
+set(
+    Joynr_LIB_WS_INCLUDE_DIRS
+    "${Joynr_LIB_COMMON_INCLUDE_DIRS}"
+    @JoynrConfig_LIB_WS_INCLUDE_DIRS@
+)
+
+set(
+    Joynr_LIB_WS_LIBRARIES
+    "${Joynr_LIB_COMMON_LIBRARIES}"
+    @JoynrConfig_LIB_WS_LIBRARIES@
+)
+
+# AsyncIPC configuration
+set(
+    JOYNR_LIB_ASYNCIPC_INCLUDE_DIRS
+    "${Qt5Core_INCLUDE_DIRS}"
+    "${Qt5WebSockets_INCLUDE_DIRS}"
+    @JoynrConfig_LIB_ASYNCIPC_INCLUDE_DIRS@
+)
+
+set(
+    JOYNR_LIB_ASYNCIPC_LIBRARIES
+    @JoynrConfig_LIB_ASYNCIPC_LIBRARIES@
+    "${Qt5Core_LIBRARIES}"
+    "${Qt5WebSockets_LIBRARIES}"
+)
+
+# Dbus configuration
+if(${USE_DBUS_COMMONAPI_COMMUNICATION})
+    set(
+        Joynr_LIB_DBUS_INCLUDE_DIRS
+        "${Joynr_LIB_COMMON_INCLUDE_DIRS}"
+        @JoynrConfig_LIB_DBUS_INCLUDE_DIRS@
+    )
+
+    set(
+        Joynr_LIB_DBUS_LIBRARIES
+        "${Joynr_LIB_COMMON_LIBRARIES}"
+        @JoynrConfig_LIB_DBUS_LIBRARIES@
+    )
+endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
+
+list(
+    APPEND Joynr_EXECUTABLES
+    @JoynrConfig_INSTALL_BIN_DIR@/cluster-controller
+)
diff --git a/cpp/cluster-controller/.gitignore b/cpp/cluster-controller/.gitignore
new file mode 100644
index 0000000..728d8bc
--- /dev/null
+++ b/cpp/cluster-controller/.gitignore
@@ -0,0 +1,6 @@
+/CMakeFiles/
+/cmake_install.cmake
+/JoynrClusterController_automoc.cpp
+/Makefile
+/moc_LongPollingMessageReceiver.cpp
+/moc_PingLogger.cpp
diff --git a/cpp/cluster-controller/CMakeLists.txt b/cpp/cluster-controller/CMakeLists.txt
index fd5ad43..2249150 100644
--- a/cpp/cluster-controller/CMakeLists.txt
+++ b/cpp/cluster-controller/CMakeLists.txt
@@ -1,197 +1,201 @@
-message(STATUS "#############################################")
-message(STATUS "Configuring JoynrClusterController...")
-message(STATUS "#############################################\n")
-
-get_target_property(JoynrCommon_PUBLIC_INCLUDE_DIRECTORY JoynrCommon PUBLIC_INCLUDE_DIRECTORY)
-get_target_property(JoynrLib_PUBLIC_INCLUDE_DIRECTORY Joynr PUBLIC_INCLUDE_DIRECTORY)
-get_target_property(jsmn_PUBLIC_INCLUDE_DIRECTORY jsmn PUBLIC_INCLUDE_DIRECTORY)
-get_target_property(jsonserializer_PUBLIC_INCLUDE_DIRECTORY jsonserializer PUBLIC_INCLUDE_DIRECTORY)
-
-set(
-    JoynrClusterController_PUBLIC_INCLUDE_DIRECTORY
-    "${CMAKE_CURRENT_SOURCE_DIR}/include"
-)
-
-set(
-    JoynrClusterController_INCLUDE_DIRECTORIES
-    ${JoynrClusterController_PUBLIC_INCLUDE_DIRECTORY}
-    "../"
-    ${JoynrCommon_PUBLIC_INCLUDE_DIRECTORY}
-    ${JoynrLib_PUBLIC_INCLUDE_DIRECTORY}
-    ${jsonserializer_PUBLIC_INCLUDE_DIRECTORY}
-)
-
-set(
-    JoynrClusterController_SYS_INCLUDE_DIRECTORIES
-    ${jsmn_PUBLIC_INCLUDE_DIRECTORY}
-    ${Qt5Core_INCLUDE_DIRECTORY}
-)
-
-set(
-    JoynrClusterController_TARGET_LIBRARIES
-    Joynr
-    JoynrCommon
-    ${CURL_LIBRARIES}
-    ${Qt5Sql_LIBRARIES}
-)
-
-set(
-    JoynrClusterController_EXPORT_HEADER
-    "include/joynr/JoynrClusterControllerExport.h"
-)
-
-
-file(
-    GLOB JoynrClusterController_PUBLIC_HEADERS
-    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
-    "include/joynr/*.h"
-)
-
-file(
-    GLOB_RECURSE JoynrClusterController_PRIVATE_HEADERS
-    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
-    "access-control/*.h"
-    "capabilities-client/*.h"
-    "http-communication-manager/*.h"
-    "httpnetworking/*.h"
-    "ClusterControllerDirectories.h"
-    "ICommunicationManager.h"
-    "messaging/*.h"
-    "messaging/in-process/*.h"
-    "messaging/joynr-messaging/*.h"
-)
-
-set(
-    JoynrClusterController_HEADERS
-    ${JoynrClusterController_PUBLIC_HEADERS}
-    ${JoynrClusterController_PRIVATE_HEADERS}
-)
-
-
-file(
-    GLOB JoynrClusterController_SOURCES
-    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
-    "access-control/*.cpp"
-    "capabilities-client/*.cpp"
-    "http-communication-manager/*.cpp"
-    "httpnetworking/*.cpp"
-    "messaging/*.cpp"
-    "messaging/in-process/*.cpp"
-    "messaging/joynr-messaging/*.cpp"
-)
-
-if(${USE_DBUS_COMMONAPI_COMMUNICATION})
-    file(
-        GLOB_RECURSE JoynrClusterController_DBUS_PRIVATE_HEADERS
-        RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
-        "messaging/dbus/*.h"
-    )
-
-    set(
-        JoynrClusterController_HEADERS
-        ${JoynrClusterController_HEADERS}
-        ${JoynrClusterController_DBUS_PRIVATE_HEADERS}
-    )
-
-    file(
-        GLOB_RECURSE JoynrClusterController_DBUS_SOURCES
-        RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
-        "messaging/dbus/*.cpp"
-    )
-
-    set(
-        JoynrClusterController_SOURCES
-        ${JoynrClusterController_SOURCES}
-        ${JoynrClusterController_DBUS_SOURCES}
-    )
-
-    list(
-        APPEND JoynrClusterController_TARGET_LIBRARIES
-        ${DBUS1_LIBRARIES}
-        ${COMMONAPI_LIBRARIES}
-        ${COMMONAPI_DBUS_LIBRARIES}
-    )
-
-    get_target_property(common_api_PUBLIC_INCLUDE_DIRECTORY JoynrCommonAPI PUBLIC_INCLUDE_DIRECTORY)
-    list(
-        APPEND JoynrClusterController_INCLUDE_DIRECTORIES
-        ${common_api_PUBLIC_INCLUDE_DIRECTORY}
-    )
-endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
-
-include_directories(
-        ${JoynrClusterController_INCLUDE_DIRECTORIES}
-)
-
-include_directories(
-    SYSTEM
-    ${JoynrClusterController_SYS_INCLUDE_DIRECTORIES}
-)
-
-add_library(
-    JoynrClusterController
-    SHARED
-    ${JoynrClusterController_HEADERS}
-    ${JoynrClusterController_SOURCES}
-)
-
-AddClangFormat(JoynrClusterController)
-
-AddIncludeWhatYouUse(JoynrClusterController)
-
-AddClangTidy(JoynrClusterController)
-
-set_target_properties(
-    JoynrClusterController
-    PROPERTIES
-    SOVERSION "${JOYNR_VERSION}"
-    VERSION "${JOYNR_VERSION}"
-    PUBLIC_INCLUDE_DIRECTORY "${JoynrClusterController_PUBLIC_INCLUDE_DIRECTORY}"
-    AUTOMOC TRUE
-)
-
-generate_export_header(
-    JoynrClusterController
-    EXPORT_FILE_NAME "${CMAKE_CURRENT_SOURCE_DIR}/${JoynrClusterController_EXPORT_HEADER}"
-)
-
-target_link_libraries(JoynrClusterController ${JoynrClusterController_TARGET_LIBRARIES})
-
-install(
-    TARGETS JoynrClusterController
-    EXPORT JoynrTargets
-    RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
-    LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
-    # this will flatten directory hierarchy of headder files
-    # PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}" COMPONENT dev
-)
-# so we install header files manually to preserve directory hierarchy
-install(
-    DIRECTORY include/
-    DESTINATION "${INSTALL_INCLUDE_DIR}"
-    FILES_MATCHING PATTERN "*.h"
-)
-
-# Visual Studio compiles to Debug and Release directories
-if(${CMAKE_GENERATOR} MATCHES "Visual Studio")
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-messaging.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release/resources/default-messaging.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-messaging.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug/resources/default-messaging.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release/resources/default-dbus.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug/resources/default-dbus.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-websocket.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release/resources/default-websocket.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-websocket.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug/resources/default-websocket.settings)
-else()
-    # copy resources for build tree
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-messaging.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/default-messaging.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/default-dbus.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-websocket.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/default-websocket.settings)
-    # ...and for install tree
-    install(
-        FILES
-            ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/default-messaging.settings
-            ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/default-dbus.settings
-            ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/default-websocket.settings
-        DESTINATION ${INSTALL_BIN_DIR}/resources/
-    )
-endif(${CMAKE_GENERATOR} MATCHES "Visual Studio")
-
+message(STATUS "#############################################")
+message(STATUS "Configuring JoynrClusterController...")
+message(STATUS "#############################################\n")
+
+get_target_property(JoynrCommon_PUBLIC_INCLUDE_DIRECTORY JoynrCommon PUBLIC_INCLUDE_DIRECTORY)
+get_target_property(JoynrLib_PUBLIC_INCLUDE_DIRECTORY Joynr PUBLIC_INCLUDE_DIRECTORY)
+get_target_property(jsmn_PUBLIC_INCLUDE_DIRECTORY jsmn PUBLIC_INCLUDE_DIRECTORY)
+get_target_property(jsonserializer_PUBLIC_INCLUDE_DIRECTORY jsonserializer PUBLIC_INCLUDE_DIRECTORY)
+
+set(
+    JoynrClusterController_PUBLIC_INCLUDE_DIRECTORY
+    "${CMAKE_CURRENT_SOURCE_DIR}/include"
+)
+
+set(
+    JoynrClusterController_INCLUDE_DIRECTORIES
+    ${JoynrClusterController_PUBLIC_INCLUDE_DIRECTORY}
+    "../"
+    ${JoynrCommon_PUBLIC_INCLUDE_DIRECTORY}
+    ${JoynrLib_PUBLIC_INCLUDE_DIRECTORY}
+    ${jsonserializer_PUBLIC_INCLUDE_DIRECTORY}
+)
+
+set(
+    JoynrClusterController_SYS_INCLUDE_DIRECTORIES
+    ${jsmn_PUBLIC_INCLUDE_DIRECTORY}
+    ${Qt5Core_INCLUDE_DIRECTORY}
+)
+
+set(
+    JoynrClusterController_TARGET_LIBRARIES
+    Joynr
+    JoynrCommon
+    ${CURL_LIBRARIES}
+    ${Qt5Sql_LIBRARIES}
+)
+
+set(
+    JoynrClusterController_EXPORT_HEADER
+    "include/joynr/JoynrClusterControllerExport.h"
+)
+
+
+file(
+    GLOB JoynrClusterController_PUBLIC_HEADERS
+    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+    "include/joynr/*.h"
+)
+
+file(
+    GLOB_RECURSE JoynrClusterController_PRIVATE_HEADERS
+    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+    "access-control/*.h"
+    "capabilities-client/*.h"
+    "http-communication-manager/*.h"
+    "httpnetworking/*.h"
+    "ClusterControllerDirectories.h"
+    "ICommunicationManager.h"
+    "messaging/*.h"
+    "messaging/in-process/*.h"
+    "messaging/joynr-messaging/*.h"
+)
+
+set(
+    JoynrClusterController_HEADERS
+    ${JoynrClusterController_PUBLIC_HEADERS}
+    ${JoynrClusterController_PRIVATE_HEADERS}
+)
+
+
+file(
+    GLOB JoynrClusterController_SOURCES
+    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+    "access-control/*.cpp"
+    "capabilities-client/*.cpp"
+    "http-communication-manager/*.cpp"
+    "httpnetworking/*.cpp"
+    "messaging/*.cpp"
+    "messaging/in-process/*.cpp"
+    "messaging/joynr-messaging/*.cpp"
+)
+
+if(${USE_DBUS_COMMONAPI_COMMUNICATION})
+    file(
+        GLOB_RECURSE JoynrClusterController_DBUS_PRIVATE_HEADERS
+        RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+        "messaging/dbus/*.h"
+    )
+
+    set(
+        JoynrClusterController_HEADERS
+        ${JoynrClusterController_HEADERS}
+        ${JoynrClusterController_DBUS_PRIVATE_HEADERS}
+    )
+
+    file(
+        GLOB_RECURSE JoynrClusterController_DBUS_SOURCES
+        RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+        "messaging/dbus/*.cpp"
+    )
+
+    set(
+        JoynrClusterController_SOURCES
+        ${JoynrClusterController_SOURCES}
+        ${JoynrClusterController_DBUS_SOURCES}
+    )
+
+    list(
+        APPEND JoynrClusterController_TARGET_LIBRARIES
+        ${DBUS1_LIBRARIES}
+        ${COMMONAPI_LIBRARIES}
+        ${COMMONAPI_DBUS_LIBRARIES}
+    )
+
+    get_target_property(common_api_PUBLIC_INCLUDE_DIRECTORY JoynrCommonAPI PUBLIC_INCLUDE_DIRECTORY)
+    list(
+        APPEND JoynrClusterController_INCLUDE_DIRECTORIES
+        ${common_api_PUBLIC_INCLUDE_DIRECTORY}
+    )
+endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
+
+include_directories(
+        ${JoynrClusterController_INCLUDE_DIRECTORIES}
+)
+
+include_directories(
+    SYSTEM
+    ${JoynrClusterController_SYS_INCLUDE_DIRECTORIES}
+)
+
+add_library(
+    JoynrClusterController
+    SHARED
+    ${JoynrClusterController_HEADERS}
+    ${JoynrClusterController_SOURCES}
+)
+
+AddClangFormat(JoynrClusterController)
+
+AddIncludeWhatYouUse(JoynrClusterController)
+
+AddClangTidy(JoynrClusterController)
+
+set_target_properties(
+    JoynrClusterController
+    PROPERTIES
+    SOVERSION "${JOYNR_VERSION}"
+    VERSION "${JOYNR_VERSION}"
+    PUBLIC_INCLUDE_DIRECTORY "${JoynrClusterController_PUBLIC_INCLUDE_DIRECTORY}"
+    AUTOMOC TRUE
+)
+
+generate_export_header(
+    JoynrClusterController
+    EXPORT_FILE_NAME "${CMAKE_CURRENT_SOURCE_DIR}/${JoynrClusterController_EXPORT_HEADER}"
+)
+
+target_link_libraries(JoynrClusterController ${JoynrClusterController_TARGET_LIBRARIES})
+
+install(
+    TARGETS JoynrClusterController
+    EXPORT JoynrTargets
+    RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
+    LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
+    # this will flatten directory hierarchy of headder files
+    # PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}" COMPONENT dev
+)
+# so we install header files manually to preserve directory hierarchy
+install(
+    DIRECTORY include/
+    DESTINATION "${INSTALL_INCLUDE_DIR}"
+    FILES_MATCHING PATTERN "*.h"
+)
+
+# Visual Studio compiles to Debug and Release directories
+if(${CMAKE_GENERATOR} MATCHES "Visual Studio")
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-messaging.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release/resources/default-messaging.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-messaging.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug/resources/default-messaging.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release/resources/default-dbus.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug/resources/default-dbus.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-websocket.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release/resources/default-websocket.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-websocket.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug/resources/default-websocket.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-asyncipc.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release/resources/default-asyncipc.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-asyncipc.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug/resources/default-asyncipc.settings)
+else()
+    # copy resources for build tree
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-messaging.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/default-messaging.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/default-dbus.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-websocket.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/default-websocket.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/default-asyncipc.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/default-asyncipc.settings)
+    # ...and for install tree
+    install(
+        FILES
+            ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/default-messaging.settings
+            ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/default-dbus.settings
+            ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/default-websocket.settings
+            ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/default-asyncipc.settings
+        DESTINATION ${INSTALL_BIN_DIR}/resources/
+    )
+endif(${CMAKE_GENERATOR} MATCHES "Visual Studio")
+
diff --git a/cpp/cluster-controller/resources/default-asyncipc.settings b/cpp/cluster-controller/resources/default-asyncipc.settings
new file mode 100644
index 0000000..1714c9f
--- /dev/null
+++ b/cpp/cluster-controller/resources/default-asyncipc.settings
@@ -0,0 +1,4 @@
+[asyncipc]
+cluster-controller-messaging-domain=local
+cluster-controller-messaging-servicename=io.joynr.clustercontroller.Messaging
+cluster-controller-messaging-participantid=cc.messaging.participantid
diff --git a/cpp/common/.gitignore b/cpp/common/.gitignore
new file mode 100644
index 0000000..f0fc1af
--- /dev/null
+++ b/cpp/common/.gitignore
@@ -0,0 +1,13 @@
+/CMakeFiles/
+/cmake_install.cmake
+/JoynrCommon_automoc.cpp
+/Makefile
+/moc_DelayedScheduler.cpp
+/moc_JoynrMessage.cpp
+/moc_QtOnChangeSubscriptionQos.cpp
+/moc_QtOnChangeWithKeepAliveSubscriptionQos.cpp
+/moc_QtPeriodicSubscriptionQos.cpp
+/moc_QtSubscriptionQos.cpp
+/moc_Reply.cpp
+/moc_Request.cpp
+/moc_SystemServicesSettings.cpp
diff --git a/cpp/libjoynr/.gitignore b/cpp/libjoynr/.gitignore
new file mode 100644
index 0000000..e956554
--- /dev/null
+++ b/cpp/libjoynr/.gitignore
@@ -0,0 +1,55 @@
+/CMakeFiles/
+/cmake_install.cmake
+/Joynr_automoc.cpp
+/Makefile
+/moc_BounceProxyUrl.cpp
+/moc_BroadcastSubscriptionRequest.cpp
+/moc_BroadcastSubscriptionRequestInformation.cpp
+/moc_CapabilityEntry.cpp
+/moc_DacTypes_QtChangeType.cpp
+/moc_DacTypes_QtControlEntry.cpp
+/moc_DacTypes_QtDomainRoleEntry.cpp
+/moc_DacTypes_QtMasterAccessControlEntry.cpp
+/moc_DacTypes_QtMasterControlEntry.cpp
+/moc_DacTypes_QtMasterRegistrationControlEntry.cpp
+/moc_DacTypes_QtOwnerAccessControlEntry.cpp
+/moc_DacTypes_QtOwnerControlEntry.cpp
+/moc_DacTypes_QtOwnerRegistrationControlEntry.cpp
+/moc_DacTypes_QtPermission.cpp
+/moc_DacTypes_QtRole.cpp
+/moc_DacTypes_QtTrustLevel.cpp
+/moc_InProcessAddress.cpp
+/moc_InProcessMessagingAddress.cpp
+/moc_LibjoynrSettings.cpp
+/moc_MessagingSettings.cpp
+/moc_QtBroadcastFilterParameters.cpp
+/moc_QtCapabilityInformation.cpp
+/moc_QtChannelUrlInformation.cpp
+/moc_QtCommunicationMiddleware.cpp
+/moc_QtCustomParameter.cpp
+/moc_QtDiscoveryEntry.cpp
+/moc_QtDiscoveryQos.cpp
+/moc_QtDiscoveryScope.cpp
+/moc_QtJoynrLogEvent.cpp
+/moc_QtJoynrLoggedError.cpp
+/moc_QtJoynrLoggingContextTag.cpp
+/moc_QtJoynrLogLevel.cpp
+/moc_QtProviderQos.cpp
+/moc_QtProviderScope.cpp
+/moc_RoutingTypes_QtAddress.cpp
+/moc_RoutingTypes_QtBrowserAddress.cpp
+/moc_RoutingTypes_QtChannelAddress.cpp
+/moc_RoutingTypes_QtCommonApiDbusAddress.cpp
+/moc_RoutingTypes_QtWebSocketAddress.cpp
+/moc_RoutingTypes_QtWebSocketClientAddress.cpp
+/moc_RoutingTypes_QtWebSocketProtocol.cpp
+/moc_SubscriptionPublication.cpp
+/moc_SubscriptionReply.cpp
+/moc_SubscriptionRequest.cpp
+/moc_SubscriptionRequestInformation.cpp
+/moc_SubscriptionStop.cpp
+/moc_WebSocketCcMessagingSkeleton.cpp
+/moc_WebSocketLibJoynrMessagingSkeleton.cpp
+/moc_WebSocketMessagingStub.cpp
+/moc_WebSocketMessagingStubFactory.cpp
+/moc_WebSocketSettings.cpp
diff --git a/cpp/libjoynr/CMakeLists.txt b/cpp/libjoynr/CMakeLists.txt
index 49d2bb8..4873eec 100644
--- a/cpp/libjoynr/CMakeLists.txt
+++ b/cpp/libjoynr/CMakeLists.txt
@@ -1,177 +1,180 @@
-message(STATUS "#############################################")
-message(STATUS "Configuring JoynrLib...")
-message(STATUS "#############################################\n")
-
-get_target_property(jsonserializer_PUBLIC_INCLUDE_DIRECTORY jsonserializer PUBLIC_INCLUDE_DIRECTORY)
-get_target_property(jsmn_PUBLIC_INCLUDE_DIRECTORY jsmn PUBLIC_INCLUDE_DIRECTORY)
-get_target_property(JoynrCommon_PUBLIC_INCLUDE_DIRECTORY JoynrCommon PUBLIC_INCLUDE_DIRECTORY)
-
-set(
-    JoynrLib_PUBLIC_INCLUDE_DIRECTORY
-    "${CMAKE_CURRENT_SOURCE_DIR}/include"
-)
-
-
-set(
-    JoynrLib_INCLUDE_DIRECTORIES
-    ${JoynrLib_PUBLIC_INCLUDE_DIRECTORY}
-    "../"
-    ${JoynrCommon_PUBLIC_INCLUDE_DIRECTORY}
-)
-
-set(
-    JoynrLib_SYS_INCLUDE_DIRS
-    ${jsmn_PUBLIC_INCLUDE_DIRECTORY}
-    ${jsonserializer_PUBLIC_INCLUDE_DIRECTORY}
-    ${libwebsockets_INCLUDE_DIRS}
-)
-
-set(
-    JoynrLib_TARGET_LIBRARIES
-    ${libwebsockets_LIBRARIES}
-    JoynrCommon
-    jsonserializer
-)
-
-set(
-    JoynrLib_EXPORT_HEADER
-    "include/joynr/JoynrExport.h"
-)
-
-file(
-    GLOB_RECURSE JoynrLib_PUBLIC_HEADERS
-	RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
-    "include/joynr/*.h"
-)
-
-file(
-    GLOB_RECURSE JoynrLib_PRIVATE_HEADERS
-	RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
-    "capabilities/*.h"
-    "common/*.h"
-    "communication-model/*.h"
-    "dispatcher/*.h"
-    "in-process/*.h"
-    "joynr-messaging/*.h"
-    "json/*.h"
-    "some-ip/*.h"
-    "provider/*.h"
-    "proxy/*.h"
-    "subscription/*.h"
-    "websocket/*.h"
-    "CapabilitiesRegistrar.h"
-    "LibjoynrSettings.h"
-    "JsonExceptionSerializer.h"
-)
-
-set(
-    JoynrLib_HEADERS
-    ${JoynrLib_PRIVATE_HEADERS}
-    ${JoynrLib_PUBLIC_HEADERS}
-)
-
-file(
-    GLOB_RECURSE JoynrLib_SOURCES
-	RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
-    "capabilities/*.cpp"
-    "common/*.cpp"
-    "communication-model/*.cpp"
-    "dispatcher/*.cpp"
-    "in-process/*.cpp"
-    "joynr-messaging/*.cpp"
-    "json/*.cpp"
-    "some-ip/*.cpp"
-    "provider/*.cpp"
-    "proxy/*.cpp"
-    "subscription/*.cpp"
-    "websocket/*.cpp"
-    "CapabilitiesRegistrar.cpp"
-    "LibjoynrSettings.cpp"
-    "JsonExceptionSerializer.cpp"
-)
-
-if(${USE_DBUS_COMMONAPI_COMMUNICATION})
-    set(
-        JoynrLib_HEADERS
-        ${JoynrLib_HEADERS}
-        "dbus/DbusMessagingStubFactory.h"
-    )
-
-    set(
-        JoynrLib_SOURCES
-        ${JoynrLib_SOURCES}
-        "dbus/DBusMessageRouterAdapter.cpp"
-        "dbus/DbusMessagingStubFactory.cpp"
-    )
-
-    list(
-        APPEND JoynrLib_TARGET_LIBRARIES
-        ${DBUS1_LIBRARIES}
-        ${COMMONAPI_LIBRARIES}
-        ${COMMONAPI_DBUS_LIBRARIES}
-    )
-
-    get_target_property(common_api_PUBLIC_INCLUDE_DIRECTORY JoynrCommonAPI PUBLIC_INCLUDE_DIRECTORY)
-    list(
-        APPEND JoynrLib_INCLUDE_DIRECTORIES
-        ${common_api_PUBLIC_INCLUDE_DIRECTORY}
-    )
-endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
-
-include_directories(
-    ${JoynrLib_INCLUDE_DIRECTORIES}
-)
-
-include_directories(
-    SYSTEM
-    ${JoynrLib_SYS_INCLUDE_DIRS}
-)
-
-add_library(
-    Joynr
-    SHARED
-    ${JoynrLib_HEADERS}
-    ${JoynrLib_SOURCES}
-)
-
-add_dependencies(Joynr libwebsockets)
-
-AddClangFormat(Joynr)
-
-AddIncludeWhatYouUse(Joynr)
-
-AddClangTidy(Joynr)
-
-set_target_properties(
-    Joynr
-    PROPERTIES
-    SOVERSION "${JOYNR_VERSION}"
-    VERSION "${JOYNR_VERSION}"
-    PUBLIC_INCLUDE_DIRECTORY "${JoynrLib_PUBLIC_INCLUDE_DIRECTORY}"
-)
-
-generate_export_header(
-    Joynr
-    EXPORT_FILE_NAME "${CMAKE_CURRENT_SOURCE_DIR}/${JoynrLib_EXPORT_HEADER}"
-)
-
-target_link_libraries(Joynr
-    ${JoynrLib_TARGET_LIBRARIES}
-    ${Boost_LIBRARIES}
-)
-
-install(
-    TARGETS Joynr
-    EXPORT JoynrTargets
-    RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
-    LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
-    # this will flatten directory hierarchy of headder files
-    # PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}" COMPONENT dev
-)
-
-# so we install header files manually to preserve directory hierarchy
-install(
-    DIRECTORY include/
-    DESTINATION "${INSTALL_INCLUDE_DIR}"
-    FILES_MATCHING PATTERN "*.h"
-)
+message(STATUS "#############################################")
+message(STATUS "Configuring JoynrLib...")
+message(STATUS "#############################################\n")
+
+get_target_property(jsonserializer_PUBLIC_INCLUDE_DIRECTORY jsonserializer PUBLIC_INCLUDE_DIRECTORY)
+get_target_property(jsmn_PUBLIC_INCLUDE_DIRECTORY jsmn PUBLIC_INCLUDE_DIRECTORY)
+get_target_property(JoynrCommon_PUBLIC_INCLUDE_DIRECTORY JoynrCommon PUBLIC_INCLUDE_DIRECTORY)
+
+set(
+    JoynrLib_PUBLIC_INCLUDE_DIRECTORY
+    "${CMAKE_CURRENT_SOURCE_DIR}/include"
+)
+
+
+set(
+    JoynrLib_INCLUDE_DIRECTORIES
+    ${JoynrLib_PUBLIC_INCLUDE_DIRECTORY}
+    "../"
+    ${JoynrCommon_PUBLIC_INCLUDE_DIRECTORY}
+)
+
+set(
+    JoynrLib_SYS_INCLUDE_DIRS
+    ${jsmn_PUBLIC_INCLUDE_DIRECTORY}
+    ${jsonserializer_PUBLIC_INCLUDE_DIRECTORY}
+    ${libwebsockets_INCLUDE_DIRS}
+)
+
+set(
+    JoynrLib_TARGET_LIBRARIES
+    ${libwebsockets_LIBRARIES}
+    JoynrCommon
+    jsonserializer
+    asyncipc
+)
+
+set(
+    JoynrLib_EXPORT_HEADER
+    "include/joynr/JoynrExport.h"
+)
+
+file(
+    GLOB_RECURSE JoynrLib_PUBLIC_HEADERS
+	RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+    "include/joynr/*.h"
+)
+
+file(
+    GLOB_RECURSE JoynrLib_PRIVATE_HEADERS
+	RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+    "capabilities/*.h"
+    "common/*.h"
+    "communication-model/*.h"
+    "dispatcher/*.h"
+    "in-process/*.h"
+    "joynr-messaging/*.h"
+    "json/*.h"
+    "some-ip/*.h"
+    "provider/*.h"
+    "proxy/*.h"
+    "subscription/*.h"
+    "websocket/*.h"
+    "asyncipc/*.h"
+    "CapabilitiesRegistrar.h"
+    "LibjoynrSettings.h"
+    "JsonExceptionSerializer.h"
+)
+
+set(
+    JoynrLib_HEADERS
+    ${JoynrLib_PRIVATE_HEADERS}
+    ${JoynrLib_PUBLIC_HEADERS}
+)
+
+file(
+    GLOB_RECURSE JoynrLib_SOURCES
+	RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+    "capabilities/*.cpp"
+    "common/*.cpp"
+    "communication-model/*.cpp"
+    "dispatcher/*.cpp"
+    "in-process/*.cpp"
+    "joynr-messaging/*.cpp"
+    "json/*.cpp"
+    "some-ip/*.cpp"
+    "provider/*.cpp"
+    "proxy/*.cpp"
+    "subscription/*.cpp"
+    "websocket/*.cpp"
+    "asyncipc/*.cpp"
+    "CapabilitiesRegistrar.cpp"
+    "LibjoynrSettings.cpp"
+    "JsonExceptionSerializer.cpp"
+)
+
+if(${USE_DBUS_COMMONAPI_COMMUNICATION})
+    set(
+        JoynrLib_HEADERS
+        ${JoynrLib_HEADERS}
+        "dbus/DbusMessagingStubFactory.h"
+    )
+
+    set(
+        JoynrLib_SOURCES
+        ${JoynrLib_SOURCES}
+        "dbus/DBusMessageRouterAdapter.cpp"
+        "dbus/DbusMessagingStubFactory.cpp"
+    )
+
+    list(
+        APPEND JoynrLib_TARGET_LIBRARIES
+        ${DBUS1_LIBRARIES}
+        ${COMMONAPI_LIBRARIES}
+        ${COMMONAPI_DBUS_LIBRARIES}
+    )
+
+    get_target_property(common_api_PUBLIC_INCLUDE_DIRECTORY JoynrCommonAPI PUBLIC_INCLUDE_DIRECTORY)
+    list(
+        APPEND JoynrLib_INCLUDE_DIRECTORIES
+        ${common_api_PUBLIC_INCLUDE_DIRECTORY}
+    )
+endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
+
+include_directories(
+    ${JoynrLib_INCLUDE_DIRECTORIES}
+)
+
+include_directories(
+    SYSTEM
+    ${JoynrLib_SYS_INCLUDE_DIRS}
+)
+
+add_library(
+    Joynr
+    SHARED
+    ${JoynrLib_HEADERS}
+    ${JoynrLib_SOURCES}
+)
+
+add_dependencies(Joynr libwebsockets)
+
+AddClangFormat(Joynr)
+
+AddIncludeWhatYouUse(Joynr)
+
+AddClangTidy(Joynr)
+
+set_target_properties(
+    Joynr
+    PROPERTIES
+    SOVERSION "${JOYNR_VERSION}"
+    VERSION "${JOYNR_VERSION}"
+    PUBLIC_INCLUDE_DIRECTORY "${JoynrLib_PUBLIC_INCLUDE_DIRECTORY}"
+)
+
+generate_export_header(
+    Joynr
+    EXPORT_FILE_NAME "${CMAKE_CURRENT_SOURCE_DIR}/${JoynrLib_EXPORT_HEADER}"
+)
+
+target_link_libraries(Joynr
+    ${JoynrLib_TARGET_LIBRARIES}
+    ${Boost_LIBRARIES}
+)
+
+install(
+    TARGETS Joynr
+    EXPORT JoynrTargets
+    RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
+    LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
+    # this will flatten directory hierarchy of headder files
+    # PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}" COMPONENT dev
+)
+
+# so we install header files manually to preserve directory hierarchy
+install(
+    DIRECTORY include/
+    DESTINATION "${INSTALL_INCLUDE_DIR}"
+    FILES_MATCHING PATTERN "*.h"
+)
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCMessageReceiver.cpp b/cpp/libjoynr/asyncipc/AsyncIPCMessageReceiver.cpp
new file mode 100644
index 0000000..94157b5
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCMessageReceiver.cpp
@@ -0,0 +1,96 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+
+#include "AsyncIPCMessageReceiver.h"
+#include "AsyncIPCQueueSettings.h"
+#include "joynr/exceptions/JoynrException.h"
+#include <unistd.h>
+#include <errno.h>
+#include <string.h>
+
+namespace joynr
+{
+
+/*static*/ std::set<std::string> AsyncIPCMessageReceiver::instances;
+
+/*static*/ AsyncIPCMessageReceiver* AsyncIPCMessageReceiver::Register(
+        AsyncIPCMessagingSkeleton& skeleton,
+        const std::string& queueName)
+{
+    if (instances.find(queueName) == instances.end())
+        instances.insert(queueName);
+
+    return new AsyncIPCMessageReceiver(skeleton, queueName);
+}
+
+AsyncIPCMessageReceiver::AsyncIPCMessageReceiver(AsyncIPCMessagingSkeleton& skeleton,
+                                                 const std::string& queueName)
+        : AsyncMessage(),
+          eventPoll(),
+          threadPool(1, "ThredPoolQueueReceiver"),
+          receiveBuffer(),
+          queueReceiver(NULL),
+          message(new char[AsyncIPCQueueSettings::MaxMessageSize])
+{
+    bool success =
+            open(eventPoll, std::string("/" + queueName + ".mq").c_str(),
+                 AsyncIPC::AsyncMessage::Direction::IN, AsyncIPCQueueSettings::MaxMessageSize);
+    if (!success)
+        throw exceptions::JoynrRuntimeException(strerror(errno));
+
+    clear();
+
+    queueReceiver = new AsyncIPCQueueReceiver(
+            eventPoll, new AsyncIPCQueueTransmitter(skeleton, receiveBuffer));
+    threadPool.schedule(queueReceiver);
+
+    while (!queueReceiver->IsRunning())
+        usleep(10);
+}
+
+AsyncIPCMessageReceiver::~AsyncIPCMessageReceiver()
+{
+    threadPool.shutdown();
+
+    queueReceiver = NULL; // deleted internally by threadPool
+
+    delete[] message;
+    message = NULL;
+}
+
+/*static*/ void AsyncIPCMessageReceiver::Unlink()
+{
+    while (!instances.empty()) {
+        std::string queueName = *instances.begin();
+        mq_unlink(std::string("/" + queueName + ".mq").c_str());
+        instances.erase(instances.begin());
+    }
+}
+
+bool AsyncIPCMessageReceiver::handle_event_read()
+{
+    size_t message_size;
+
+    while (do_receive(message, AsyncIPCQueueSettings::MaxMessageSize, &message_size))
+        receiveBuffer.Push(message);
+
+    return true;
+}
+
+} // namespace joynr
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCMessageReceiver.h b/cpp/libjoynr/asyncipc/AsyncIPCMessageReceiver.h
new file mode 100644
index 0000000..9919c17
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCMessageReceiver.h
@@ -0,0 +1,58 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#ifndef ASYNCIPCMESSAGERECEIVER_H
+#define ASYNCIPCMESSAGERECEIVER_H
+
+#include "joynr/PrivateCopyAssign.h"
+#include "joynr/ThreadPoolDelayedScheduler.h"
+#include "AsyncIPC-AsyncMessage.h"
+#include "AsyncIPC-AsyncEventPoll.h"
+#include "libjoynr/asyncipc/AsyncIPCQueueBuffer.h"
+#include "libjoynr/asyncipc/AsyncIPCQueueReceiver.h"
+
+namespace joynr
+{
+
+// Klasse fĂĽr Ping-Messages + Eingangs- und Ausgangsqueue
+class AsyncIPCMessageReceiver : public AsyncIPC::AsyncMessage
+{
+public:
+    virtual ~AsyncIPCMessageReceiver();
+    static AsyncIPCMessageReceiver* Register(AsyncIPCMessagingSkeleton& skeleton,
+                                             const std::string& queueName);
+    static void Unlink();
+
+protected:
+    virtual bool handle_event_read(void);
+
+private:
+    DISALLOW_COPY_AND_ASSIGN(AsyncIPCMessageReceiver);
+
+    AsyncIPCMessageReceiver(AsyncIPCMessagingSkeleton& skeleton, const std::string& queueName);
+    AsyncIPC::AsyncEventPoll eventPoll;
+    ThreadPoolDelayedScheduler threadPool;
+    static std::set<std::string> instances;
+    AsyncIPCQueueBuffer receiveBuffer;
+    AsyncIPCQueueReceiver* queueReceiver;
+    char* message;
+};
+}
+
+// namespace joynr
+#endif // ASYNCIPCMESSAGERECEIVER_H
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCMessageRouterAdapter.cpp b/cpp/libjoynr/asyncipc/AsyncIPCMessageRouterAdapter.cpp
new file mode 100644
index 0000000..798c742
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCMessageRouterAdapter.cpp
@@ -0,0 +1,39 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#include "joynr/AsyncIPCMessageRouterAdapter.h"
+
+namespace joynr
+{
+
+AsyncIPCMessageRouterAdapter::AsyncIPCMessageRouterAdapter(MessageRouter& messageRouter,
+                                                           const std::string& queueName)
+        : messageRouter(messageRouter), skeleton(*this, queueName)
+{
+}
+
+AsyncIPCMessageRouterAdapter::~AsyncIPCMessageRouterAdapter()
+{
+}
+
+void AsyncIPCMessageRouterAdapter::transmit(JoynrMessage& message)
+{
+    messageRouter.route(message);
+}
+
+} // namespace joynr
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCMessageSender.cpp b/cpp/libjoynr/asyncipc/AsyncIPCMessageSender.cpp
new file mode 100644
index 0000000..0d46216
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCMessageSender.cpp
@@ -0,0 +1,62 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+
+#include "AsyncIPCMessageSender.h"
+#include "AsyncIPCQueueSettings.h"
+#include "joynr/exceptions/JoynrException.h"
+#include <unistd.h>
+#include <errno.h>
+#include <string.h>
+
+namespace joynr
+{
+
+/*static*/ std::set<std::string> AsyncIPCMessageSender::instances;
+
+/*static*/ AsyncIPCMessageSender* AsyncIPCMessageSender::Register(const std::string& queueName)
+{
+    if (instances.find(queueName) == instances.end())
+        instances.insert(queueName);
+
+    return new AsyncIPCMessageSender(queueName);
+}
+
+AsyncIPCMessageSender::AsyncIPCMessageSender(const std::string& queueName) : eventPoll()
+{
+    bool success =
+            open(eventPoll, std::string("/" + queueName + ".mq").c_str(),
+                 AsyncIPC::AsyncMessage::Direction::OUT, AsyncIPCQueueSettings::MaxMessageSize);
+    if (!success)
+        throw exceptions::JoynrRuntimeException(strerror(errno));
+}
+
+AsyncIPCMessageSender::~AsyncIPCMessageSender()
+{
+}
+
+/*static*/ void AsyncIPCMessageSender::Unlink()
+{
+    while (!instances.empty()) {
+        std::string queueName = *instances.begin();
+        mq_unlink(std::string("/" + queueName + ".mq").c_str());
+        instances.erase(instances.begin());
+    }
+}
+
+} // namespace joynr
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCMessageSender.h b/cpp/libjoynr/asyncipc/AsyncIPCMessageSender.h
new file mode 100644
index 0000000..7971c9a
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCMessageSender.h
@@ -0,0 +1,48 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#ifndef ASYNCIPCMESSAGESENDER_H
+#define ASYNCIPCMESSAGESENDER_H
+
+#include "joynr/PrivateCopyAssign.h"
+#include "AsyncIPC-AsyncMessage.h"
+#include "AsyncIPC-AsyncEventPoll.h"
+#include <string>
+#include <set>
+
+namespace joynr
+{
+
+class AsyncIPCMessageSender : public AsyncIPC::AsyncMessage
+{
+public:
+    static AsyncIPCMessageSender* Register(const std::string& queueName);
+    virtual ~AsyncIPCMessageSender();
+    static void Unlink();
+
+private:
+    DISALLOW_COPY_AND_ASSIGN(AsyncIPCMessageSender);
+
+    AsyncIPCMessageSender(const std::string& queueName);
+    AsyncIPC::AsyncEventPoll eventPoll;
+    static std::set<std::string> instances;
+};
+}
+
+// namespace joynr
+#endif // ASYNCIPCMESSAGESENDER_H
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCMessagingSkeleton.cpp b/cpp/libjoynr/asyncipc/AsyncIPCMessagingSkeleton.cpp
new file mode 100644
index 0000000..b8d7a54
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCMessagingSkeleton.cpp
@@ -0,0 +1,44 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+
+#include "AsyncIPCMessagingSkeleton.h"
+#include "AsyncIPCMessageReceiver.h"
+
+namespace joynr
+{
+
+AsyncIPCMessagingSkeleton::AsyncIPCMessagingSkeleton(IMessaging& iMessaging,
+                                                     const std::string& queueName)
+        : messageReceiver(AsyncIPCMessageReceiver::Register(*this, queueName)),
+          iMessaging(iMessaging)
+{
+}
+
+AsyncIPCMessagingSkeleton::~AsyncIPCMessagingSkeleton()
+{
+    delete messageReceiver;
+    messageReceiver = NULL;
+}
+
+void AsyncIPCMessagingSkeleton::transmit(JoynrMessage& message)
+{
+    iMessaging.transmit(message);
+}
+
+} // namespace joynr
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCMessagingSkeleton.h b/cpp/libjoynr/asyncipc/AsyncIPCMessagingSkeleton.h
new file mode 100644
index 0000000..40449f9
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCMessagingSkeleton.h
@@ -0,0 +1,47 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#ifndef ASYNCIPCMESSAGINGSKELETON_H
+#define ASYNCIPCMESSAGINGSKELETON_H
+
+#include "joynr/PrivateCopyAssign.h"
+#include "joynr/JoynrExport.h"
+#include "joynr/IMessaging.h"
+#include <string>
+
+namespace joynr
+{
+class AsyncIPCMessageReceiver;
+
+class JOYNR_EXPORT AsyncIPCMessagingSkeleton : public IMessaging
+{
+public:
+    AsyncIPCMessagingSkeleton(IMessaging& iMessaging, const std::string& queueName);
+    virtual ~AsyncIPCMessagingSkeleton();
+    virtual void transmit(JoynrMessage& message);
+
+private:
+    DISALLOW_COPY_AND_ASSIGN(AsyncIPCMessagingSkeleton);
+
+    AsyncIPCMessageReceiver* messageReceiver;
+    IMessaging& iMessaging;
+};
+}
+
+// namespace joynr
+#endif // ASYNCIPCMESSAGINGSKELETON_H
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCMessagingStubAdapter.cpp b/cpp/libjoynr/asyncipc/AsyncIPCMessagingStubAdapter.cpp
new file mode 100644
index 0000000..a3779ae
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCMessagingStubAdapter.cpp
@@ -0,0 +1,51 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#include "AsyncIPCMessagingStubAdapter.h"
+#include "joynr/JoynrMessage.h"
+#include "joynr/JsonSerializer.h"
+#include "AsyncIPCQueueSettings.h"
+#include "AsyncIPCMessageSender.h"
+
+namespace joynr
+{
+
+INIT_LOGGER(AsyncIPCMessagingStubAdapter);
+
+AsyncIPCMessagingStubAdapter::AsyncIPCMessagingStubAdapter(const std::string& queueName)
+        : asyncIPCMessager(NULL)
+{
+    asyncIPCMessager = AsyncIPCMessageSender::Register(queueName);
+}
+
+AsyncIPCMessagingStubAdapter::~AsyncIPCMessagingStubAdapter()
+{
+    delete asyncIPCMessager;
+    asyncIPCMessager = NULL;
+}
+
+void AsyncIPCMessagingStubAdapter::transmit(JoynrMessage& message)
+{
+    std::string str = joynr::JsonSerializer::serialize(message);
+
+    JOYNR_LOG_TRACE(logger, "OUTGOING\nmessage: {}", str);
+
+    asyncIPCMessager->send(str.c_str(), str.size());
+}
+
+} // namespace joynr
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCMessagingStubAdapter.h b/cpp/libjoynr/asyncipc/AsyncIPCMessagingStubAdapter.h
new file mode 100644
index 0000000..c05e816
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCMessagingStubAdapter.h
@@ -0,0 +1,55 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#ifndef ASYNCIPCMESSAGINSTUBADAPTER_H
+#define ASYNCIPCMESSAGINSTUBADAPTER_H
+
+#include "joynr/PrivateCopyAssign.h"
+#include "joynr/JoynrCommonExport.h"
+#include "joynr/Logger.h"
+#include "joynr/IMessaging.h"
+
+// save the GCC diagnostic state
+#pragma GCC diagnostic push
+// Disable compiler warnings in this CommonAPI generated includes.
+#pragma GCC diagnostic ignored "-Wunused-parameter"
+#pragma GCC diagnostic ignored "-Weffc++"
+// restore the old GCC diagnostic state
+#pragma GCC diagnostic pop
+
+namespace joynr
+{
+class AsyncIPCMessageSender;
+
+class JOYNRCOMMON_EXPORT AsyncIPCMessagingStubAdapter : public IMessaging
+{
+public:
+    AsyncIPCMessagingStubAdapter(const std::string& serviceAddress);
+    virtual ~AsyncIPCMessagingStubAdapter();
+    virtual void transmit(JoynrMessage& message);
+
+private:
+    DISALLOW_COPY_AND_ASSIGN(AsyncIPCMessagingStubAdapter);
+
+    AsyncIPCMessageSender* asyncIPCMessager;
+    ADD_LOGGER(AsyncIPCMessageSender);
+};
+}
+
+// namespace joynr
+#endif // DBUSMESSAGINSTUBADAPTER_H
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCMessagingStubFactory.cpp b/cpp/libjoynr/asyncipc/AsyncIPCMessagingStubFactory.cpp
new file mode 100644
index 0000000..eb43c35
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCMessagingStubFactory.cpp
@@ -0,0 +1,59 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2014 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#include "AsyncIPCMessagingStubFactory.h"
+#include "AsyncIPCMessagingStubAdapter.h"
+#include "joynr/system/RoutingTypes/AsyncIPCAddress.h"
+
+namespace joynr
+{
+
+AsyncIPCMessagingStubFactory::AsyncIPCMessagingStubFactory() : stubMap(), mutex()
+{
+}
+
+bool AsyncIPCMessagingStubFactory::canCreate(
+        const joynr::system::RoutingTypes::Address& destAddress)
+{
+    return dynamic_cast<const system::RoutingTypes::AsyncIPCAddress*>(&destAddress);
+}
+
+std::shared_ptr<IMessaging> AsyncIPCMessagingStubFactory::create(
+        const joynr::system::RoutingTypes::Address& destAddress)
+{
+    const system::RoutingTypes::AsyncIPCAddress* asyncIPCAddress =
+            dynamic_cast<const system::RoutingTypes::AsyncIPCAddress*>(&destAddress);
+    std::string address = asyncIPCAddress->getQueueId();
+
+    std::shared_ptr<IMessaging> stub = nullptr;
+    // lookup address
+    {
+        std::lock_guard<std::mutex> lock(mutex);
+        auto entry = stubMap.find(address);
+        if (entry == stubMap.end()) {
+            // create new stub
+            stub = std::shared_ptr<IMessaging>(new AsyncIPCMessagingStubAdapter(address));
+            stubMap.insert(std::make_pair(address, stub));
+        } else {
+            stub = entry->second;
+        }
+    }
+    return stub;
+}
+
+} // namespace joynre
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCMessagingStubFactory.h b/cpp/libjoynr/asyncipc/AsyncIPCMessagingStubFactory.h
new file mode 100644
index 0000000..80d4383
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCMessagingStubFactory.h
@@ -0,0 +1,44 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2014 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#ifndef ASYNCIPCMESSAGINGSTUBFACTORY_H
+#define ASYNCIPCMESSAGINGSTUBFACTORY_H
+
+#include "joynr/IMiddlewareMessagingStubFactory.h"
+#include "joynr/system/RoutingTypes/AsyncIPCAddress.h"
+#include "joynr/TypeUtil.h"
+#include <mutex>
+#include <map>
+
+namespace joynr
+{
+
+class AsyncIPCMessagingStubFactory : public IMiddlewareMessagingStubFactory
+{
+public:
+    AsyncIPCMessagingStubFactory();
+    std::shared_ptr<IMessaging> create(const joynr::system::RoutingTypes::Address& destAddress);
+    bool canCreate(const joynr::system::RoutingTypes::Address& destAddress);
+
+private:
+    std::map<std::string, std::shared_ptr<IMessaging>> stubMap;
+    std::mutex mutex;
+};
+
+} // namespace joynr
+#endif // ASYNCIPCMESSAGINGSTUBFACTORY_H
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCQueueBuffer.cpp b/cpp/libjoynr/asyncipc/AsyncIPCQueueBuffer.cpp
new file mode 100644
index 0000000..a59b020
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCQueueBuffer.cpp
@@ -0,0 +1,123 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+
+#include "AsyncIPCQueueBuffer.h"
+#include "AsyncIPCQueueSettings.h"
+#include <string.h>
+
+namespace joynr
+{
+
+AsyncIPCQueueBuffer::AsyncIPCQueueBuffer() : buffers(), lockObj(), current(NULL)
+{
+}
+
+AsyncIPCQueueBuffer::~AsyncIPCQueueBuffer()
+{
+}
+
+AsyncIPCQueueBuffer::BufferElement::BufferElement(AsyncIPCQueueBuffer& receiveBuffer)
+        : buffer(NULL), receiveBuffer(receiveBuffer), pushIndex(0), pullIndex(0)
+{
+    buffer = new char[AsyncIPCQueueSettings::QueueBufferSize *
+                      AsyncIPCQueueSettings::MaxMessageSize];
+}
+
+AsyncIPCQueueBuffer::BufferElement::~BufferElement()
+{
+    delete[] buffer;
+    buffer = NULL;
+}
+
+void AsyncIPCQueueBuffer::Push(const char* message)
+{
+    std::lock_guard<std::mutex> lock(lockObj);
+
+    if (current == NULL) {
+        current = new BufferElement(*this);
+        buffers.push(current);
+    }
+
+    if (!current->TryPush(message)) {
+        current = new BufferElement(*this);
+        current->TryPush(message);
+        buffers.push(current);
+    }
+}
+
+bool AsyncIPCQueueBuffer::BufferElement::TryPush(const char* message)
+{
+    if (pushIndex == AsyncIPCQueueSettings::QueueBufferSize)
+        return false;
+
+    char* ret = (char*)buffer;
+    ret = (char*)(long)ret + pushIndex * AsyncIPCQueueSettings::MaxMessageSize;
+
+    ++pushIndex;
+
+    strcpy(ret, message);
+
+    return true;
+}
+
+const char* AsyncIPCQueueBuffer::Pull()
+{
+    std::lock_guard<std::mutex> lock(lockObj);
+
+    if (!buffers.size())
+        return NULL;
+
+    BufferElement* buffer = buffers.front();
+    const char* message = buffer->TryPull();
+    if (message == NULL && buffer->pushIndex == AsyncIPCQueueSettings::QueueBufferSize) {
+        if (buffer == current)
+            current = NULL;
+
+        Free();
+        return NULL;
+    }
+
+    return message;
+}
+
+void AsyncIPCQueueBuffer::Free()
+{
+    if (!buffers.size())
+        return;
+
+    BufferElement* buffer = buffers.front();
+    if (buffer != NULL) {
+        buffers.pop();
+        delete buffer;
+    }
+}
+
+const char* AsyncIPCQueueBuffer::BufferElement::TryPull()
+{
+    if (pullIndex == 10 || pullIndex == pushIndex)
+        return NULL;
+
+    char* ret = (char*)buffer;
+    ret = (char*)(long)ret + pullIndex * AsyncIPCQueueSettings::MaxMessageSize;
+
+    ++pullIndex;
+
+    return ret;
+}
+} // namespace joynr
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCQueueBuffer.h b/cpp/libjoynr/asyncipc/AsyncIPCQueueBuffer.h
new file mode 100644
index 0000000..7797b7b
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCQueueBuffer.h
@@ -0,0 +1,66 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#ifndef ASYNCIPCQUEUEBUFFER_H
+#define ASYNCIPCQUEUEBUFFER_H
+
+#include "joynr/PrivateCopyAssign.h"
+#include <queue>
+#include <mutex>
+
+namespace joynr
+{
+
+class AsyncIPCQueueBuffer
+{
+    class BufferElement
+    {
+    public:
+        BufferElement(AsyncIPCQueueBuffer& buffer);
+        ~BufferElement();
+        bool TryPush(const char* message);
+        const char* TryPull();
+
+        char* buffer;
+        AsyncIPCQueueBuffer& receiveBuffer;
+        int pushIndex;
+        int pullIndex;
+
+        DISALLOW_COPY_AND_ASSIGN(BufferElement);
+    };
+
+public:
+    AsyncIPCQueueBuffer();
+    virtual ~AsyncIPCQueueBuffer();
+
+    void Push(const char* message);
+    const char* Pull();
+    void Free();
+    const int BufferSize = 10;
+
+private:
+    DISALLOW_COPY_AND_ASSIGN(AsyncIPCQueueBuffer);
+
+    std::queue<BufferElement*> buffers;
+    std::mutex lockObj;
+    BufferElement* current;
+};
+}
+
+// namespace joynr
+#endif // ASYNCIPCQUEUEBUFFER_H
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCQueueBuffer.h.autosave b/cpp/libjoynr/asyncipc/AsyncIPCQueueBuffer.h.autosave
new file mode 100644
index 0000000..46abad0
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCQueueBuffer.h.autosave
@@ -0,0 +1,65 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#ifndef ASYNCIPCQUEUEBUFFER_H
+#define ASYNCIPCQUEUEBUFFER_H
+
+#include "joynr/PrivateCopyAssign.h"
+#include <queue>
+#include "qmutex.h"
+
+namespace joynr
+{
+
+class AsyncIPCQueueBuffer
+{
+    class BufferElement
+    {
+    public:
+        BufferElement(AsyncIPCQueueBuffer* buffer);
+        ~BufferElement();
+        bool TryPush(const char* message);
+        const char* TryPull();
+
+        char* buffer;
+        AsyncIPCQueueBuffer* receiveBuffer;
+        int pushIndex;
+        int pullIndex;
+
+        DISALLOW_COPY_AND_ASSIGN(BufferElement);
+    };
+
+public:
+    AsyncIPCQueueBuffer();
+    virtual ~AsyncIPCQueueBuffer();
+
+    void Push(const char* message);
+    const char* Pull();
+    void Free();
+
+private:
+    DISALLOW_COPY_AND_ASSIGN(AsyncIPCQueueBuffer);
+
+    std::queue<BufferElement*> buffers;
+    QMutex lockObj;
+    BufferElement* current;
+};
+}
+
+// namespace joynr
+#endif // ASYNCIPCQUEUEBUFFER_H
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCQueueReceiver.cpp b/cpp/libjoynr/asyncipc/AsyncIPCQueueReceiver.cpp
new file mode 100644
index 0000000..1238a9d
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCQueueReceiver.cpp
@@ -0,0 +1,65 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+
+#include "AsyncIPCQueueReceiver.h"
+#include "unistd.h"
+
+namespace joynr
+{
+
+AsyncIPCQueueReceiver::AsyncIPCQueueReceiver(AsyncIPC::AsyncEventPoll& asyncEventPoll,
+                                             AsyncIPCQueueTransmitter* transmitter)
+        : Runnable(true),
+          asyncEventPoll(asyncEventPoll),
+          queueTransmitter(transmitter),
+          threadPool(1, "ThreadPoolQueueTransmitter"),
+          quit(false),
+          isRunning(false)
+{
+}
+
+bool AsyncIPCQueueReceiver::IsRunning() const
+{
+    return isRunning;
+}
+
+void AsyncIPCQueueReceiver::run()
+{
+    threadPool.schedule(queueTransmitter);
+    while (!queueTransmitter->IsRunning())
+        usleep(10);
+
+    isRunning = true;
+
+    while (!quit)
+        asyncEventPoll.poll_events(100, 10);
+
+    threadPool.shutdown();
+
+    queueTransmitter = NULL; // deleted internally by threadPool
+
+    isRunning = false;
+}
+
+void AsyncIPCQueueReceiver::shutdown()
+{
+    quit = true;
+}
+
+} // namespace joynr
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCQueueReceiver.h b/cpp/libjoynr/asyncipc/AsyncIPCQueueReceiver.h
new file mode 100644
index 0000000..0791d0b
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCQueueReceiver.h
@@ -0,0 +1,52 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#ifndef ASYNCIPCQUEUERECEIVER_H
+#define ASYNCIPCQUEUERECEIVER_H
+
+#include "joynr/PrivateCopyAssign.h"
+#include "joynr/Runnable.h"
+#include "joynr/ThreadPoolDelayedScheduler.h"
+#include "AsyncIPCQueueTransmitter.h"
+#include "AsyncIPC-AsyncEventPoll.h"
+
+namespace joynr
+{
+
+class AsyncIPCQueueReceiver : public joynr::Runnable
+{
+public:
+    AsyncIPCQueueReceiver(AsyncIPC::AsyncEventPoll& asyncEventPoll,
+                          AsyncIPCQueueTransmitter* transmitter);
+    void run();
+    void shutdown();
+    bool IsRunning() const;
+
+private:
+    DISALLOW_COPY_AND_ASSIGN(AsyncIPCQueueReceiver);
+
+    AsyncIPC::AsyncEventPoll& asyncEventPoll;
+    AsyncIPCQueueTransmitter* queueTransmitter;
+    ThreadPoolDelayedScheduler threadPool;
+    bool quit;
+    bool isRunning;
+};
+}
+
+// namespace joynr
+#endif // ASYNCIPCQUEUERECEIVER_H
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCQueueSettings.cpp b/cpp/libjoynr/asyncipc/AsyncIPCQueueSettings.cpp
new file mode 100644
index 0000000..051ed40
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCQueueSettings.cpp
@@ -0,0 +1,27 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+
+#include "AsyncIPCQueueSettings.h"
+
+namespace joynr
+{
+/*static*/ int AsyncIPCQueueSettings::QueueBufferSize = 10;
+/*static*/ int AsyncIPCQueueSettings::MaxMessageSize = 8192;
+
+} // namespace joynr
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCQueueSettings.h b/cpp/libjoynr/asyncipc/AsyncIPCQueueSettings.h
new file mode 100644
index 0000000..6887f87
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCQueueSettings.h
@@ -0,0 +1,33 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#ifndef ASYNCIPQUEUECSETTINGS_H
+#define ASYNCIPCQUEUESETTINGS_H
+
+namespace joynr
+{
+
+class AsyncIPCQueueSettings
+{
+public:
+    static int QueueBufferSize;
+    static int MaxMessageSize;
+};
+
+} // namespace joynr
+#endif // ASYNCIPCQUEUESETTINGS_H
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCQueueTransmitter.cpp b/cpp/libjoynr/asyncipc/AsyncIPCQueueTransmitter.cpp
new file mode 100644
index 0000000..7f4b23b
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCQueueTransmitter.cpp
@@ -0,0 +1,80 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+
+#include "AsyncIPCQueueTransmitter.h"
+#include "AsyncIPCQueueBuffer.h"
+#include "joynr/JoynrMessage.h"
+#include "joynr/JsonSerializer.h"
+#include "libjoynr/include/joynr/AsyncIPCMessageRouterAdapter.h"
+#include "unistd.h"
+
+namespace joynr
+{
+
+INIT_LOGGER(AsyncIPCQueueTransmitter);
+
+AsyncIPCQueueTransmitter::AsyncIPCQueueTransmitter(AsyncIPCMessagingSkeleton& skeleton,
+                                                   AsyncIPCQueueBuffer& receiveBuffer)
+        : Runnable(true),
+          skeleton(skeleton),
+          receiveBuffer(receiveBuffer),
+          quit(false),
+          isRunning(false)
+{
+}
+
+bool AsyncIPCQueueTransmitter::IsRunning() const
+{
+    return isRunning;
+}
+
+void AsyncIPCQueueTransmitter::run()
+{
+    isRunning = true;
+
+    while (1) {
+        usleep(10);
+
+        const char* message = receiveBuffer.Pull();
+
+        if (quit && message == NULL)
+            break;
+
+        if (message != NULL) {
+            JOYNR_LOG_DEBUG(logger, "INCOMING\nmessage: {}", message);
+
+            JoynrMessage* msg = JsonSerializer::deserialize<JoynrMessage>(message);
+
+            skeleton.transmit(*msg);
+
+            delete msg;
+        }
+    }
+
+    receiveBuffer.Free();
+
+    isRunning = false;
+}
+
+void AsyncIPCQueueTransmitter::shutdown()
+{
+    quit = true;
+}
+
+} // namespace joynr
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCQueueTransmitter.h b/cpp/libjoynr/asyncipc/AsyncIPCQueueTransmitter.h
new file mode 100644
index 0000000..58b5332
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCQueueTransmitter.h
@@ -0,0 +1,52 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#ifndef ASYNCIPCQUEUTRANSMITTER_H
+#define ASYNCIPCQUEUTRANSMITTER_H
+
+#include "joynr/PrivateCopyAssign.h"
+#include "joynr/Logger.h"
+#include "joynr/Runnable.h"
+
+namespace joynr
+{
+class AsyncIPCMessagingSkeleton;
+class AsyncIPCQueueBuffer;
+
+class AsyncIPCQueueTransmitter : public joynr::Runnable
+{
+public:
+    AsyncIPCQueueTransmitter(AsyncIPCMessagingSkeleton& skeleton,
+                             AsyncIPCQueueBuffer& receiveBuffer);
+    void run();
+    void shutdown();
+    bool IsRunning() const;
+
+private:
+    DISALLOW_COPY_AND_ASSIGN(AsyncIPCQueueTransmitter);
+    ADD_LOGGER(AsyncIPCQueueTransmitter);
+
+    AsyncIPCMessagingSkeleton& skeleton;
+    AsyncIPCQueueBuffer& receiveBuffer;
+    bool quit;
+    bool isRunning;
+};
+}
+
+// namespace joynr
+#endif // ASYNCIPCQUEUTRANSMITTER_H
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCSettings.cpp b/cpp/libjoynr/asyncipc/AsyncIPCSettings.cpp
new file mode 100644
index 0000000..1ed2d79
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCSettings.cpp
@@ -0,0 +1,91 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#include "AsyncIPCSettings.h"
+#include "joynr/Settings.h"
+#include "joynr/TypeUtil.h"
+#include <cassert>
+
+namespace joynr
+{
+
+INIT_LOGGER(AsyncIPCSettings);
+
+AsyncIPCSettings::AsyncIPCSettings(Settings& settings) : settings(settings)
+{
+    Settings defaultAsyncIPCSettings{DEFAULT_ASYNCIPC_SETTINGS_FILENAME()};
+    Settings::merge(defaultAsyncIPCSettings, this->settings, false);
+    checkSettings();
+}
+
+AsyncIPCSettings::AsyncIPCSettings(const AsyncIPCSettings& other) : settings(other.settings)
+{
+}
+
+AsyncIPCSettings::~AsyncIPCSettings()
+{
+}
+
+void AsyncIPCSettings::checkSettings() const
+{
+    assert(settings.contains(SETTING_CC_MESSAGING_PARTICIPANTID()));
+}
+
+const std::string& AsyncIPCSettings::SETTING_CC_MESSAGING_PARTICIPANTID()
+{
+    static const std::string value("asyncipc/cluster-controller-messaging-participantid");
+    return value;
+}
+
+const std::string& AsyncIPCSettings::DEFAULT_ASYNCIPC_SETTINGS_FILENAME()
+{
+    static const std::string value("resources/default-asyncipc.settings");
+    return value;
+}
+
+std::string AsyncIPCSettings::getClusterControllerMessagingParticipantId() const
+{
+    return settings.get<std::string>(AsyncIPCSettings::SETTING_CC_MESSAGING_PARTICIPANTID());
+}
+
+void AsyncIPCSettings::setClusterControllerMessagingParticipantId(const std::string& participantId)
+{
+    settings.set(AsyncIPCSettings::SETTING_CC_MESSAGING_PARTICIPANTID(), participantId);
+}
+
+std::string AsyncIPCSettings::createClusterControllerMessagingAddressString() const
+{
+    std::string address;
+    address.append(getClusterControllerMessagingParticipantId());
+    return address;
+}
+
+bool AsyncIPCSettings::contains(const std::string& path) const
+{
+    return settings.contains(path);
+}
+
+void AsyncIPCSettings::printSettings() const
+{
+    JOYNR_LOG_DEBUG(logger,
+                    "SETTING: {}  = {}",
+                    SETTING_CC_MESSAGING_PARTICIPANTID(),
+                    settings.get<std::string>(SETTING_CC_MESSAGING_PARTICIPANTID()));
+}
+
+} // namespace joynr
diff --git a/cpp/libjoynr/asyncipc/AsyncIPCSettings.h b/cpp/libjoynr/asyncipc/AsyncIPCSettings.h
new file mode 100644
index 0000000..bb64690
--- /dev/null
+++ b/cpp/libjoynr/asyncipc/AsyncIPCSettings.h
@@ -0,0 +1,60 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#ifndef ASYNCIPCSETTINGS_H
+#define ASYNCIPCSETTINGS_H
+
+#include "joynr/JoynrCommonExport.h"
+#include "joynr/Logger.h"
+#include <string>
+
+namespace joynr
+{
+
+class Settings;
+
+class JOYNRCOMMON_EXPORT AsyncIPCSettings
+{
+
+public:
+    static const std::string& SETTING_CC_MESSAGING_PARTICIPANTID();
+
+    static const std::string& DEFAULT_ASYNCIPC_SETTINGS_FILENAME();
+
+    explicit AsyncIPCSettings(Settings& settings);
+    AsyncIPCSettings(const AsyncIPCSettings& other);
+
+    ~AsyncIPCSettings();
+
+    std::string getClusterControllerMessagingParticipantId() const;
+    void setClusterControllerMessagingParticipantId(const std::string& participantId);
+    std::string createClusterControllerMessagingAddressString() const;
+
+    void printSettings() const;
+    bool contains(const std::string& path) const;
+
+private:
+    void operator=(const AsyncIPCSettings& other);
+
+    Settings& settings;
+    ADD_LOGGER(AsyncIPCSettings);
+    void checkSettings() const;
+};
+
+} // namespace joynr
+#endif // ASYNCIPCSETTINGS_H
diff --git a/cpp/libjoynr/include/joynr/AsyncIPCMessageRouterAdapter.h b/cpp/libjoynr/include/joynr/AsyncIPCMessageRouterAdapter.h
new file mode 100644
index 0000000..2341fb9
--- /dev/null
+++ b/cpp/libjoynr/include/joynr/AsyncIPCMessageRouterAdapter.h
@@ -0,0 +1,46 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#ifndef ASYNCIPCMESSAGEROUTERADAPTER_H
+#define ASYNCIPCMESSAGEROUTERADAPTER_H
+
+#include "joynr/PrivateCopyAssign.h"
+#include "joynr/MessageRouter.h"
+#include "joynr/JoynrExport.h"
+#include "libjoynr/asyncipc/AsyncIPCMessagingSkeleton.h"
+
+namespace joynr
+{
+
+class JOYNR_EXPORT AsyncIPCMessageRouterAdapter : public IMessaging
+{
+public:
+    AsyncIPCMessageRouterAdapter(MessageRouter& messageRouter, const std::string& queueName);
+
+    ~AsyncIPCMessageRouterAdapter();
+
+    virtual void transmit(JoynrMessage& message);
+
+private:
+    DISALLOW_COPY_AND_ASSIGN(AsyncIPCMessageRouterAdapter);
+    MessageRouter& messageRouter;
+    AsyncIPCMessagingSkeleton skeleton;
+};
+
+} // namespace joynr
+#endif // ASYNCIPCMESSAGEROUTERADAPTER_H
diff --git a/cpp/libjoynr/include/joynr/MessageRouter.h b/cpp/libjoynr/include/joynr/MessageRouter.h
index 0d3bdea..dca762b 100644
--- a/cpp/libjoynr/include/joynr/MessageRouter.h
+++ b/cpp/libjoynr/include/joynr/MessageRouter.h
@@ -1,200 +1,204 @@
-/*
- * #%L
- * %%
- * Copyright (C) 2011 - 2013 BMW Car IT GmbH
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * #L%
- */
-#ifndef MESSAGEROUTER_H
-#define MESSAGEROUTER_H
-#include "joynr/PrivateCopyAssign.h"
-
-#include "joynr/JoynrExport.h"
-#include "joynr/ObjectWithDecayTime.h"
-#include "joynr/JoynrMessage.h"
-#include "joynr/IMessaging.h"
-#include "joynr/MessagingSettings.h"
-#include "joynr/system/RoutingProxy.h"
-#include "joynr/system/RoutingAbstractProvider.h"
-#include "joynr/RequestStatus.h"
-#include "joynr/Directory.h"
-#include "joynr/MessageQueue.h"
-#include "joynr/ThreadPool.h"
-#include "joynr/Timer.h"
-#include "joynr/Runnable.h"
-#include "joynr/Semaphore.h"
-#include "joynr/Logger.h"
-
-#include <unordered_set>
-#include <mutex>
-#include <string>
-#include <memory>
-
-namespace joynr
-{
-
-class IMessagingStubFactory;
-class JoynrMessagingEndpointAddress;
-class IAccessController;
-class IPlatformSecurityManager;
-
-namespace system
-{
-class Address;
-} // namespace system
-
-/**
-  * Class MessageRouter receives incoming JoynrMessages on the ClusterController
-  * and forwards them either to a remote ClusterController or to a LibJoynr on the machine.
-  *
-  *  1 extracts the destination participant ID and looks up the EndpointAddress in the
-  *MessagingEndpointDirectory
-  *  2 creates a <Middleware>MessagingStub by calling MessagingStubFactory.create(EndpointAddress
-  *addr)
-  *  3 forwards the message using the <Middleware>MessagingStub.send(JoynrMessage msg)
-  *
-  *  In sending, a ThreadPool of default size 6 is used with a 500ms default retry interval.
-  */
-
-class JOYNR_EXPORT MessageRouter : public joynr::system::RoutingAbstractProvider
-{
-public:
-    MessageRouter(IMessagingStubFactory* messagingStubFactory,
-                  IPlatformSecurityManager* securityManager,
-                  int maxThreads = 6,
-                  MessageQueue* messageQueue = new MessageQueue());
-
-    MessageRouter(IMessagingStubFactory* messagingStubFactory,
-                  std::shared_ptr<joynr::system::RoutingTypes::Address> incomingAddress,
-                  int maxThreads = 6,
-                  MessageQueue* messageQueue = new MessageQueue());
-
-    ~MessageRouter() override;
-
-    /**
-     * @brief Forwards the message towards its destination (determined by inspecting the message
-     * header). NOTE: the init method must be called before the first message is routed.
-     *
-     * @param message the message to route.
-     * @param qos the QoS used to route the message.
-     */
-    virtual void route(const JoynrMessage& message);
-
-    void addNextHop(const std::string& participantId,
-                    const joynr::system::RoutingTypes::ChannelAddress& channelAddress,
-                    std::function<void()> onSuccess,
-                    std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
-            override;
-    void addNextHop(const std::string& participantId,
-                    const joynr::system::RoutingTypes::CommonApiDbusAddress& commonApiDbusAddress,
-                    std::function<void()> onSuccess,
-                    std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
-            override;
-    void addNextHop(const std::string& participantId,
-                    const joynr::system::RoutingTypes::BrowserAddress& browserAddress,
-                    std::function<void()> onSuccess,
-                    std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
-            override;
-    void addNextHop(const std::string& participantId,
-                    const joynr::system::RoutingTypes::WebSocketAddress& webSocketAddress,
-                    std::function<void()> onSuccess,
-                    std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
-            override;
-    void addNextHop(
-            const std::string& participantId,
-            const joynr::system::RoutingTypes::WebSocketClientAddress& webSocketClientAddress,
-            std::function<void()> onSuccess,
-            std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
-            override;
-    void removeNextHop(const std::string& participantId,
-                       std::function<void()> onSuccess = nullptr,
-                       std::function<void(const joynr::exceptions::ProviderRuntimeException&)>
-                               onError = nullptr) override;
-    void resolveNextHop(const std::string& participantId,
-                        std::function<void(const bool& resolved)> onSuccess,
-                        std::function<void(const joynr::exceptions::ProviderRuntimeException&)>
-                                onError) override;
-
-    void addProvisionedNextHop(std::string participantId,
-                               std::shared_ptr<system::RoutingTypes::Address> address);
-
-    void setAccessController(std::shared_ptr<IAccessController> accessController);
-
-    void setParentRouter(joynr::system::RoutingProxy* parentRouter,
-                         std::shared_ptr<system::RoutingTypes::Address> parentAddress,
-                         std::string parentParticipantId);
-
-    virtual void addNextHop(
-            const std::string& participantId,
-            const std::shared_ptr<joynr::system::RoutingTypes::Address>& inprocessAddress,
-            std::function<void()> onSuccess = nullptr);
-
-    friend class MessageRunnable;
-    friend class ConsumerPermissionCallback;
-
-private:
-    DISALLOW_COPY_AND_ASSIGN(MessageRouter);
-    IMessagingStubFactory* messagingStubFactory;
-    Directory<std::string, joynr::system::RoutingTypes::Address> routingTable;
-    ReadWriteLock routingTableLock;
-    ThreadPool threadPool;
-    joynr::system::RoutingProxy* parentRouter;
-    std::shared_ptr<joynr::system::RoutingTypes::Address> parentAddress;
-    std::shared_ptr<joynr::system::RoutingTypes::Address> incomingAddress;
-    ADD_LOGGER(MessageRouter);
-
-    MessageQueue* messageQueue;
-    Timer messageQueueCleanerTimer;
-    std::unordered_set<std::string>* runningParentResolves;
-    std::shared_ptr<IAccessController> accessController;
-    IPlatformSecurityManager* securityManager;
-    mutable std::mutex parentResolveMutex;
-
-    void addNextHopToParent(std::string participantId,
-                            std::function<void(void)> callbackFct = nullptr,
-                            std::function<void(const joynr::exceptions::ProviderRuntimeException&)>
-                                    onError = nullptr);
-
-    void sendMessage(const JoynrMessage& message,
-                     std::shared_ptr<system::RoutingTypes::Address> destAddress);
-
-    void sendMessages(const std::string& destinationPartId,
-                      std::shared_ptr<system::RoutingTypes::Address> address);
-
-    bool isChildMessageRouter();
-
-    void addToRoutingTable(std::string participantId,
-                           std::shared_ptr<joynr::system::RoutingTypes::Address> address);
-
-    void removeRunningParentResolvers(const std::string& destinationPartId);
-};
-
-/**
- * Class to send message
- */
-class MessageRunnable : public Runnable, public ObjectWithDecayTime
-{
-public:
-    MessageRunnable(const JoynrMessage& message, std::shared_ptr<IMessaging> messagingStub);
-    void shutdown() override;
-    void run() override;
-
-private:
-    JoynrMessage message;
-    std::shared_ptr<IMessaging> messagingStub;
-    ADD_LOGGER(MessageRunnable);
-};
-
-} // namespace joynr
-#endif // MESSAGEROUTER_H
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#ifndef MESSAGEROUTER_H
+#define MESSAGEROUTER_H
+#include "joynr/PrivateCopyAssign.h"
+
+#include "joynr/JoynrExport.h"
+#include "joynr/ObjectWithDecayTime.h"
+#include "joynr/JoynrMessage.h"
+#include "joynr/IMessaging.h"
+#include "joynr/MessagingSettings.h"
+#include "joynr/system/RoutingProxy.h"
+#include "joynr/system/RoutingAbstractProvider.h"
+#include "joynr/RequestStatus.h"
+#include "joynr/Directory.h"
+#include "joynr/MessageQueue.h"
+#include "joynr/ThreadPool.h"
+#include "joynr/Timer.h"
+#include "joynr/Runnable.h"
+#include "joynr/Semaphore.h"
+#include "joynr/Logger.h"
+
+#include <unordered_set>
+#include <mutex>
+#include <string>
+#include <memory>
+
+namespace joynr
+{
+
+class IMessagingStubFactory;
+class JoynrMessagingEndpointAddress;
+class IAccessController;
+class IPlatformSecurityManager;
+
+namespace system
+{
+class Address;
+} // namespace system
+
+/**
+  * Class MessageRouter receives incoming JoynrMessages on the ClusterController
+  * and forwards them either to a remote ClusterController or to a LibJoynr on the machine.
+  *
+  *  1 extracts the destination participant ID and looks up the EndpointAddress in the
+  *MessagingEndpointDirectory
+  *  2 creates a <Middleware>MessagingStub by calling MessagingStubFactory.create(EndpointAddress
+  *addr)
+  *  3 forwards the message using the <Middleware>MessagingStub.send(JoynrMessage msg)
+  *
+  *  In sending, a ThreadPool of default size 6 is used with a 500ms default retry interval.
+  */
+
+class JOYNR_EXPORT MessageRouter : public joynr::system::RoutingAbstractProvider
+{
+public:
+    MessageRouter(IMessagingStubFactory* messagingStubFactory,
+                  IPlatformSecurityManager* securityManager,
+                  int maxThreads = 6,
+                  MessageQueue* messageQueue = new MessageQueue());
+
+    MessageRouter(IMessagingStubFactory* messagingStubFactory,
+                  std::shared_ptr<joynr::system::RoutingTypes::Address> incomingAddress,
+                  int maxThreads = 6,
+                  MessageQueue* messageQueue = new MessageQueue());
+
+    ~MessageRouter() override;
+
+    /**
+     * @brief Forwards the message towards its destination (determined by inspecting the message
+     * header). NOTE: the init method must be called before the first message is routed.
+     *
+     * @param message the message to route.
+     * @param qos the QoS used to route the message.
+     */
+    virtual void route(const JoynrMessage& message);
+    void addNextHop(
+            const std::string& participantId,
+            const joynr::system::RoutingTypes::ChannelAddress& channelAddress,
+            std::function<void()> onSuccess,
+            std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError);
+    void addNextHop(
+            const std::string& participantId,
+            const joynr::system::RoutingTypes::CommonApiDbusAddress& commonApiDbusAddress,
+            std::function<void()> onSuccess,
+            std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError);
+    void addNextHop(
+            const std::string& participantId,
+            const joynr::system::RoutingTypes::AsyncIPCAddress& asyncIPCAddress,
+            std::function<void()> onSuccess,
+            std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError);
+    void addNextHop(
+            const std::string& participantId,
+            const joynr::system::RoutingTypes::BrowserAddress& browserAddress,
+            std::function<void()> onSuccess,
+            std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError);
+    void addNextHop(
+            const std::string& participantId,
+            const joynr::system::RoutingTypes::WebSocketAddress& webSocketAddress,
+            std::function<void()> onSuccess,
+            std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError);
+    void addNextHop(
+            const std::string& participantId,
+            const joynr::system::RoutingTypes::WebSocketClientAddress& webSocketClientAddress,
+            std::function<void()> onSuccess,
+            std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
+            override;
+    void removeNextHop(const std::string& participantId,
+                       std::function<void()> onSuccess = nullptr,
+                       std::function<void(const joynr::exceptions::ProviderRuntimeException&)>
+                               onError = nullptr) override;
+    void resolveNextHop(const std::string& participantId,
+                        std::function<void(const bool& resolved)> onSuccess,
+                        std::function<void(const joynr::exceptions::ProviderRuntimeException&)>
+                                onError) override;
+
+    void addProvisionedNextHop(std::string participantId,
+                               std::shared_ptr<system::RoutingTypes::Address> address);
+
+    void setAccessController(std::shared_ptr<IAccessController> accessController);
+
+    void setParentRouter(joynr::system::RoutingProxy* parentRouter,
+                         std::shared_ptr<system::RoutingTypes::Address> parentAddress,
+                         std::string parentParticipantId);
+
+    virtual void addNextHop(
+            const std::string& participantId,
+            const std::shared_ptr<joynr::system::RoutingTypes::Address>& inprocessAddress,
+            std::function<void()> onSuccess = nullptr);
+
+    friend class MessageRunnable;
+    friend class ConsumerPermissionCallback;
+
+private:
+    DISALLOW_COPY_AND_ASSIGN(MessageRouter);
+    IMessagingStubFactory* messagingStubFactory;
+    Directory<std::string, joynr::system::RoutingTypes::Address> routingTable;
+    ReadWriteLock routingTableLock;
+    ThreadPool threadPool;
+    joynr::system::RoutingProxy* parentRouter;
+    std::shared_ptr<joynr::system::RoutingTypes::Address> parentAddress;
+    std::shared_ptr<joynr::system::RoutingTypes::Address> incomingAddress;
+    ADD_LOGGER(MessageRouter);
+
+    MessageQueue* messageQueue;
+    Timer messageQueueCleanerTimer;
+    std::unordered_set<std::string>* runningParentResolves;
+    std::shared_ptr<IAccessController> accessController;
+    IPlatformSecurityManager* securityManager;
+    mutable std::mutex parentResolveMutex;
+
+    void addNextHopToParent(std::string participantId,
+                            std::function<void(void)> callbackFct = nullptr,
+                            std::function<void(const joynr::exceptions::ProviderRuntimeException&)>
+                                    onError = nullptr);
+
+    void sendMessage(const JoynrMessage& message,
+                     std::shared_ptr<system::RoutingTypes::Address> destAddress);
+
+    void sendMessages(const std::string& destinationPartId,
+                      std::shared_ptr<system::RoutingTypes::Address> address);
+
+    bool isChildMessageRouter();
+
+    void addToRoutingTable(std::string participantId,
+                           std::shared_ptr<joynr::system::RoutingTypes::Address> address);
+
+    void removeRunningParentResolvers(const std::string& destinationPartId);
+};
+
+/**
+ * Class to send message
+ */
+class MessageRunnable : public Runnable, public ObjectWithDecayTime
+{
+public:
+    MessageRunnable(const JoynrMessage& message, std::shared_ptr<IMessaging> messagingStub);
+    void shutdown() override;
+    void run() override;
+
+private:
+    JoynrMessage message;
+    std::shared_ptr<IMessaging> messagingStub;
+    ADD_LOGGER(MessageRunnable);
+};
+
+} // namespace joynr
+#endif // MESSAGEROUTER_H
diff --git a/cpp/libjoynr/joynr-messaging/MessageRouter.cpp b/cpp/libjoynr/joynr-messaging/MessageRouter.cpp
index 12177dd..ec1f632 100644
--- a/cpp/libjoynr/joynr-messaging/MessageRouter.cpp
+++ b/cpp/libjoynr/joynr-messaging/MessageRouter.cpp
@@ -1,536 +1,557 @@
-/*
- * #%L
- * %%
- * Copyright (C) 2011 - 2013 BMW Car IT GmbH
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * #L%
- */
-#include "joynr/MessageRouter.h"
-#include "joynr/DispatcherUtils.h"
-#include "joynr/MessagingStubFactory.h"
-#include "joynr/Directory.h"
-#include "joynr/system/RoutingTypes/Address.h"
-#include "joynr/system/RoutingTypes/ChannelAddress.h"
-#include "joynr/system/RoutingTypes/CommonApiDbusAddress.h"
-#include "joynr/system/RoutingTypes/BrowserAddress.h"
-#include "joynr/system/RoutingTypes/WebSocketAddress.h"
-#include "joynr/system/RoutingTypes/WebSocketClientAddress.h"
-#include "joynr/types/ProviderQos.h"
-#include "joynr/RequestStatusCode.h"
-#include "joynr/JsonSerializer.h"
-#include "cluster-controller/access-control/IAccessController.h"
-#include "joynr/IPlatformSecurityManager.h"
-
-#include <chrono>
-
-#include <cassert>
-
-namespace joynr
-{
-
-INIT_LOGGER(MessageRouter);
-
-//------ ConsumerPermissionCallback --------------------------------------------
-
-class ConsumerPermissionCallback : public IAccessController::IHasConsumerPermissionCallback
-{
-public:
-    ConsumerPermissionCallback(MessageRouter& owningMessageRouter,
-                               const JoynrMessage& message,
-                               std::shared_ptr<system::RoutingTypes::Address> destination);
-
-    void hasConsumerPermission(bool hasPermission) override;
-
-    MessageRouter& owningMessageRouter;
-    JoynrMessage message;
-    std::shared_ptr<system::RoutingTypes::Address> destination;
-};
-
-//------ MessageRouter ---------------------------------------------------------
-
-MessageRouter::~MessageRouter()
-{
-    messageQueueCleanerTimer.shutdown();
-    threadPool.shutdown();
-    if (parentRouter != nullptr) {
-        delete parentRouter;
-    }
-    delete messagingStubFactory;
-    delete messageQueue;
-    delete runningParentResolves;
-    delete securityManager;
-}
-
-MessageRouter::MessageRouter(IMessagingStubFactory* messagingStubFactory,
-                             IPlatformSecurityManager* securityManager,
-                             int maxThreads,
-                             MessageQueue* messageQueue)
-        : joynr::system::RoutingAbstractProvider(),
-          messagingStubFactory(messagingStubFactory),
-          routingTable("MessageRouter-RoutingTable"),
-          routingTableLock(),
-          threadPool("MessageRouter", maxThreads),
-          parentRouter(nullptr),
-          parentAddress(nullptr),
-          incomingAddress(),
-          messageQueue(messageQueue),
-          messageQueueCleanerTimer(),
-          runningParentResolves(new std::unordered_set<std::string>()),
-          accessController(nullptr),
-          securityManager(securityManager),
-          parentResolveMutex()
-{
-    messageQueueCleanerTimer.addTimer(
-            [this](Timer::TimerId) { this->messageQueue->removeOutdatedMessages(); },
-            [](Timer::TimerId) {},
-            1000,
-            true);
-
-    providerQos.setCustomParameters(std::vector<joynr::types::CustomParameter>());
-    providerQos.setProviderVersion(1);
-    providerQos.setPriority(1);
-    providerQos.setScope(joynr::types::ProviderScope::LOCAL);
-    providerQos.setSupportsOnChangeSubscriptions(false);
-}
-
-MessageRouter::MessageRouter(IMessagingStubFactory* messagingStubFactory,
-                             std::shared_ptr<joynr::system::RoutingTypes::Address> incomingAddress,
-                             int maxThreads,
-                             MessageQueue* messageQueue)
-        : joynr::system::RoutingAbstractProvider(),
-          messagingStubFactory(messagingStubFactory),
-          routingTable("MessageRouter-RoutingTable"),
-          routingTableLock(),
-          threadPool("MessageRouter", maxThreads),
-          parentRouter(nullptr),
-          parentAddress(nullptr),
-          incomingAddress(incomingAddress),
-          messageQueue(messageQueue),
-          messageQueueCleanerTimer(),
-          runningParentResolves(new std::unordered_set<std::string>()),
-          accessController(nullptr),
-          securityManager(nullptr),
-          parentResolveMutex()
-{
-    messageQueueCleanerTimer.addTimer(
-            [this](Timer::TimerId) { this->messageQueue->removeOutdatedMessages(); },
-            [](Timer::TimerId) {},
-            1000,
-            true);
-
-    providerQos.setCustomParameters(std::vector<joynr::types::CustomParameter>());
-    providerQos.setProviderVersion(1);
-    providerQos.setPriority(1);
-    providerQos.setScope(joynr::types::ProviderScope::LOCAL);
-    providerQos.setSupportsOnChangeSubscriptions(false);
-}
-
-void MessageRouter::addProvisionedNextHop(
-        std::string participantId,
-        std::shared_ptr<joynr::system::RoutingTypes::Address> address)
-{
-    addToRoutingTable(participantId, address);
-}
-
-void MessageRouter::setAccessController(std::shared_ptr<IAccessController> accessController)
-{
-    assert(accessController);
-    this->accessController = accessController;
-}
-
-void MessageRouter::setParentRouter(
-        joynr::system::RoutingProxy* parentRouter,
-        std::shared_ptr<joynr::system::RoutingTypes::Address> parentAddress,
-        std::string parentParticipantId)
-{
-    this->parentRouter = parentRouter;
-    this->parentAddress = parentAddress;
-
-    // add the next hop to parent router
-    // this is necessary because during normal registration, the parent proxy is not yet set
-    addProvisionedNextHop(parentParticipantId, parentAddress);
-    addNextHopToParent(parentRouter->getProxyParticipantId());
-}
-
-bool MessageRouter::isChildMessageRouter()
-{
-    if (!incomingAddress) {
-        return false;
-    }
-    // if an incoming address is set, a parent message router is needed for correct configuration
-    return parentRouter != nullptr && parentAddress;
-}
-
-/**
-  * Q (RDZ): What happens if the message cannot be forwarded? Exception? Log file entry?
-  * Q (RDZ): When are messagingstubs removed? They are stored indefinitely in the factory
-  */
-void MessageRouter::route(const JoynrMessage& message)
-{
-    assert(messagingStubFactory != nullptr);
-    JoynrTimePoint now = std::chrono::time_point_cast<std::chrono::milliseconds>(
-            std::chrono::system_clock::now());
-    if (now > message.getHeaderExpiryDate()) {
-        JOYNR_LOG_WARN(logger,
-                       "Received expired message. Dropping the message (ID: {}).",
-                       message.getHeaderMessageId());
-        return;
-    }
-
-    // Validate the message if possible
-    if (securityManager != nullptr && !securityManager->validate(message)) {
-        JOYNR_LOG_ERROR(logger, "messageId {} failed validation", message.getHeaderMessageId());
-        return;
-    }
-
-    JOYNR_LOG_DEBUG(logger,
-                    "Route message with Id {} and payload {}",
-                    message.getHeaderMessageId(),
-                    message.getPayload());
-    // search for the destination address
-    const std::string destinationPartId = message.getHeaderTo();
-    std::shared_ptr<joynr::system::RoutingTypes::Address> destAddress(nullptr);
-
-    {
-        ReadLocker lock(routingTableLock);
-        destAddress = routingTable.lookup(destinationPartId);
-    }
-    // if destination address is not known
-    if (!destAddress) {
-        // save the message for later delivery
-        messageQueue->queueMessage(message);
-        JOYNR_LOG_DEBUG(logger, "message queued: {}", message.getPayload());
-
-        // and try to resolve destination address via parent message router
-        if (isChildMessageRouter()) {
-            std::lock_guard<std::mutex> lock(parentResolveMutex);
-            if (runningParentResolves->find(destinationPartId) == runningParentResolves->end()) {
-                runningParentResolves->insert(destinationPartId);
-                std::function<void(const bool&)> onSuccess =
-                        [this, destinationPartId](const bool& resolved) {
-                    if (resolved) {
-                        JOYNR_LOG_INFO(logger,
-                                       "Got destination address for participant {}",
-                                       destinationPartId);
-                        // save next hop in the routing table
-                        this->addProvisionedNextHop(destinationPartId, this->parentAddress);
-                        this->removeRunningParentResolvers(destinationPartId);
-                        this->sendMessages(destinationPartId, this->parentAddress);
-                    } else {
-                        JOYNR_LOG_ERROR(logger,
-                                        "Failed to resolve next hop for participant {}",
-                                        destinationPartId);
-                        // TODO error handling in case of failing submission (?)
-                    }
-                };
-
-                // TODO error handling in case of failing submission (?)
-                parentRouter->resolveNextHopAsync(destinationPartId, onSuccess);
-            }
-        } else {
-            // no parent message router to resolve destination address
-            JOYNR_LOG_WARN(logger,
-                           "No routing information found for destination participant ID \"{}\" "
-                           "so far. Waiting for participant registration. "
-                           "Queueing message (ID : {})",
-                           message.getHeaderTo(),
-                           message.getHeaderMessageId());
-        }
-        return;
-    }
-
-    if (accessController) {
-        // Access control checks are asynchronous, callback will send message
-        // if access is granted
-        std::shared_ptr<IAccessController::IHasConsumerPermissionCallback> callback(
-                new ConsumerPermissionCallback(*this, message, destAddress));
-        accessController->hasConsumerPermission(message, callback);
-        return;
-    }
-
-    // If this point is reached, the message can be sent without delay
-    sendMessage(message, destAddress);
-}
-
-void MessageRouter::removeRunningParentResolvers(const std::string& destinationPartId)
-{
-    std::lock_guard<std::mutex> lock(parentResolveMutex);
-    if (runningParentResolves->find(destinationPartId) != runningParentResolves->end()) {
-        runningParentResolves->erase(destinationPartId);
-    }
-}
-
-void MessageRouter::sendMessages(const std::string& destinationPartId,
-                                 std::shared_ptr<joynr::system::RoutingTypes::Address> address)
-{
-    while (true) {
-        MessageQueueItem* item = messageQueue->getNextMessageForParticipant(destinationPartId);
-        if (!item) {
-            break;
-        }
-        sendMessage(item->getContent(), address);
-        delete item;
-    }
-}
-
-void MessageRouter::sendMessage(const JoynrMessage& message,
-                                std::shared_ptr<joynr::system::RoutingTypes::Address> destAddress)
-{
-    auto stub = messagingStubFactory->create(*destAddress);
-    if (stub) {
-        threadPool.execute(new MessageRunnable(message, stub));
-    } else {
-        JOYNR_LOG_WARN(logger,
-                       "Messag with payload {}  could not be send to {}. Stub creation failed",
-                       message.getPayload(),
-                       (*destAddress).toString());
-    }
-}
-
-void MessageRouter::addNextHop(
-        const std::string& participantId,
-        const std::shared_ptr<joynr::system::RoutingTypes::Address>& inprocessAddress,
-        std::function<void()> onSuccess)
-{
-    addToRoutingTable(participantId, inprocessAddress);
-
-    addNextHopToParent(participantId, onSuccess);
-
-    sendMessages(participantId, inprocessAddress);
-}
-
-// inherited from joynr::system::RoutingProvider
-void MessageRouter::addNextHop(
-        const std::string& participantId,
-        const system::RoutingTypes::ChannelAddress& channelAddress,
-        std::function<void()> onSuccess,
-        std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
-{
-    auto address = std::make_shared<joynr::system::RoutingTypes::ChannelAddress>(channelAddress);
-    addToRoutingTable(participantId, address);
-
-    addNextHopToParent(participantId, onSuccess, onError);
-
-    sendMessages(participantId, address);
-}
-
-// inherited from joynr::system::RoutingProvider
-void MessageRouter::addNextHop(
-        const std::string& participantId,
-        const system::RoutingTypes::CommonApiDbusAddress& commonApiDbusAddress,
-        std::function<void()> onSuccess,
-        std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
-{
-    auto address = std::make_shared<joynr::system::RoutingTypes::CommonApiDbusAddress>(
-            commonApiDbusAddress);
-    addToRoutingTable(participantId, address);
-
-    addNextHopToParent(participantId, onSuccess, onError);
-
-    sendMessages(participantId, address);
-}
-
-// inherited from joynr::system::RoutingProvider
-void MessageRouter::addNextHop(
-        const std::string& participantId,
-        const system::RoutingTypes::BrowserAddress& browserAddress,
-        std::function<void()> onSuccess,
-        std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
-{
-    auto address = std::make_shared<joynr::system::RoutingTypes::BrowserAddress>(browserAddress);
-    addToRoutingTable(participantId, address);
-
-    addNextHopToParent(participantId, onSuccess, onError);
-
-    sendMessages(participantId, address);
-}
-
-// inherited from joynr::system::RoutingProvider
-void MessageRouter::addNextHop(
-        const std::string& participantId,
-        const system::RoutingTypes::WebSocketAddress& webSocketAddress,
-        std::function<void()> onSuccess,
-        std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
-{
-    auto address =
-            std::make_shared<joynr::system::RoutingTypes::WebSocketAddress>(webSocketAddress);
-    addToRoutingTable(participantId, address);
-
-    addNextHopToParent(participantId, onSuccess, onError);
-
-    sendMessages(participantId, address);
-}
-
-// inherited from joynr::system::RoutingProvider
-void MessageRouter::addNextHop(
-        const std::string& participantId,
-        const system::RoutingTypes::WebSocketClientAddress& webSocketClientAddress,
-        std::function<void()> onSuccess,
-        std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
-{
-    auto address = std::make_shared<joynr::system::RoutingTypes::WebSocketClientAddress>(
-            webSocketClientAddress);
-    addToRoutingTable(participantId, address);
-
-    addNextHopToParent(participantId, onSuccess, onError);
-
-    sendMessages(participantId, address);
-}
-
-void MessageRouter::addNextHopToParent(
-        std::string participantId,
-        std::function<void(void)> onSuccess,
-        std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
-{
-    std::function<void(const exceptions::JoynrException&)> onErrorWrapper =
-            [onError](const exceptions::JoynrException& error) {
-        if (onError) {
-            onError(joynr::exceptions::ProviderRuntimeException(error.getMessage()));
-        } else {
-            JOYNR_LOG_WARN(logger,
-                           "Unable to report error (received by calling "
-                           "parentRouter->addNextHopAsync), since onError function is "
-                           "empty. Error message: {}",
-                           error.getMessage());
-        }
-    };
-
-    // add to parent router
-    if (isChildMessageRouter()) {
-        if (auto channelAddress =
-                    std::dynamic_pointer_cast<joynr::system::RoutingTypes::ChannelAddress>(
-                            incomingAddress)) {
-            parentRouter->addNextHopAsync(
-                    participantId, *channelAddress, onSuccess, onErrorWrapper);
-        }
-        if (auto commonApiDbusAddress =
-                    std::dynamic_pointer_cast<joynr::system::RoutingTypes::CommonApiDbusAddress>(
-                            incomingAddress)) {
-            parentRouter->addNextHopAsync(
-                    participantId, *commonApiDbusAddress, onSuccess, onErrorWrapper);
-        }
-        if (auto browserAddress =
-                    std::dynamic_pointer_cast<joynr::system::RoutingTypes::BrowserAddress>(
-                            incomingAddress)) {
-            parentRouter->addNextHopAsync(
-                    participantId, *browserAddress, onSuccess, onErrorWrapper);
-        }
-        if (auto webSocketAddress =
-                    std::dynamic_pointer_cast<joynr::system::RoutingTypes::WebSocketAddress>(
-                            incomingAddress)) {
-            parentRouter->addNextHopAsync(
-                    participantId, *webSocketAddress, onSuccess, onErrorWrapper);
-        }
-        if (auto webSocketClientAddress =
-                    std::dynamic_pointer_cast<joynr::system::RoutingTypes::WebSocketClientAddress>(
-                            incomingAddress)) {
-            parentRouter->addNextHopAsync(
-                    participantId, *webSocketClientAddress, onSuccess, onErrorWrapper);
-        }
-    } else if (onSuccess) {
-        onSuccess();
-    }
-}
-
-void MessageRouter::addToRoutingTable(std::string participantId,
-                                      std::shared_ptr<joynr::system::RoutingTypes::Address> address)
-{
-    WriteLocker lock(routingTableLock);
-    routingTable.add(participantId, address);
-}
-
-// inherited from joynr::system::RoutingProvider
-void MessageRouter::removeNextHop(
-        const std::string& participantId,
-        std::function<void()> onSuccess,
-        std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
-{
-    {
-        WriteLocker lock(routingTableLock);
-        routingTable.remove(participantId);
-    }
-
-    std::function<void(const exceptions::JoynrException&)> onErrorWrapper =
-            [onError](const exceptions::JoynrException& error) {
-        onError(joynr::exceptions::ProviderRuntimeException(error.getMessage()));
-    };
-
-    // remove from parent router
-    if (isChildMessageRouter()) {
-        parentRouter->removeNextHopAsync(participantId, onSuccess, onErrorWrapper);
-    } else if (onSuccess) {
-        onSuccess();
-    }
-}
-
-// inherited from joynr::system::RoutingProvider
-void MessageRouter::resolveNextHop(
-        const std::string& participantId,
-        std::function<void(const bool& resolved)> onSuccess,
-        std::function<void(const joynr::exceptions::ProviderRuntimeException&)> /*onError*/)
-{
-    ReadLocker lock(routingTableLock);
-    bool resolved = routingTable.contains(participantId);
-    onSuccess(resolved);
-}
-
-/**
- * IMPLEMENTATION of MessageRunnable class
- */
-
-INIT_LOGGER(MessageRunnable);
-
-MessageRunnable::MessageRunnable(const JoynrMessage& message,
-                                 std::shared_ptr<IMessaging> messagingStub)
-        : Runnable(true),
-          ObjectWithDecayTime(message.getHeaderExpiryDate()),
-          message(message),
-          messagingStub(messagingStub)
-{
-}
-
-void MessageRunnable::shutdown()
-{
-}
-
-void MessageRunnable::run()
-{
-    if (!isExpired()) {
-        messagingStub->transmit(message);
-    } else {
-        JOYNR_LOG_ERROR(
-                logger, "Message with ID {}  expired: dropping!", message.getHeaderMessageId());
-    }
-}
-
-/**
- * IMPLEMENTATION of ConsumerPermissionCallback class
- */
-
-ConsumerPermissionCallback::ConsumerPermissionCallback(
-        MessageRouter& owningMessageRouter,
-        const JoynrMessage& message,
-        std::shared_ptr<system::RoutingTypes::Address> destination)
-        : owningMessageRouter(owningMessageRouter), message(message), destination(destination)
-{
-}
-
-void ConsumerPermissionCallback::hasConsumerPermission(bool hasPermission)
-{
-    if (hasPermission) {
-        owningMessageRouter.sendMessage(message, destination);
-    }
-}
-
-} // namespace joynr
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#include "joynr/MessageRouter.h"
+#include "joynr/DispatcherUtils.h"
+#include "joynr/MessagingStubFactory.h"
+#include "joynr/Directory.h"
+#include "joynr/system/RoutingTypes/Address.h"
+#include "joynr/system/RoutingTypes/ChannelAddress.h"
+#include "joynr/system/RoutingTypes/CommonApiDbusAddress.h"
+#include "joynr/system/RoutingTypes/BrowserAddress.h"
+#include "joynr/system/RoutingTypes/WebSocketAddress.h"
+#include "joynr/system/RoutingTypes/WebSocketClientAddress.h"
+#include "joynr/types/ProviderQos.h"
+#include "joynr/RequestStatusCode.h"
+#include "joynr/JsonSerializer.h"
+#include "cluster-controller/access-control/IAccessController.h"
+#include "joynr/IPlatformSecurityManager.h"
+
+#include <chrono>
+
+#include <cassert>
+
+namespace joynr
+{
+
+INIT_LOGGER(MessageRouter);
+
+//------ ConsumerPermissionCallback --------------------------------------------
+
+class ConsumerPermissionCallback : public IAccessController::IHasConsumerPermissionCallback
+{
+public:
+    ConsumerPermissionCallback(MessageRouter& owningMessageRouter,
+                               const JoynrMessage& message,
+                               std::shared_ptr<system::RoutingTypes::Address> destination);
+
+    void hasConsumerPermission(bool hasPermission) override;
+
+    MessageRouter& owningMessageRouter;
+    JoynrMessage message;
+    std::shared_ptr<system::RoutingTypes::Address> destination;
+};
+
+//------ MessageRouter ---------------------------------------------------------
+
+MessageRouter::~MessageRouter()
+{
+    messageQueueCleanerTimer.shutdown();
+    threadPool.shutdown();
+    if (parentRouter != nullptr) {
+        delete parentRouter;
+    }
+    delete messagingStubFactory;
+    delete messageQueue;
+    delete runningParentResolves;
+    delete securityManager;
+}
+
+MessageRouter::MessageRouter(IMessagingStubFactory* messagingStubFactory,
+                             IPlatformSecurityManager* securityManager,
+                             int maxThreads,
+                             MessageQueue* messageQueue)
+        : joynr::system::RoutingAbstractProvider(),
+          messagingStubFactory(messagingStubFactory),
+          routingTable("MessageRouter-RoutingTable"),
+          routingTableLock(),
+          threadPool("MessageRouter", maxThreads),
+          parentRouter(nullptr),
+          parentAddress(nullptr),
+          incomingAddress(),
+          messageQueue(messageQueue),
+          messageQueueCleanerTimer(),
+          runningParentResolves(new std::unordered_set<std::string>()),
+          accessController(nullptr),
+          securityManager(securityManager),
+          parentResolveMutex()
+{
+    messageQueueCleanerTimer.addTimer(
+            [this](Timer::TimerId) { this->messageQueue->removeOutdatedMessages(); },
+            [](Timer::TimerId) {},
+            1000,
+            true);
+
+    providerQos.setCustomParameters(std::vector<joynr::types::CustomParameter>());
+    providerQos.setProviderVersion(1);
+    providerQos.setPriority(1);
+    providerQos.setScope(joynr::types::ProviderScope::LOCAL);
+    providerQos.setSupportsOnChangeSubscriptions(false);
+}
+
+MessageRouter::MessageRouter(IMessagingStubFactory* messagingStubFactory,
+                             std::shared_ptr<joynr::system::RoutingTypes::Address> incomingAddress,
+                             int maxThreads,
+                             MessageQueue* messageQueue)
+        : joynr::system::RoutingAbstractProvider(),
+          messagingStubFactory(messagingStubFactory),
+          routingTable("MessageRouter-RoutingTable"),
+          routingTableLock(),
+          threadPool("MessageRouter", maxThreads),
+          parentRouter(nullptr),
+          parentAddress(nullptr),
+          incomingAddress(incomingAddress),
+          messageQueue(messageQueue),
+          messageQueueCleanerTimer(),
+          runningParentResolves(new std::unordered_set<std::string>()),
+          accessController(nullptr),
+          securityManager(nullptr),
+          parentResolveMutex()
+{
+    messageQueueCleanerTimer.addTimer(
+            [this](Timer::TimerId) { this->messageQueue->removeOutdatedMessages(); },
+            [](Timer::TimerId) {},
+            1000,
+            true);
+
+    providerQos.setCustomParameters(std::vector<joynr::types::CustomParameter>());
+    providerQos.setProviderVersion(1);
+    providerQos.setPriority(1);
+    providerQos.setScope(joynr::types::ProviderScope::LOCAL);
+    providerQos.setSupportsOnChangeSubscriptions(false);
+}
+
+void MessageRouter::addProvisionedNextHop(
+        std::string participantId,
+        std::shared_ptr<joynr::system::RoutingTypes::Address> address)
+{
+    addToRoutingTable(participantId, address);
+}
+
+void MessageRouter::setAccessController(std::shared_ptr<IAccessController> accessController)
+{
+    assert(accessController);
+    this->accessController = accessController;
+}
+
+void MessageRouter::setParentRouter(
+        joynr::system::RoutingProxy* parentRouter,
+        std::shared_ptr<joynr::system::RoutingTypes::Address> parentAddress,
+        std::string parentParticipantId)
+{
+    this->parentRouter = parentRouter;
+    this->parentAddress = parentAddress;
+
+    // add the next hop to parent router
+    // this is necessary because during normal registration, the parent proxy is not yet set
+    addProvisionedNextHop(parentParticipantId, parentAddress);
+    addNextHopToParent(parentRouter->getProxyParticipantId());
+}
+
+bool MessageRouter::isChildMessageRouter()
+{
+    if (!incomingAddress) {
+        return false;
+    }
+    // if an incoming address is set, a parent message router is needed for correct configuration
+    return parentRouter != nullptr && parentAddress;
+}
+
+/**
+  * Q (RDZ): What happens if the message cannot be forwarded? Exception? Log file entry?
+  * Q (RDZ): When are messagingstubs removed? They are stored indefinitely in the factory
+  */
+void MessageRouter::route(const JoynrMessage& message)
+{
+    assert(messagingStubFactory != nullptr);
+    JoynrTimePoint now = std::chrono::time_point_cast<std::chrono::milliseconds>(
+            std::chrono::system_clock::now());
+    if (now > message.getHeaderExpiryDate()) {
+        JOYNR_LOG_WARN(logger,
+                       "Received expired message. Dropping the message (ID: {}).",
+                       message.getHeaderMessageId());
+        return;
+    }
+
+    // Validate the message if possible
+    if (securityManager != nullptr && !securityManager->validate(message)) {
+        JOYNR_LOG_ERROR(logger, "messageId {} failed validation", message.getHeaderMessageId());
+        return;
+    }
+
+    JOYNR_LOG_DEBUG(logger,
+                    "Route message with Id {} and payload {}",
+                    message.getHeaderMessageId(),
+                    message.getPayload());
+    // search for the destination address
+    const std::string destinationPartId = message.getHeaderTo();
+    std::shared_ptr<joynr::system::RoutingTypes::Address> destAddress(nullptr);
+
+    {
+        ReadLocker lock(routingTableLock);
+        destAddress = routingTable.lookup(destinationPartId);
+    }
+    // if destination address is not known
+    if (!destAddress) {
+        // save the message for later delivery
+        messageQueue->queueMessage(message);
+        JOYNR_LOG_DEBUG(logger, "message queued: {}", message.getPayload());
+
+        // and try to resolve destination address via parent message router
+        if (isChildMessageRouter()) {
+            std::lock_guard<std::mutex> lock(parentResolveMutex);
+            if (runningParentResolves->find(destinationPartId) == runningParentResolves->end()) {
+                runningParentResolves->insert(destinationPartId);
+                std::function<void(const bool&)> onSuccess = [this, destinationPartId](
+                        const bool& resolved) {
+                    if (resolved) {
+                        JOYNR_LOG_INFO(logger,
+                                       "Got destination address for participant {}",
+                                       destinationPartId);
+                        // save next hop in the routing table
+                        this->addProvisionedNextHop(destinationPartId, this->parentAddress);
+                        this->removeRunningParentResolvers(destinationPartId);
+                        this->sendMessages(destinationPartId, this->parentAddress);
+                    } else {
+                        JOYNR_LOG_ERROR(logger,
+                                        "Failed to resolve next hop for participant {}",
+                                        destinationPartId);
+                        // TODO error handling in case of failing submission (?)
+                    }
+                };
+
+                // TODO error handling in case of failing submission (?)
+                parentRouter->resolveNextHopAsync(destinationPartId, onSuccess);
+            }
+        } else {
+            // no parent message router to resolve destination address
+            JOYNR_LOG_WARN(logger,
+                           "No routing information found for destination participant ID \"{}\" "
+                           "so far. Waiting for participant registration. "
+                           "Queueing message (ID : {})",
+                           message.getHeaderTo(),
+                           message.getHeaderMessageId());
+        }
+        return;
+    }
+
+    if (accessController) {
+        // Access control checks are asynchronous, callback will send message
+        // if access is granted
+        std::shared_ptr<IAccessController::IHasConsumerPermissionCallback> callback(
+                new ConsumerPermissionCallback(*this, message, destAddress));
+        accessController->hasConsumerPermission(message, callback);
+        return;
+    }
+
+    // If this point is reached, the message can be sent without delay
+    sendMessage(message, destAddress);
+}
+
+void MessageRouter::removeRunningParentResolvers(const std::string& destinationPartId)
+{
+    std::lock_guard<std::mutex> lock(parentResolveMutex);
+    if (runningParentResolves->find(destinationPartId) != runningParentResolves->end()) {
+        runningParentResolves->erase(destinationPartId);
+    }
+}
+
+void MessageRouter::sendMessages(const std::string& destinationPartId,
+                                 std::shared_ptr<joynr::system::RoutingTypes::Address> address)
+{
+    while (true) {
+        MessageQueueItem* item = messageQueue->getNextMessageForParticipant(destinationPartId);
+        if (!item) {
+            break;
+        }
+        sendMessage(item->getContent(), address);
+        delete item;
+    }
+}
+
+void MessageRouter::sendMessage(const JoynrMessage& message,
+                                std::shared_ptr<joynr::system::RoutingTypes::Address> destAddress)
+{
+    auto stub = messagingStubFactory->create(*destAddress);
+    if (stub) {
+        threadPool.execute(new MessageRunnable(message, stub));
+    } else {
+        JOYNR_LOG_WARN(logger,
+                       "Messag with payload {}  could not be send to {}. Stub creation failed",
+                       message.getPayload(),
+                       (*destAddress).toString());
+    }
+}
+
+void MessageRouter::addNextHop(
+        const std::string& participantId,
+        const std::shared_ptr<joynr::system::RoutingTypes::Address>& inprocessAddress,
+        std::function<void()> onSuccess)
+{
+    addToRoutingTable(participantId, inprocessAddress);
+
+    addNextHopToParent(participantId, onSuccess);
+
+    sendMessages(participantId, inprocessAddress);
+}
+
+// inherited from joynr::system::RoutingProvider
+void MessageRouter::addNextHop(
+        const std::string& participantId,
+        const system::RoutingTypes::ChannelAddress& channelAddress,
+        std::function<void()> onSuccess,
+        std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
+{
+    auto address = std::make_shared<joynr::system::RoutingTypes::ChannelAddress>(channelAddress);
+    addToRoutingTable(participantId, address);
+
+    addNextHopToParent(participantId, onSuccess, onError);
+
+    sendMessages(participantId, address);
+}
+
+// inherited from joynr::system::RoutingProvider
+void MessageRouter::addNextHop(
+        const std::string& participantId,
+        const system::RoutingTypes::CommonApiDbusAddress& commonApiDbusAddress,
+        std::function<void()> onSuccess,
+        std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
+{
+    auto address = std::make_shared<joynr::system::RoutingTypes::CommonApiDbusAddress>(
+            commonApiDbusAddress);
+    addToRoutingTable(participantId, address);
+
+    addNextHopToParent(participantId, onSuccess, onError);
+
+    sendMessages(participantId, address);
+}
+
+// inherited from joynr::system::RoutingProvider
+void MessageRouter::addNextHop(
+        const std::string& participantId,
+        const system::RoutingTypes::AsyncIPCAddress& asyncIPCAddress,
+        std::function<void()> onSuccess,
+        std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
+{
+    auto address = std::make_shared<joynr::system::RoutingTypes::AsyncIPCAddress>(asyncIPCAddress);
+    addToRoutingTable(participantId, address);
+
+    addNextHopToParent(participantId, onSuccess, onError);
+
+    sendMessages(participantId, address);
+}
+
+// inherited from joynr::system::RoutingProvider
+void MessageRouter::addNextHop(
+        const std::string& participantId,
+        const system::RoutingTypes::BrowserAddress& browserAddress,
+        std::function<void()> onSuccess,
+        std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
+{
+    auto address = std::make_shared<joynr::system::RoutingTypes::BrowserAddress>(browserAddress);
+    addToRoutingTable(participantId, address);
+
+    addNextHopToParent(participantId, onSuccess, onError);
+
+    sendMessages(participantId, address);
+}
+
+// inherited from joynr::system::RoutingProvider
+void MessageRouter::addNextHop(
+        const std::string& participantId,
+        const system::RoutingTypes::WebSocketAddress& webSocketAddress,
+        std::function<void()> onSuccess,
+        std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
+{
+    auto address =
+            std::make_shared<joynr::system::RoutingTypes::WebSocketAddress>(webSocketAddress);
+    addToRoutingTable(participantId, address);
+
+    addNextHopToParent(participantId, onSuccess, onError);
+
+    sendMessages(participantId, address);
+}
+
+// inherited from joynr::system::RoutingProvider
+void MessageRouter::addNextHop(
+        const std::string& participantId,
+        const system::RoutingTypes::WebSocketClientAddress& webSocketClientAddress,
+        std::function<void()> onSuccess,
+        std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
+{
+    auto address = std::make_shared<joynr::system::RoutingTypes::WebSocketClientAddress>(
+            webSocketClientAddress);
+    addToRoutingTable(participantId, address);
+
+    addNextHopToParent(participantId, onSuccess, onError);
+
+    sendMessages(participantId, address);
+}
+
+void MessageRouter::addNextHopToParent(
+        std::string participantId,
+        std::function<void(void)> onSuccess,
+        std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
+{
+    std::function<void(const exceptions::JoynrException&)> onErrorWrapper = [onError](
+            const exceptions::JoynrException& error) {
+        if (onError) {
+            onError(joynr::exceptions::ProviderRuntimeException(error.getMessage()));
+        } else {
+            JOYNR_LOG_WARN(logger,
+                           "Unable to report error (received by calling "
+                           "parentRouter->addNextHopAsync), since onError function is "
+                           "empty. Error message: {}",
+                           error.getMessage());
+        }
+    };
+
+    // add to parent router
+    if (isChildMessageRouter()) {
+        if (auto channelAddress =
+                    std::dynamic_pointer_cast<joynr::system::RoutingTypes::ChannelAddress>(
+                            incomingAddress)) {
+            parentRouter->addNextHopAsync(
+                    participantId, *channelAddress, onSuccess, onErrorWrapper);
+        }
+        if (auto commonApiDbusAddress =
+                    std::dynamic_pointer_cast<joynr::system::RoutingTypes::CommonApiDbusAddress>(
+                            incomingAddress)) {
+            parentRouter->addNextHopAsync(
+                    participantId, *commonApiDbusAddress, onSuccess, onErrorWrapper);
+        }
+        if (auto asyncIPCAddress =
+                    std::dynamic_pointer_cast<joynr::system::RoutingTypes::AsyncIPCAddress>(
+                            incomingAddress)) {
+            parentRouter->addNextHopAsync(
+                    participantId, *asyncIPCAddress, onSuccess, onErrorWrapper);
+        }
+        if (auto browserAddress =
+                    std::dynamic_pointer_cast<joynr::system::RoutingTypes::BrowserAddress>(
+                            incomingAddress)) {
+            parentRouter->addNextHopAsync(
+                    participantId, *browserAddress, onSuccess, onErrorWrapper);
+        }
+        if (auto webSocketAddress =
+                    std::dynamic_pointer_cast<joynr::system::RoutingTypes::WebSocketAddress>(
+                            incomingAddress)) {
+            parentRouter->addNextHopAsync(
+                    participantId, *webSocketAddress, onSuccess, onErrorWrapper);
+        }
+        if (auto webSocketClientAddress =
+                    std::dynamic_pointer_cast<joynr::system::RoutingTypes::WebSocketClientAddress>(
+                            incomingAddress)) {
+            parentRouter->addNextHopAsync(
+                    participantId, *webSocketClientAddress, onSuccess, onErrorWrapper);
+        }
+    } else if (onSuccess) {
+        onSuccess();
+    }
+}
+
+void MessageRouter::addToRoutingTable(std::string participantId,
+                                      std::shared_ptr<joynr::system::RoutingTypes::Address> address)
+{
+    WriteLocker lock(routingTableLock);
+    routingTable.add(participantId, address);
+}
+
+// inherited from joynr::system::RoutingProvider
+void MessageRouter::removeNextHop(
+        const std::string& participantId,
+        std::function<void()> onSuccess,
+        std::function<void(const joynr::exceptions::ProviderRuntimeException&)> onError)
+{
+    {
+        WriteLocker lock(routingTableLock);
+        routingTable.remove(participantId);
+    }
+
+    std::function<void(const exceptions::JoynrException&)> onErrorWrapper = [onError](
+            const exceptions::JoynrException& error) {
+        onError(joynr::exceptions::ProviderRuntimeException(error.getMessage()));
+    };
+
+    // remove from parent router
+    if (isChildMessageRouter()) {
+        parentRouter->removeNextHopAsync(participantId, onSuccess, onErrorWrapper);
+    } else if (onSuccess) {
+        onSuccess();
+    }
+}
+
+// inherited from joynr::system::RoutingProvider
+void MessageRouter::resolveNextHop(
+        const std::string& participantId,
+        std::function<void(const bool& resolved)> onSuccess,
+        std::function<void(const joynr::exceptions::ProviderRuntimeException&)> /*onError*/)
+{
+    ReadLocker lock(routingTableLock);
+    bool resolved = routingTable.contains(participantId);
+    onSuccess(resolved);
+}
+
+/**
+ * IMPLEMENTATION of MessageRunnable class
+ */
+
+INIT_LOGGER(MessageRunnable);
+
+MessageRunnable::MessageRunnable(const JoynrMessage& message,
+                                 std::shared_ptr<IMessaging> messagingStub)
+        : Runnable(true),
+          ObjectWithDecayTime(message.getHeaderExpiryDate()),
+          message(message),
+          messagingStub(messagingStub)
+{
+}
+
+void MessageRunnable::shutdown()
+{
+}
+
+void MessageRunnable::run()
+{
+    if (!isExpired()) {
+        messagingStub->transmit(message);
+    } else {
+        JOYNR_LOG_ERROR(
+                logger, "Message with ID {}  expired: dropping!", message.getHeaderMessageId());
+    }
+}
+
+/**
+ * IMPLEMENTATION of ConsumerPermissionCallback class
+ */
+
+ConsumerPermissionCallback::ConsumerPermissionCallback(
+        MessageRouter& owningMessageRouter,
+        const JoynrMessage& message,
+        std::shared_ptr<system::RoutingTypes::Address> destination)
+        : owningMessageRouter(owningMessageRouter), message(message), destination(destination)
+{
+}
+
+void ConsumerPermissionCallback::hasConsumerPermission(bool hasPermission)
+{
+    if (hasPermission) {
+        owningMessageRouter.sendMessage(message, destination);
+    }
+}
+
+} // namespace joynr
diff --git a/cpp/libs/.gitignore b/cpp/libs/.gitignore
new file mode 100644
index 0000000..b440a00
--- /dev/null
+++ b/cpp/libs/.gitignore
@@ -0,0 +1,4 @@
+/CMakeFiles/
+/qjson-0.7.1/
+/Makefile
+/cmake_install.cmake
diff --git a/cpp/runtimes/CMakeLists.txt b/cpp/runtimes/CMakeLists.txt
index 1d92389..de2f60e 100644
--- a/cpp/runtimes/CMakeLists.txt
+++ b/cpp/runtimes/CMakeLists.txt
@@ -1,352 +1,425 @@
-message(STATUS "#############################################")
-message(STATUS "Configuring runtimes...")
-message(STATUS "#############################################\n")
-
-get_target_property(jsmn_PUBLIC_INCLUDE_DIRECTORY jsmn PUBLIC_INCLUDE_DIRECTORY)
-get_target_property(jsonserializer_PUBLIC_INCLUDE_DIRECTORY jsonserializer PUBLIC_INCLUDE_DIRECTORY)
-get_target_property(JoynrCommon_PUBLIC_INCLUDE_DIRECTORY JoynrCommon PUBLIC_INCLUDE_DIRECTORY)
-get_target_property(Joynr_PUBLIC_INCLUDE_DIRECTORY Joynr PUBLIC_INCLUDE_DIRECTORY)
-
-set(
-    runtime_PUBLIC_INCLUDE_DIRECTORY
-    "${CMAKE_CURRENT_SOURCE_DIR}/include"
-)
-set(
-    runtime_PUBLIC_INCLUDE_DIRECTORY
-    "${runtime_PUBLIC_INCLUDE_DIRECTORY}"
-    PARENT_SCOPE
-)
-
-file(
-    GLOB_RECURSE runtime_PUBLIC_HEADERS
-    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
-    "include/joynr/*.h"
-)
-
-set(
-    JoynrRuntime_INCLUDE_DIRECTORIES
-    ${runtime_PUBLIC_INCLUDE_DIRECTORY}
-    "../"
-    ${JoynrCommon_PUBLIC_INCLUDE_DIRECTORY}
-    ${jsmn_PUBLIC_INCLUDE_DIRECTORY}
-    ${Joynr_PUBLIC_INCLUDE_DIRECTORY}
-)
-
-if(${BUILD_CLUSTER_CONTROLLER})
-    get_target_property(JoynrClusterController_PUBLIC_INCLUDE_DIRECTORY JoynrClusterController PUBLIC_INCLUDE_DIRECTORY)
-    set(
-        JoynrClusterControllerRuntime_INCLUDE_DIRECTORIES
-        ${runtime_PUBLIC_INCLUDE_DIRECTORY}
-        "../"
-        ${JoynrCommon_PUBLIC_INCLUDE_DIRECTORY}
-        ${Joynr_PUBLIC_INCLUDE_DIRECTORY}
-        ${JoynrClusterController_PUBLIC_INCLUDE_DIRECTORY}
-    )
-
-    set(
-        JoynrClusterControllerRuntime_TARGET_LIBRARIES
-        JoynrCommon
-        Joynr
-        JoynrClusterController
-    )
-
-    set(
-        JoynrClusterControllerRuntime_EXPORT_HEADER
-        "include/joynr/JoynrClusterControllerRuntimeExport.h"
-    )
-
-    file(
-        GLOB JoynrClusterControllerRuntime_PRIVATE_HEADERS
-        RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
-        "*.h"
-        "cluster-controller-runtime/*.h"
-        "cluster-controller-runtime/websocket/*.h"
-    )
-
-    set(
-        JoynrClusterControllerRuntime_HEADERS
-        ${JoynrClusterControllerRuntime_PRIVATE_HEADERS}
-        ${runtime_PUBLIC_HEADERS}
-    )
-
-    file(
-        GLOB JoynrClusterControllerRuntime_SOURCES
-        RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
-        "*.cpp"
-        "cluster-controller-runtime/*.cpp"
-        "cluster-controller-runtime/websocket/*.cpp"
-    )
-
-    include_directories(
-        ${JoynrClusterControllerRuntime_INCLUDE_DIRECTORIES}
-    )
-
-    include_directories(
-        SYSTEM
-        ${Qt5WebSockets_INCLUDE_DIRS}
-        ${Qt5Core_INCLUDE_DIRS}
-    )
-
-    add_library(
-        JoynrClusterControllerRuntime
-        SHARED
-        ${JoynrClusterControllerRuntime_HEADERS}
-        ${JoynrClusterControllerRuntime_SOURCES}
-    )
-
-    AddClangFormat(JoynrClusterControllerRuntime)
-
-    AddIncludeWhatYouUse(JoynrClusterControllerRuntime)
-
-    AddClangTidy(JoynrClusterControllerRuntime)
-
-    set_target_properties(
-        JoynrClusterControllerRuntime
-        PROPERTIES
-        SOVERSION "${JOYNR_VERSION}"
-        VERSION "${JOYNR_VERSION}"
-        PUBLIC_INCLUDE_DIRECTORY "${runtime_PUBLIC_INCLUDE_DIRECTORY}"
-        AUTOMOC TRUE
-    )
-
-    generate_export_header(
-        JoynrClusterControllerRuntime
-        EXPORT_FILE_NAME "${CMAKE_CURRENT_SOURCE_DIR}/${JoynrClusterControllerRuntime_EXPORT_HEADER}"
-    )
-
-    target_link_libraries(
-        JoynrClusterControllerRuntime
-        ${JoynrClusterControllerRuntime_TARGET_LIBRARIES}
-        ${Qt5WebSockets_LIBRARIES}
-        ${Qt5Core_LIBRARIES}
-    )
-
-    install(
-        TARGETS JoynrClusterControllerRuntime
-        EXPORT JoynrTargets
-        RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
-        ARCHIVE DESTINATION "${INSTALL_LIB_DIR}" COMPONENT library
-        LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
-        # this will flatten directory hierarchy of header files
-        # PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}" COMPONENT dev
-    )
-endif(${BUILD_CLUSTER_CONTROLLER})
-
-
-# so we install header files manually to preserve directory hierarchy
-install(
-    DIRECTORY include/
-    DESTINATION "${INSTALL_INCLUDE_DIR}"
-    FILES_MATCHING PATTERN "*.h"
-)
-
-set(
-    JoynrRuntime_PRIVATE_HEADERS
-    "libjoynr-runtime/JoynrRuntimeExecutor.h"
-    "libjoynr-runtime/LibJoynrRuntime.h"
-)
-
-set(
-    JoynrRuntime_SOURCES
-    "libjoynr-runtime/JoynrRuntimeExecutor.cpp"
-    "libjoynr-runtime/LibJoynrRuntime.cpp"
-)
-
-# library for applications
-set(
-    JoynrRuntime_EXPORT_HEADER
-    "include/joynr/JoynrRuntimeExport.h"
-)
-
-#######################################################
-# build libraries and executable for WebSocket
-#######################################################
-
-set(
-    JoynrWsRuntime_PRIVATE_HEADERS
-    "libjoynr-runtime/websocket/LibJoynrWebSocketRuntime.h"
-    "libjoynr-runtime/websocket/JoynrWebSocketRuntimeExecutor.h"
-)
-
-set(
-    JoynrWsRuntime_SOURCES
-    "libjoynr-runtime/websocket/LibJoynrWebSocketRuntime.cpp"
-    "libjoynr-runtime/websocket/JoynrRuntime.cpp"
-    "libjoynr-runtime/websocket/JoynrWebSocketRuntimeExecutor.cpp"
-)
-
-include_directories(
-    ${JoynrRuntime_INCLUDE_DIRECTORIES}
-    ${libwebsockets_INCLUDE_DIRS}
-    ${jsonserializer_PUBLIC_INCLUDE_DIRECTORY}
-)
-
-add_library(
-    JoynrWsRuntime
-    SHARED
-    ${JoynrRuntime_PRIVATE_HEADERS}
-    ${JoynrRuntime_SOURCES}
-    ${JoynrWsRuntime_PRIVATE_HEADERS}
-    ${JoynrWsRuntime_SOURCES}
-)
-
-AddClangFormat(JoynrWsRuntime)
-
-AddIncludeWhatYouUse(JoynrWsRuntime)
-
-AddClangTidy(JoynrWsRuntime)
-
-target_link_libraries(
-    JoynrWsRuntime
-    JoynrCommon
-    Joynr
-    jsonserializer
-)
-
-generate_export_header(
-    JoynrWsRuntime
-    EXPORT_FILE_NAME "${CMAKE_CURRENT_SOURCE_DIR}/${JoynrRuntime_EXPORT_HEADER}"
-)
-
-set_target_properties(
-    JoynrWsRuntime
-    PROPERTIES
-    SOVERSION "${JOYNR_VERSION}"
-    VERSION "${JOYNR_VERSION}"
-    PUBLIC_INCLUDE_DIRECTORY "${runtime_PUBLIC_INCLUDE_DIRECTORY}"
-)
-
-install(
-    TARGETS JoynrWsRuntime
-    EXPORT JoynrTargets
-    RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
-    ARCHIVE DESTINATION "${INSTALL_LIB_DIR}" COMPONENT library
-    LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
-    # this will flatten directory hierarchy of header files
-    # PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}" COMPONENT dev
-)
-# so we install header files manually to preserve directory hierarchy
-install(
-    DIRECTORY include/
-    DESTINATION "${INSTALL_INCLUDE_DIR}"
-    FILES_MATCHING PATTERN "*.h"
-)
-
-#######################################################
-# build libraries and executable for dbus common api
-#######################################################
-
-if(${USE_DBUS_COMMONAPI_COMMUNICATION})
-    set(
-        JoynrDbusRuntime_PRIVATE_HEADERS
-        "libjoynr-runtime/dbus/LibJoynrDbusRuntime.h"
-        "libjoynr-runtime/dbus/JoynrDbusRuntimeExecutor.h"
-    )
-
-    set(
-        JoynrDbusRuntime_SOURCES
-        "libjoynr-runtime/dbus/LibJoynrDbusRuntime.cpp"
-        "libjoynr-runtime/dbus/JoynrRuntime.cpp"
-        "libjoynr-runtime/dbus/JoynrDbusRuntimeExecutor.cpp"
-    )
-
-    get_target_property(common_api_PUBLIC_INCLUDE_DIRECTORY JoynrCommonAPI PUBLIC_INCLUDE_DIRECTORY)
-    list(
-        APPEND JoynrRuntime_INCLUDE_DIRECTORIES
-        ${common_api_PUBLIC_INCLUDE_DIRECTORY}
-    )
-
-    include_directories(
-        ${JoynrRuntime_INCLUDE_DIRECTORIES}
-    )
-
-    add_library(
-        JoynrDbusRuntime
-        SHARED
-        ${JoynrRuntime_HEADERS}
-        ${JoynrRuntime_SOURCES}
-        ${JoynrDbusRuntime_PRIVATE_HEADERS}
-        ${JoynrDbusRuntime_SOURCES}
-    )
-
-    AddClangFormat(JoynrDbusRuntime)
-
-    AddIncludeWhatYouUse(JoynrDbusRuntime)
-
-    AddClangTidy(JoynrDbusRuntime)
-
-    target_link_libraries(
-        JoynrDbusRuntime
-        JoynrCommon
-        Joynr
-    )
-
-    generate_export_header(
-        JoynrDbusRuntime
-        EXPORT_FILE_NAME "${CMAKE_CURRENT_SOURCE_DIR}/${JoynrRuntime_EXPORT_HEADER}"
-    )
-
-    set_target_properties(
-        JoynrDbusRuntime
-        PROPERTIES
-        SOVERSION "${JOYNR_VERSION}"
-        VERSION "${JOYNR_VERSION}"
-        PUBLIC_INCLUDE_DIRECTORY "${runtime_PUBLIC_INCLUDE_DIRECTORY}"
-    )
-
-    install(
-        TARGETS JoynrDbusRuntime
-        EXPORT JoynrTargets
-        RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
-        LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
-        # this will flatten directory hierarchy of header files
-        # PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}" COMPONENT dev
-    )
-    # so we install header files manually to preserve directory hierarchy
-    install(
-        DIRECTORY include/
-        DESTINATION "${INSTALL_INCLUDE_DIR}"
-        FILES_MATCHING PATTERN "*.h"
-    )
-endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
-
-
-if(${BUILD_CLUSTER_CONTROLLER})
-    #executable to start the cluster controller
-    set(
-        cluster-controller_HEADERS
-    )
-
-    set(
-        cluster-controller_SOURCES
-        StartClusterController.cpp
-    )
-
-    add_executable(
-        cluster-controller
-        ${cluster-controller_HEADERS}
-        ${cluster-controller_SOURCES}
-    )
-
-    AddClangFormat(cluster-controller)
-
-    AddClangTidy(cluster-controller)
-
-    if(${USE_DBUS_COMMONAPI_COMMUNICATION})
-        target_link_libraries(cluster-controller
-            ${DBUS1_LIBRARIES}
-            ${COMMONAPI_DBUS_LIBRARIES}
-            ${COMMONAPI_LIBRARIES}
-        )
-    endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
-
-    target_link_libraries(cluster-controller
-        JoynrClusterControllerRuntime
-    )
-
-    install(
-        TARGETS cluster-controller
-        RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
-        LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
-    )
-endif(${BUILD_CLUSTER_CONTROLLER})
+message(STATUS "#############################################")
+message(STATUS "Configuring runtimes...")
+message(STATUS "#############################################\n")
+
+get_target_property(jsmn_PUBLIC_INCLUDE_DIRECTORY jsmn PUBLIC_INCLUDE_DIRECTORY)
+get_target_property(jsonserializer_PUBLIC_INCLUDE_DIRECTORY jsonserializer PUBLIC_INCLUDE_DIRECTORY)
+get_target_property(JoynrCommon_PUBLIC_INCLUDE_DIRECTORY JoynrCommon PUBLIC_INCLUDE_DIRECTORY)
+get_target_property(Joynr_PUBLIC_INCLUDE_DIRECTORY Joynr PUBLIC_INCLUDE_DIRECTORY)
+
+set(
+    runtime_PUBLIC_INCLUDE_DIRECTORY
+    "${CMAKE_CURRENT_SOURCE_DIR}/include"
+)
+set(
+    runtime_PUBLIC_INCLUDE_DIRECTORY
+    "${runtime_PUBLIC_INCLUDE_DIRECTORY}"
+    PARENT_SCOPE
+)
+
+file(
+    GLOB_RECURSE runtime_PUBLIC_HEADERS
+    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+    "include/joynr/*.h"
+)
+
+set(
+    JoynrRuntime_INCLUDE_DIRECTORIES
+    ${runtime_PUBLIC_INCLUDE_DIRECTORY}
+    "../"
+    ${JoynrCommon_PUBLIC_INCLUDE_DIRECTORY}
+    ${jsmn_PUBLIC_INCLUDE_DIRECTORY}
+    ${Joynr_PUBLIC_INCLUDE_DIRECTORY}
+)
+
+if(${BUILD_CLUSTER_CONTROLLER})
+    get_target_property(JoynrClusterController_PUBLIC_INCLUDE_DIRECTORY JoynrClusterController PUBLIC_INCLUDE_DIRECTORY)
+    set(
+        JoynrClusterControllerRuntime_INCLUDE_DIRECTORIES
+        ${runtime_PUBLIC_INCLUDE_DIRECTORY}
+        "../"
+        ${JoynrCommon_PUBLIC_INCLUDE_DIRECTORY}
+        ${Joynr_PUBLIC_INCLUDE_DIRECTORY}
+        ${JoynrClusterController_PUBLIC_INCLUDE_DIRECTORY}
+    )
+
+    set(
+        JoynrClusterControllerRuntime_TARGET_LIBRARIES
+        JoynrCommon
+        Joynr
+        JoynrClusterController
+    )
+
+    set(
+        JoynrClusterControllerRuntime_EXPORT_HEADER
+        "include/joynr/JoynrClusterControllerRuntimeExport.h"
+    )
+
+    file(
+        GLOB JoynrClusterControllerRuntime_PRIVATE_HEADERS
+        RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+        "*.h"
+        "cluster-controller-runtime/*.h"
+        "cluster-controller-runtime/websocket/*.h"
+    )
+
+    set(
+        JoynrClusterControllerRuntime_HEADERS
+        ${JoynrClusterControllerRuntime_PRIVATE_HEADERS}
+        ${runtime_PUBLIC_HEADERS}
+    )
+
+    file(
+        GLOB JoynrClusterControllerRuntime_SOURCES
+        RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+        "*.cpp"
+        "cluster-controller-runtime/*.cpp"
+        "cluster-controller-runtime/websocket/*.cpp"
+    )
+
+    include_directories(
+        ${JoynrClusterControllerRuntime_INCLUDE_DIRECTORIES}
+    )
+
+    include_directories(
+        SYSTEM
+        ${Qt5WebSockets_INCLUDE_DIRS}
+        ${Qt5Core_INCLUDE_DIRS}
+    )
+
+    add_library(
+        JoynrClusterControllerRuntime
+        SHARED
+        ${JoynrClusterControllerRuntime_HEADERS}
+        ${JoynrClusterControllerRuntime_SOURCES}
+    )
+
+    AddClangFormat(JoynrClusterControllerRuntime)
+
+    AddIncludeWhatYouUse(JoynrClusterControllerRuntime)
+
+    AddClangTidy(JoynrClusterControllerRuntime)
+
+    set_target_properties(
+        JoynrClusterControllerRuntime
+        PROPERTIES
+        SOVERSION "${JOYNR_VERSION}"
+        VERSION "${JOYNR_VERSION}"
+        PUBLIC_INCLUDE_DIRECTORY "${runtime_PUBLIC_INCLUDE_DIRECTORY}"
+        AUTOMOC TRUE
+    )
+
+    generate_export_header(
+        JoynrClusterControllerRuntime
+        EXPORT_FILE_NAME "${CMAKE_CURRENT_SOURCE_DIR}/${JoynrClusterControllerRuntime_EXPORT_HEADER}"
+    )
+
+    target_link_libraries(
+        JoynrClusterControllerRuntime
+        ${JoynrClusterControllerRuntime_TARGET_LIBRARIES}
+        ${Qt5WebSockets_LIBRARIES}
+        ${Qt5Core_LIBRARIES}
+    )
+
+    install(
+        TARGETS JoynrClusterControllerRuntime
+        EXPORT JoynrTargets
+        RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
+        ARCHIVE DESTINATION "${INSTALL_LIB_DIR}" COMPONENT library
+        LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
+        # this will flatten directory hierarchy of header files
+        # PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}" COMPONENT dev
+    )
+endif(${BUILD_CLUSTER_CONTROLLER})
+
+
+# so we install header files manually to preserve directory hierarchy
+install(
+    DIRECTORY include/
+    DESTINATION "${INSTALL_INCLUDE_DIR}"
+    FILES_MATCHING PATTERN "*.h"
+)
+
+set(
+    JoynrRuntime_PRIVATE_HEADERS
+    "libjoynr-runtime/JoynrRuntimeExecutor.h"
+    "libjoynr-runtime/LibJoynrRuntime.h"
+)
+
+set(
+    JoynrRuntime_SOURCES
+    "libjoynr-runtime/JoynrRuntimeExecutor.cpp"
+    "libjoynr-runtime/LibJoynrRuntime.cpp"
+)
+
+# library for applications
+set(
+    JoynrRuntime_EXPORT_HEADER
+    "include/joynr/JoynrRuntimeExport.h"
+)
+
+#######################################################
+# build libraries and executable for WebSocket
+#######################################################
+
+set(
+    JoynrWsRuntime_PRIVATE_HEADERS
+    "libjoynr-runtime/websocket/LibJoynrWebSocketRuntime.h"
+    "libjoynr-runtime/websocket/JoynrWebSocketRuntimeExecutor.h"
+)
+
+set(
+    JoynrWsRuntime_SOURCES
+    "libjoynr-runtime/websocket/LibJoynrWebSocketRuntime.cpp"
+    "libjoynr-runtime/websocket/JoynrRuntime.cpp"
+    "libjoynr-runtime/websocket/JoynrWebSocketRuntimeExecutor.cpp"
+)
+
+include_directories(
+    ${JoynrRuntime_INCLUDE_DIRECTORIES}
+    ${libwebsockets_INCLUDE_DIRS}
+    ${jsonserializer_PUBLIC_INCLUDE_DIRECTORY}
+)
+
+add_library(
+    JoynrWsRuntime
+    SHARED
+    ${JoynrRuntime_PRIVATE_HEADERS}
+    ${JoynrRuntime_SOURCES}
+    ${JoynrWsRuntime_PRIVATE_HEADERS}
+    ${JoynrWsRuntime_SOURCES}
+)
+
+AddClangFormat(JoynrWsRuntime)
+
+AddIncludeWhatYouUse(JoynrWsRuntime)
+
+AddClangTidy(JoynrWsRuntime)
+
+target_link_libraries(
+    JoynrWsRuntime
+    JoynrCommon
+    Joynr
+    jsonserializer
+)
+
+generate_export_header(
+    JoynrWsRuntime
+    EXPORT_FILE_NAME "${CMAKE_CURRENT_SOURCE_DIR}/${JoynrRuntime_EXPORT_HEADER}"
+)
+
+set_target_properties(
+    JoynrWsRuntime
+    PROPERTIES
+    SOVERSION "${JOYNR_VERSION}"
+    VERSION "${JOYNR_VERSION}"
+    PUBLIC_INCLUDE_DIRECTORY "${runtime_PUBLIC_INCLUDE_DIRECTORY}"
+)
+
+install(
+    TARGETS JoynrWsRuntime
+    EXPORT JoynrTargets
+    RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
+    ARCHIVE DESTINATION "${INSTALL_LIB_DIR}" COMPONENT library
+    LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
+    # this will flatten directory hierarchy of header files
+    # PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}" COMPONENT dev
+)
+# so we install header files manually to preserve directory hierarchy
+install(
+    DIRECTORY include/
+    DESTINATION "${INSTALL_INCLUDE_DIR}"
+    FILES_MATCHING PATTERN "*.h"
+)
+
+#######################################################
+# build libraries and executable for AsyncIPC
+#######################################################
+
+set(
+    JoynrAsyncIPCRuntime_PRIVATE_HEADERS
+    "libjoynr-runtime/asyncipc/LibJoynrAsyncIPCRuntime.h"
+    "libjoynr-runtime/asyncipc/JoynrAsyncIPCRuntimeExecutor.h"
+)
+
+set(
+    JoynrAsyncIPCRuntime_SOURCES
+    "libjoynr-runtime/asyncipc/LibJoynrAsyncIPCRuntime.cpp"
+    "libjoynr-runtime/asyncipc/JoynrRuntime.cpp"
+    "libjoynr-runtime/asyncipc/JoynrAsyncIPCRuntimeExecutor.cpp"
+)
+
+include_directories(
+    ${JoynrRuntime_INCLUDE_DIRECTORIES}
+    ${jsonserializer_PUBLIC_INCLUDE_DIRECTORY}
+)
+
+add_library(
+    JoynrAsyncIPCRuntime
+    SHARED
+    ${JoynrRuntime_PRIVATE_HEADERS}
+    ${JoynrRuntime_SOURCES}
+    ${JoynrAsyncIPCRuntime_PRIVATE_HEADERS}
+    ${JoynrAsyncIPCRuntime_SOURCES}
+)
+
+AddClangFormat(JoynrAsyncIPCRuntime)
+
+AddIncludeWhatYouUse(JoynrAsyncIPCRuntime)
+
+AddClangTidy(JoynrAsyncIPCRuntime)
+
+target_link_libraries(
+    JoynrAsyncIPCRuntime
+    JoynrCommon
+    Joynr
+    jsonserializer
+)
+
+generate_export_header(
+    JoynrAsyncIPCRuntime
+    EXPORT_FILE_NAME "${CMAKE_CURRENT_SOURCE_DIR}/${JoynrRuntime_EXPORT_HEADER}"
+)
+
+set_target_properties(
+    JoynrAsyncIPCRuntime
+    PROPERTIES
+    SOVERSION "${JOYNR_VERSION}"
+    VERSION "${JOYNR_VERSION}"
+    PUBLIC_INCLUDE_DIRECTORY "${runtime_PUBLIC_INCLUDE_DIRECTORY}"
+)
+
+install(
+    TARGETS JoynrAsyncIPCRuntime
+    EXPORT JoynrTargets
+    RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
+    ARCHIVE DESTINATION "${INSTALL_LIB_DIR}" COMPONENT library
+    LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
+    # this will flatten directory hierarchy of header files
+    # PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}" COMPONENT dev
+)
+# so we install header files manually to preserve directory hierarchy
+install(
+    DIRECTORY include/
+    DESTINATION "${INSTALL_INCLUDE_DIR}"
+    FILES_MATCHING PATTERN "*.h"
+)
+
+#######################################################
+# build libraries and executable for dbus common api
+#######################################################
+
+if(${USE_DBUS_COMMONAPI_COMMUNICATION})
+    set(
+        JoynrDbusRuntime_PRIVATE_HEADERS
+        "libjoynr-runtime/dbus/LibJoynrDbusRuntime.h"
+        "libjoynr-runtime/dbus/JoynrDbusRuntimeExecutor.h"
+    )
+
+    set(
+        JoynrDbusRuntime_SOURCES
+        "libjoynr-runtime/dbus/LibJoynrDbusRuntime.cpp"
+        "libjoynr-runtime/dbus/JoynrRuntime.cpp"
+        "libjoynr-runtime/dbus/JoynrDbusRuntimeExecutor.cpp"
+    )
+
+    get_target_property(common_api_PUBLIC_INCLUDE_DIRECTORY JoynrCommonAPI PUBLIC_INCLUDE_DIRECTORY)
+    list(
+        APPEND JoynrRuntime_INCLUDE_DIRECTORIES
+        ${common_api_PUBLIC_INCLUDE_DIRECTORY}
+    )
+
+    include_directories(
+        ${JoynrRuntime_INCLUDE_DIRECTORIES}
+    )
+
+    add_library(
+        JoynrDbusRuntime
+        SHARED
+        ${JoynrRuntime_HEADERS}
+        ${JoynrRuntime_SOURCES}
+        ${JoynrDbusRuntime_PRIVATE_HEADERS}
+        ${JoynrDbusRuntime_SOURCES}
+    )
+
+    AddClangFormat(JoynrDbusRuntime)
+
+    AddIncludeWhatYouUse(JoynrDbusRuntime)
+
+    AddClangTidy(JoynrDbusRuntime)
+
+    target_link_libraries(
+        JoynrDbusRuntime
+        JoynrCommon
+        Joynr
+    )
+
+    generate_export_header(
+        JoynrDbusRuntime
+        EXPORT_FILE_NAME "${CMAKE_CURRENT_SOURCE_DIR}/${JoynrRuntime_EXPORT_HEADER}"
+    )
+
+    set_target_properties(
+        JoynrDbusRuntime
+        PROPERTIES
+        SOVERSION "${JOYNR_VERSION}"
+        VERSION "${JOYNR_VERSION}"
+        PUBLIC_INCLUDE_DIRECTORY "${runtime_PUBLIC_INCLUDE_DIRECTORY}"
+    )
+
+    install(
+        TARGETS JoynrDbusRuntime
+        EXPORT JoynrTargets
+        RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
+        LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
+        # this will flatten directory hierarchy of header files
+        # PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}" COMPONENT dev
+    )
+    # so we install header files manually to preserve directory hierarchy
+    install(
+        DIRECTORY include/
+        DESTINATION "${INSTALL_INCLUDE_DIR}"
+        FILES_MATCHING PATTERN "*.h"
+    )
+endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
+
+
+if(${BUILD_CLUSTER_CONTROLLER})
+    #executable to start the cluster controller
+    set(
+        cluster-controller_HEADERS
+    )
+
+    set(
+        cluster-controller_SOURCES
+        StartClusterController.cpp
+    )
+
+    add_executable(
+        cluster-controller
+        ${cluster-controller_HEADERS}
+        ${cluster-controller_SOURCES}
+    )
+
+    AddClangFormat(cluster-controller)
+
+    AddClangTidy(cluster-controller)
+
+    if(${USE_DBUS_COMMONAPI_COMMUNICATION})
+        target_link_libraries(cluster-controller
+            ${DBUS1_LIBRARIES}
+            ${COMMONAPI_DBUS_LIBRARIES}
+            ${COMMONAPI_LIBRARIES}
+        )
+    endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
+
+    target_link_libraries(cluster-controller
+        JoynrClusterControllerRuntime
+    )
+
+    install(
+        TARGETS cluster-controller
+        RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
+        LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
+    )
+endif(${BUILD_CLUSTER_CONTROLLER})
diff --git a/cpp/runtimes/cluster-controller-runtime/JoynrClusterControllerRuntime.cpp b/cpp/runtimes/cluster-controller-runtime/JoynrClusterControllerRuntime.cpp
index 92bb70f..b7ca8ce 100644
--- a/cpp/runtimes/cluster-controller-runtime/JoynrClusterControllerRuntime.cpp
+++ b/cpp/runtimes/cluster-controller-runtime/JoynrClusterControllerRuntime.cpp
@@ -1,460 +1,477 @@
-/*
- * #%L
- * %%
- * Copyright (C) 2011 - 2015 BMW Car IT GmbH
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * #L%
- */
-#include "JoynrClusterControllerRuntime.h"
-#include "joynr/Dispatcher.h"
-#include "libjoynr/in-process/InProcessLibJoynrMessagingSkeleton.h"
-#include "cluster-controller/http-communication-manager/HttpReceiver.h"
-#include "cluster-controller/http-communication-manager/HttpSender.h"
-#include "joynr/MessagingSettings.h"
-#include "cluster-controller/capabilities-client/CapabilitiesClient.h"
-#include "joynr/CapabilitiesRegistrar.h"
-#include "joynr/LocalCapabilitiesDirectory.h"
-#include "joynr/InProcessDispatcher.h"
-#include "joynr/ConnectorFactory.h"
-#include "joynr/SubscriptionManager.h"
-#include "joynr/PublicationManager.h"
-#include "joynr/InProcessConnectorFactory.h"
-#include "joynr/JoynrMessagingConnectorFactory.h"
-#include "joynr/MessagingStubFactory.h"
-#include "joynr/InProcessMessagingAddress.h"
-#include "joynr/InProcessPublicationSender.h"
-#include "joynr/JoynrMessageSender.h"
-#include "joynr/infrastructure/GlobalCapabilitiesDirectoryProxy.h"
-#include "joynr/LocalChannelUrlDirectory.h"
-#include "joynr/system/RoutingTypes/ChannelAddress.h"
-#include "libjoynr/in-process/InProcessMessagingStubFactory.h"
-#include "cluster-controller/messaging/joynr-messaging/JoynrMessagingStubFactory.h"
-#include "libjoynr/websocket/WebSocketMessagingStubFactory.h"
-#include "websocket/WebSocketCcMessagingSkeleton.h"
-#include "joynr/LocalDiscoveryAggregator.h"
-#include "libjoynr/joynr-messaging/DummyPlatformSecurityManager.h"
-#include "joynr/TypeUtil.h"
-#include "joynr/Settings.h"
-#include "joynr/LibjoynrSettings.h"
-
-#include "joynr/system/RoutingTypes/WebSocketAddress.h"
-
-#include "joynr/system/DiscoveryRequestCaller.h"
-#include "joynr/system/DiscoveryInProcessConnector.h"
-#include <QCoreApplication>
-#include <QThread>
-#include <cassert>
-
-#ifdef USE_DBUS_COMMONAPI_COMMUNICATION
-#include "libjoynr/dbus/DbusMessagingStubFactory.h"
-#endif // USE_DBUS_COMMONAPI_COMMUNICATION
-
-namespace joynr
-{
-
-INIT_LOGGER(JoynrClusterControllerRuntime);
-
-JoynrClusterControllerRuntime::JoynrClusterControllerRuntime(QCoreApplication* app,
-                                                             Settings* settings,
-                                                             IMessageReceiver* messageReceiver,
-                                                             IMessageSender* messageSender)
-        : JoynrRuntime(*settings),
-          joynrDispatcher(nullptr),
-          inProcessDispatcher(nullptr),
-          ccDispatcher(nullptr),
-          subscriptionManager(nullptr),
-          joynrMessagingSendSkeleton(nullptr),
-          joynrMessageSender(nullptr),
-          app(app),
-          capabilitiesClient(nullptr),
-          localCapabilitiesDirectory(nullptr),
-          channelUrlDirectory(),
-          cache(),
-          channelUrlDirectoryProxy(nullptr),
-          libJoynrMessagingSkeleton(nullptr),
-          messageReceiver(messageReceiver),
-          messageSender(messageSender),
-          dispatcherList(),
-          inProcessConnectorFactory(nullptr),
-          inProcessPublicationSender(nullptr),
-          joynrMessagingConnectorFactory(nullptr),
-          connectorFactory(nullptr),
-          settings(settings),
-          messagingSettings(nullptr),
-          libjoynrSettings(nullptr),
-#ifdef USE_DBUS_COMMONAPI_COMMUNICATION
-          dbusSettings(nullptr),
-          ccDbusMessageRouterAdapter(nullptr),
-#endif // USE_DBUS_COMMONAPI_COMMUNICATION
-          wsSettings(*settings),
-          wsCcMessagingSkeleton(nullptr),
-          securityManager(nullptr),
-          messagingIsRunning(false)
-{
-    initializeAllDependencies();
-}
-
-void JoynrClusterControllerRuntime::initializeAllDependencies()
-{
-    /**
-      * libjoynr side skeleton & dispatcher
-      * This needs some preparation of libjoynr and clustercontroller parts.
-      */
-    messagingSettings = new MessagingSettings(*settings);
-    messagingSettings->printSettings();
-    libjoynrSettings = new LibjoynrSettings(*settings);
-    libjoynrSettings->printSettings();
-    wsSettings.printSettings();
-
-    // Initialise security manager
-    securityManager = new DummyPlatformSecurityManager();
-
-    // CAREFUL: the factory creates an old style dispatcher, not the new one!
-
-    inProcessDispatcher = new InProcessDispatcher();
-    /* CC */
-    // create the messaging stub factory
-    MessagingStubFactory* messagingStubFactory = new MessagingStubFactory();
-#ifdef USE_DBUS_COMMONAPI_COMMUNICATION
-    messagingStubFactory->registerStubFactory(new DbusMessagingStubFactory());
-#endif // USE_DBUS_COMMONAPI_COMMUNICATION
-    messagingStubFactory->registerStubFactory(new InProcessMessagingStubFactory());
-    // init message router
-    messageRouter = std::shared_ptr<MessageRouter>(
-            new MessageRouter(messagingStubFactory, securityManager));
-    // provision global capabilities directory
-    std::shared_ptr<joynr::system::RoutingTypes::Address> globalCapabilitiesDirectoryAddress(
-            new system::RoutingTypes::ChannelAddress(
-                    messagingSettings->getCapabilitiesDirectoryChannelId()));
-    messageRouter->addProvisionedNextHop(messagingSettings->getCapabilitiesDirectoryParticipantId(),
-                                         globalCapabilitiesDirectoryAddress);
-    // provision channel url directory
-    std::shared_ptr<joynr::system::RoutingTypes::Address> globalChannelUrlDirectoryAddress(
-            new system::RoutingTypes::ChannelAddress(
-                    messagingSettings->getChannelUrlDirectoryChannelId()));
-    messageRouter->addProvisionedNextHop(messagingSettings->getChannelUrlDirectoryParticipantId(),
-                                         globalChannelUrlDirectoryAddress);
-
-    // setup CC WebSocket interface
-    WebSocketMessagingStubFactory* wsMessagingStubFactory = new WebSocketMessagingStubFactory();
-    messagingStubFactory->registerStubFactory(wsMessagingStubFactory);
-    system::RoutingTypes::WebSocketAddress wsAddress =
-            wsSettings.createClusterControllerMessagingAddress();
-
-    wsCcMessagingSkeleton =
-            new WebSocketCcMessagingSkeleton(*messageRouter, *wsMessagingStubFactory, wsAddress);
-
-    /* LibJoynr */
-    assert(messageRouter);
-    joynrMessageSender = new JoynrMessageSender(messageRouter);
-    joynrDispatcher = new Dispatcher(joynrMessageSender);
-    joynrMessageSender->registerDispatcher(joynrDispatcher);
-
-    /* CC */
-    // TODO: libjoynrmessagingskeleton now uses the Dispatcher, should it use the
-    // InprocessDispatcher?
-    libJoynrMessagingSkeleton = std::shared_ptr<InProcessMessagingSkeleton>(
-            new InProcessLibJoynrMessagingSkeleton(joynrDispatcher));
-    // EndpointAddress to messagingStub is transmitted when a provider is registered
-    // messagingStubFactory->registerInProcessMessagingSkeleton(libJoynrMessagingSkeleton);
-
-    /**
-      * ClusterController side
-      *
-      */
-    if (!messageReceiver) {
-        JOYNR_LOG_INFO(
-                logger,
-                "The message receiver supplied is NULL, creating the default MessageReceiver");
-        messageReceiver = std::shared_ptr<IMessageReceiver>(
-                new HttpReceiver(*messagingSettings, messageRouter));
-    }
-
-    std::string channelId = messageReceiver->getReceiveChannelId();
-
-    // create message sender
-    if (!messageSender) {
-        JOYNR_LOG_INFO(
-                logger, "The message sender supplied is NULL, creating the default MessageSender");
-        messageSender = std::shared_ptr<IMessageSender>(new HttpSender(
-                messagingSettings->getBounceProxyUrl(),
-                std::chrono::milliseconds(messagingSettings->getSendMsgMaxTtl()),
-                std::chrono::milliseconds(messagingSettings->getSendMsgRetryInterval())));
-    }
-    messagingStubFactory->registerStubFactory(
-            new JoynrMessagingStubFactory(messageSender, messageReceiver->getReceiveChannelId()));
-
-    // joynrMessagingSendSkeleton = new DummyClusterControllerMessagingSkeleton(messageRouter);
-    // ccDispatcher = DispatcherFactory::createDispatcherInSameThread(messagingSettings);
-
-    // we currently have to use the fake client, because JAVA side is not yet working for
-    // CapabilitiesServer.
-    bool usingRealCapabilitiesClient =
-            /*when switching this to true, turn on the UUID in systemintegrationtests again*/ true;
-    capabilitiesClient = new CapabilitiesClient(channelId); // ownership of this is not transferred
-    // try using the real capabilitiesClient again:
-    // capabilitiesClient = new CapabilitiesClient(channelId);// ownership of this is not
-    // transferred
-
-    localCapabilitiesDirectory = std::make_shared<LocalCapabilitiesDirectory>(
-            *messagingSettings, capabilitiesClient, *messageRouter);
-#ifdef USE_DBUS_COMMONAPI_COMMUNICATION
-    dbusSettings = new DbusSettings(*settings);
-    dbusSettings->printSettings();
-    // register dbus skeletons for capabilities and messaging interfaces
-    std::string ccMessagingAddress(dbusSettings->createClusterControllerMessagingAddressString());
-    ccDbusMessageRouterAdapter = new DBusMessageRouterAdapter(*messageRouter, ccMessagingAddress);
-#endif // USE_DBUS_COMMONAPI_COMMUNICATION
-
-    /**
-      * libJoynr side
-      *
-      */
-    publicationManager = new PublicationManager();
-    subscriptionManager = new SubscriptionManager();
-    inProcessPublicationSender = new InProcessPublicationSender(subscriptionManager);
-    std::shared_ptr<joynr::system::RoutingTypes::Address> libjoynrMessagingAddress(
-            new InProcessMessagingAddress(libJoynrMessagingSkeleton));
-    // subscriptionManager = new SubscriptionManager(...)
-    inProcessConnectorFactory = new InProcessConnectorFactory(
-            subscriptionManager,
-            publicationManager,
-            inProcessPublicationSender,
-            dynamic_cast<IRequestCallerDirectory*>(inProcessDispatcher));
-    joynrMessagingConnectorFactory =
-            new JoynrMessagingConnectorFactory(joynrMessageSender, subscriptionManager);
-
-    connectorFactory =
-            createConnectorFactory(inProcessConnectorFactory, joynrMessagingConnectorFactory);
-
-    proxyFactory = new ProxyFactory(libjoynrMessagingAddress, connectorFactory, &cache);
-
-    dispatcherList.push_back(joynrDispatcher);
-    dispatcherList.push_back(inProcessDispatcher);
-
-    // Set up the persistence file for storing provider participant ids
-    std::string persistenceFilename = libjoynrSettings->getParticipantIdsPersistenceFilename();
-    participantIdStorage =
-            std::shared_ptr<ParticipantIdStorage>(new ParticipantIdStorage(persistenceFilename));
-
-    dispatcherAddress = libjoynrMessagingAddress;
-    discoveryProxy = new LocalDiscoveryAggregator(
-            *dynamic_cast<IRequestCallerDirectory*>(inProcessDispatcher), systemServicesSettings);
-
-    std::string discoveryProviderParticipantId(
-            systemServicesSettings.getCcDiscoveryProviderParticipantId());
-    std::shared_ptr<RequestCaller> discoveryRequestCaller(
-            new joynr::system::DiscoveryRequestCaller(localCapabilitiesDirectory));
-    std::shared_ptr<InProcessAddress> discoveryProviderAddress(
-            new InProcessAddress(discoveryRequestCaller));
-    joynr::system::DiscoveryInProcessConnector* discoveryInProcessConnector =
-            InProcessConnectorFactoryHelper<joynr::system::IDiscoveryConnector>().create(
-                    subscriptionManager,
-                    publicationManager,
-                    inProcessPublicationSender,
-                    std::string(), // can be ignored
-                    discoveryProviderParticipantId,
-                    discoveryProviderAddress);
-
-    discoveryProxy->setDiscoveryProxy(discoveryInProcessConnector);
-
-    capabilitiesRegistrar = new CapabilitiesRegistrar(dispatcherList,
-                                                      *discoveryProxy,
-                                                      libjoynrMessagingAddress,
-                                                      participantIdStorage,
-                                                      dispatcherAddress,
-                                                      messageRouter);
-
-    joynrDispatcher->registerPublicationManager(publicationManager);
-    joynrDispatcher->registerSubscriptionManager(subscriptionManager);
-
-    /**
-     * Finish initialising Capabilitiesclient by building a Proxy and passing it
-     */
-    std::int64_t discoveryMessagesTtl = messagingSettings->getDiscoveryMessagesTtl();
-
-    if (usingRealCapabilitiesClient) {
-        ProxyBuilder<infrastructure::GlobalCapabilitiesDirectoryProxy>* capabilitiesProxyBuilder =
-                createProxyBuilder<infrastructure::GlobalCapabilitiesDirectoryProxy>(
-                        messagingSettings->getDiscoveryDirectoriesDomain());
-        DiscoveryQos discoveryQos(10000);
-        discoveryQos.setArbitrationStrategy(
-                DiscoveryQos::ArbitrationStrategy::HIGHEST_PRIORITY); // actually only one provider
-                                                                      // should be available
-        std::shared_ptr<infrastructure::GlobalCapabilitiesDirectoryProxy> capabilitiesProxy(
-                capabilitiesProxyBuilder->setMessagingQos(MessagingQos(discoveryMessagesTtl))
-                        ->setCached(true)
-                        ->setDiscoveryQos(discoveryQos)
-                        ->build());
-        ((CapabilitiesClient*)capabilitiesClient)->init(capabilitiesProxy);
-    }
-
-    ProxyBuilder<infrastructure::ChannelUrlDirectoryProxy>* channelUrlDirectoryProxyBuilder =
-            createProxyBuilder<infrastructure::ChannelUrlDirectoryProxy>(
-                    messagingSettings->getDiscoveryDirectoriesDomain());
-
-    DiscoveryQos discoveryQos(10000);
-    discoveryQos.setArbitrationStrategy(
-            DiscoveryQos::ArbitrationStrategy::HIGHEST_PRIORITY); // actually only one provider
-                                                                  // should be available
-    channelUrlDirectoryProxy = std::shared_ptr<infrastructure::ChannelUrlDirectoryProxy>(
-            channelUrlDirectoryProxyBuilder->setMessagingQos(MessagingQos(discoveryMessagesTtl))
-                    ->setCached(true)
-                    ->setDiscoveryQos(discoveryQos)
-                    ->build());
-
-    channelUrlDirectory = std::shared_ptr<ILocalChannelUrlDirectory>(
-            new LocalChannelUrlDirectory(*messagingSettings, channelUrlDirectoryProxy));
-    messageReceiver->init(channelUrlDirectory);
-    messageSender->init(channelUrlDirectory, *messagingSettings);
-}
-
-ConnectorFactory* JoynrClusterControllerRuntime::createConnectorFactory(
-        InProcessConnectorFactory* inProcessConnectorFactory,
-        JoynrMessagingConnectorFactory* joynrMessagingConnectorFactory)
-{
-    return new ConnectorFactory(inProcessConnectorFactory, joynrMessagingConnectorFactory);
-}
-
-void JoynrClusterControllerRuntime::registerRoutingProvider()
-{
-    std::string domain(systemServicesSettings.getDomain());
-    std::shared_ptr<joynr::system::RoutingProvider> routingProvider(messageRouter);
-    std::string interfaceName(routingProvider->getInterfaceName());
-    std::string participantId(systemServicesSettings.getCcRoutingProviderParticipantId());
-
-    // provision the participant ID for the routing provider
-    participantIdStorage->setProviderParticipantId(domain, interfaceName, participantId);
-
-    registerProvider<joynr::system::RoutingProvider>(domain, routingProvider);
-}
-
-void JoynrClusterControllerRuntime::registerDiscoveryProvider()
-{
-    std::string domain(systemServicesSettings.getDomain());
-    std::shared_ptr<joynr::system::DiscoveryProvider> discoveryProvider(localCapabilitiesDirectory);
-    std::string interfaceName(discoveryProvider->getInterfaceName());
-    std::string participantId(systemServicesSettings.getCcDiscoveryProviderParticipantId());
-
-    // provision the participant ID for the discovery provider
-    participantIdStorage->setProviderParticipantId(domain, interfaceName, participantId);
-
-    registerProvider<joynr::system::DiscoveryProvider>(domain, discoveryProvider);
-}
-
-JoynrClusterControllerRuntime::~JoynrClusterControllerRuntime()
-{
-    JOYNR_LOG_TRACE(logger, "entering ~JoynrClusterControllerRuntime");
-    stopMessaging();
-
-    if (joynrDispatcher != nullptr) {
-        JOYNR_LOG_TRACE(logger, "joynrDispatcher");
-        // joynrDispatcher->stopMessaging();
-        delete joynrDispatcher;
-    }
-
-    delete inProcessDispatcher;
-    inProcessDispatcher = nullptr;
-    delete capabilitiesClient;
-    capabilitiesClient = nullptr;
-
-    delete inProcessPublicationSender;
-    inProcessPublicationSender = nullptr;
-    delete joynrMessageSender;
-    delete proxyFactory;
-    delete messagingSettings;
-    delete libjoynrSettings;
-    delete capabilitiesRegistrar;
-
-#ifdef USE_DBUS_COMMONAPI_COMMUNICATION
-    delete ccDbusMessageRouterAdapter;
-    delete dbusSettings;
-#endif // USE_DBUS_COMMONAPI_COMMUNICATION
-    delete settings;
-
-    JOYNR_LOG_TRACE(logger, "leaving ~JoynrClusterControllerRuntime");
-}
-
-void JoynrClusterControllerRuntime::startMessaging()
-{
-    //    assert(joynrDispatcher!=NULL);
-    //    joynrDispatcher->startMessaging();
-    //    joynrDispatcher->waitForMessaging();
-    assert(messageReceiver != nullptr);
-    if (!messagingIsRunning) {
-        messageReceiver->startReceiveQueue();
-        messagingIsRunning = true;
-    }
-}
-
-void JoynrClusterControllerRuntime::stopMessaging()
-{
-    // joynrDispatcher->stopMessaging();
-    if (messagingIsRunning) {
-        messageReceiver->stopReceiveQueue();
-        messagingIsRunning = false;
-    }
-}
-
-void JoynrClusterControllerRuntime::runForever()
-{
-    app->exec();
-}
-
-JoynrClusterControllerRuntime* JoynrClusterControllerRuntime::create(Settings* settings)
-{
-    // Only allow one QCoreApplication instance
-    static int argc = 0;
-    static char* argv[] = {nullptr};
-    static QCoreApplication* coreApplication =
-            (QCoreApplication::instance() == nullptr) ? new QCoreApplication(argc, argv) : nullptr;
-
-    JoynrClusterControllerRuntime* runtime =
-            new JoynrClusterControllerRuntime(coreApplication, settings);
-    runtime->start();
-    return runtime;
-}
-
-void JoynrClusterControllerRuntime::unregisterProvider(const std::string& participantId)
-{
-    assert(capabilitiesRegistrar);
-    capabilitiesRegistrar->remove(participantId);
-}
-
-void JoynrClusterControllerRuntime::start()
-{
-    startMessaging();
-    registerRoutingProvider();
-    registerDiscoveryProvider();
-}
-
-void JoynrClusterControllerRuntime::stop(bool deleteChannel)
-{
-    if (deleteChannel) {
-        this->deleteChannel();
-    }
-    stopMessaging();
-}
-
-void JoynrClusterControllerRuntime::waitForChannelCreation()
-{
-    messageReceiver->waitForReceiveQueueStarted();
-}
-
-void JoynrClusterControllerRuntime::deleteChannel()
-{
-    messageReceiver->tryToDeleteChannel();
-}
-
-} // namespace joynr
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2015 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#include "JoynrClusterControllerRuntime.h"
+#include "joynr/Dispatcher.h"
+#include "libjoynr/in-process/InProcessLibJoynrMessagingSkeleton.h"
+#include "cluster-controller/http-communication-manager/HttpReceiver.h"
+#include "cluster-controller/http-communication-manager/HttpSender.h"
+#include "joynr/MessagingSettings.h"
+#include "cluster-controller/capabilities-client/CapabilitiesClient.h"
+#include "joynr/CapabilitiesRegistrar.h"
+#include "joynr/LocalCapabilitiesDirectory.h"
+#include "joynr/InProcessDispatcher.h"
+#include "joynr/ConnectorFactory.h"
+#include "joynr/SubscriptionManager.h"
+#include "joynr/PublicationManager.h"
+#include "joynr/InProcessConnectorFactory.h"
+#include "joynr/JoynrMessagingConnectorFactory.h"
+#include "joynr/MessagingStubFactory.h"
+#include "joynr/InProcessMessagingAddress.h"
+#include "joynr/InProcessPublicationSender.h"
+#include "joynr/JoynrMessageSender.h"
+#include "joynr/infrastructure/GlobalCapabilitiesDirectoryProxy.h"
+#include "joynr/LocalChannelUrlDirectory.h"
+#include "joynr/system/RoutingTypes/ChannelAddress.h"
+#include "libjoynr/in-process/InProcessMessagingStubFactory.h"
+#include "cluster-controller/messaging/joynr-messaging/JoynrMessagingStubFactory.h"
+#include "libjoynr/websocket/WebSocketMessagingStubFactory.h"
+#include "websocket/WebSocketCcMessagingSkeleton.h"
+#include "libjoynr/asyncipc/AsyncIPCMessagingStubFactory.h"
+#include "joynr/LocalDiscoveryAggregator.h"
+#include "libjoynr/joynr-messaging/DummyPlatformSecurityManager.h"
+#include "joynr/TypeUtil.h"
+#include "joynr/Settings.h"
+#include "joynr/LibjoynrSettings.h"
+
+#include "joynr/system/RoutingTypes/WebSocketAddress.h"
+
+#include "joynr/system/DiscoveryRequestCaller.h"
+#include "joynr/system/DiscoveryInProcessConnector.h"
+#include <QCoreApplication>
+#include <QThread>
+#include <cassert>
+
+#ifdef USE_DBUS_COMMONAPI_COMMUNICATION
+#include "libjoynr/dbus/DbusMessagingStubFactory.h"
+#endif // USE_DBUS_COMMONAPI_COMMUNICATION namespace joynr
+
+namespace joynr
+{
+
+INIT_LOGGER(JoynrClusterControllerRuntime);
+
+JoynrClusterControllerRuntime::JoynrClusterControllerRuntime(QCoreApplication* app,
+                                                             Settings* settings,
+                                                             IMessageReceiver* messageReceiver,
+                                                             IMessageSender* messageSender)
+        : JoynrRuntime(*settings),
+          joynrDispatcher(nullptr),
+          inProcessDispatcher(nullptr),
+          ccDispatcher(nullptr),
+          subscriptionManager(nullptr),
+          joynrMessagingSendSkeleton(nullptr),
+          joynrMessageSender(nullptr),
+          app(app),
+          capabilitiesClient(nullptr),
+          localCapabilitiesDirectory(nullptr),
+          channelUrlDirectory(),
+          cache(),
+          channelUrlDirectoryProxy(nullptr),
+          libJoynrMessagingSkeleton(nullptr),
+          messageReceiver(messageReceiver),
+          messageSender(messageSender),
+          dispatcherList(),
+          inProcessConnectorFactory(nullptr),
+          inProcessPublicationSender(nullptr),
+          joynrMessagingConnectorFactory(nullptr),
+          connectorFactory(nullptr),
+          settings(settings),
+          messagingSettings(nullptr),
+          libjoynrSettings(nullptr),
+#ifdef USE_DBUS_COMMONAPI_COMMUNICATION
+          dbusSettings(nullptr),
+          ccDbusMessageRouterAdapter(nullptr),
+#endif // USE_DBUS_COMMONAPI_COMMUNICATION
+          wsSettings(*settings),
+          wsCcMessagingSkeleton(nullptr),
+          asyncIPCSettings(NULL),
+          asyncIPCMessageRouterAdapter(NULL),
+          securityManager(nullptr),
+          messagingIsRunning(false)
+{
+    initializeAllDependencies();
+}
+
+void JoynrClusterControllerRuntime::initializeAllDependencies()
+{
+    /**
+      * libjoynr side skeleton & dispatcher
+      * This needs some preparation of libjoynr and clustercontroller parts.
+      */
+    messagingSettings = new MessagingSettings(*settings);
+    messagingSettings->printSettings();
+    libjoynrSettings = new LibjoynrSettings(*settings);
+    libjoynrSettings->printSettings();
+    wsSettings.printSettings();
+
+    // Initialise security manager
+    securityManager = new DummyPlatformSecurityManager();
+
+    // CAREFUL: the factory creates an old style dispatcher, not the new one!
+
+    inProcessDispatcher = new InProcessDispatcher();
+    /* CC */
+    // create the messaging stub factory
+    MessagingStubFactory* messagingStubFactory = new MessagingStubFactory();
+#ifdef USE_DBUS_COMMONAPI_COMMUNICATION
+    messagingStubFactory->registerStubFactory(new DbusMessagingStubFactory());
+#endif // USE_DBUS_COMMONAPI_COMMUNICATION
+    messagingStubFactory->registerStubFactory(new InProcessMessagingStubFactory());
+    messagingStubFactory->registerStubFactory(new AsyncIPCMessagingStubFactory());
+    // init message router
+    messageRouter = std::shared_ptr<MessageRouter>(
+            new MessageRouter(messagingStubFactory, securityManager));
+    // provision global capabilities directory
+    std::shared_ptr<joynr::system::RoutingTypes::Address> globalCapabilitiesDirectoryAddress(
+            new system::RoutingTypes::ChannelAddress(
+                    messagingSettings->getCapabilitiesDirectoryChannelId()));
+    messageRouter->addProvisionedNextHop(messagingSettings->getCapabilitiesDirectoryParticipantId(),
+                                         globalCapabilitiesDirectoryAddress);
+    // provision channel url directory
+    std::shared_ptr<joynr::system::RoutingTypes::Address> globalChannelUrlDirectoryAddress(
+            new system::RoutingTypes::ChannelAddress(
+                    messagingSettings->getChannelUrlDirectoryChannelId()));
+    messageRouter->addProvisionedNextHop(messagingSettings->getChannelUrlDirectoryParticipantId(),
+                                         globalChannelUrlDirectoryAddress);
+
+    // setup CC WebSocket interface
+    WebSocketMessagingStubFactory* wsMessagingStubFactory = new WebSocketMessagingStubFactory();
+    messagingStubFactory->registerStubFactory(wsMessagingStubFactory);
+    system::RoutingTypes::WebSocketAddress wsAddress =
+            wsSettings.createClusterControllerMessagingAddress();
+
+    wsCcMessagingSkeleton =
+            new WebSocketCcMessagingSkeleton(*messageRouter, *wsMessagingStubFactory, wsAddress);
+
+    /* LibJoynr */
+    assert(messageRouter);
+    joynrMessageSender = new JoynrMessageSender(messageRouter);
+    joynrDispatcher = new Dispatcher(joynrMessageSender);
+    joynrMessageSender->registerDispatcher(joynrDispatcher);
+
+    /* CC */
+    // TODO: libjoynrmessagingskeleton now uses the Dispatcher, should it use the
+    // InprocessDispatcher?
+    libJoynrMessagingSkeleton = std::shared_ptr<InProcessMessagingSkeleton>(
+            new InProcessLibJoynrMessagingSkeleton(joynrDispatcher));
+    // EndpointAddress to messagingStub is transmitted when a provider is registered
+    // messagingStubFactory->registerInProcessMessagingSkeleton(libJoynrMessagingSkeleton);
+
+    /**
+      * ClusterController side
+      *
+      */
+    if (!messageReceiver) {
+        JOYNR_LOG_INFO(
+                logger,
+                "The message receiver supplied is NULL, creating the default MessageReceiver");
+        messageReceiver = std::shared_ptr<IMessageReceiver>(
+                new HttpReceiver(*messagingSettings, messageRouter));
+    }
+
+    std::string channelId = messageReceiver->getReceiveChannelId();
+
+    // create message sender
+    if (!messageSender) {
+        JOYNR_LOG_INFO(
+                logger, "The message sender supplied is NULL, creating the default MessageSender");
+        messageSender = std::shared_ptr<IMessageSender>(new HttpSender(
+                messagingSettings->getBounceProxyUrl(),
+                std::chrono::milliseconds(messagingSettings->getSendMsgMaxTtl()),
+                std::chrono::milliseconds(messagingSettings->getSendMsgRetryInterval())));
+    }
+    messagingStubFactory->registerStubFactory(
+            new JoynrMessagingStubFactory(messageSender, messageReceiver->getReceiveChannelId()));
+
+    // joynrMessagingSendSkeleton = new DummyClusterControllerMessagingSkeleton(messageRouter);
+    // ccDispatcher = DispatcherFactory::createDispatcherInSameThread(messagingSettings);
+
+    // we currently have to use the fake client, because JAVA side is not yet working for
+    // CapabilitiesServer.
+    bool usingRealCapabilitiesClient =
+            /*when switching this to true, turn on the UUID in systemintegrationtests again*/ true;
+    capabilitiesClient = new CapabilitiesClient(channelId); // ownership of this is not transferred
+    // try using the real capabilitiesClient again:
+    // capabilitiesClient = new CapabilitiesClient(channelId);// ownership of this is not
+    // transferred
+
+    localCapabilitiesDirectory = std::make_shared<LocalCapabilitiesDirectory>(
+            *messagingSettings, capabilitiesClient, *messageRouter);
+#ifdef USE_DBUS_COMMONAPI_COMMUNICATION
+    dbusSettings = new DbusSettings(*settings);
+    dbusSettings->printSettings();
+    // register dbus skeletons for capabilities and messaging interfaces
+    std::string ccMessagingAddress(dbusSettings->createClusterControllerMessagingAddressString());
+    ccDbusMessageRouterAdapter = new DBusMessageRouterAdapter(*messageRouter, ccMessagingAddress);
+#endif // USE_DBUS_COMMONAPI_COMMUNICATION
+
+    asyncIPCSettings = new AsyncIPCSettings(*settings);
+    asyncIPCSettings->printSettings();
+    // register dbus skeletons for capabilities and messaging interfaces
+    std::string ccMessagingAddress(
+            asyncIPCSettings->createClusterControllerMessagingAddressString());
+    asyncIPCMessageRouterAdapter =
+            new AsyncIPCMessageRouterAdapter(*messageRouter, ccMessagingAddress);
+
+    /**
+      * libJoynr side
+      *
+      */
+    publicationManager = new PublicationManager();
+    subscriptionManager = new SubscriptionManager();
+    inProcessPublicationSender = new InProcessPublicationSender(subscriptionManager);
+    std::shared_ptr<joynr::system::RoutingTypes::Address> libjoynrMessagingAddress(
+            new InProcessMessagingAddress(libJoynrMessagingSkeleton));
+    // subscriptionManager = new SubscriptionManager(...)
+    inProcessConnectorFactory = new InProcessConnectorFactory(
+            subscriptionManager,
+            publicationManager,
+            inProcessPublicationSender,
+            dynamic_cast<IRequestCallerDirectory*>(inProcessDispatcher));
+    joynrMessagingConnectorFactory =
+            new JoynrMessagingConnectorFactory(joynrMessageSender, subscriptionManager);
+
+    connectorFactory =
+            createConnectorFactory(inProcessConnectorFactory, joynrMessagingConnectorFactory);
+
+    proxyFactory = new ProxyFactory(libjoynrMessagingAddress, connectorFactory, &cache);
+
+    dispatcherList.push_back(joynrDispatcher);
+    dispatcherList.push_back(inProcessDispatcher);
+
+    // Set up the persistence file for storing provider participant ids
+    std::string persistenceFilename = libjoynrSettings->getParticipantIdsPersistenceFilename();
+    participantIdStorage =
+            std::shared_ptr<ParticipantIdStorage>(new ParticipantIdStorage(persistenceFilename));
+
+    dispatcherAddress = libjoynrMessagingAddress;
+    discoveryProxy = new LocalDiscoveryAggregator(
+            *dynamic_cast<IRequestCallerDirectory*>(inProcessDispatcher), systemServicesSettings);
+
+    std::string discoveryProviderParticipantId(
+            systemServicesSettings.getCcDiscoveryProviderParticipantId());
+    std::shared_ptr<RequestCaller> discoveryRequestCaller(
+            new joynr::system::DiscoveryRequestCaller(localCapabilitiesDirectory));
+    std::shared_ptr<InProcessAddress> discoveryProviderAddress(
+            new InProcessAddress(discoveryRequestCaller));
+    joynr::system::DiscoveryInProcessConnector* discoveryInProcessConnector =
+            InProcessConnectorFactoryHelper<joynr::system::IDiscoveryConnector>().create(
+                    subscriptionManager,
+                    publicationManager,
+                    inProcessPublicationSender,
+                    std::string(), // can be ignored
+                    discoveryProviderParticipantId,
+                    discoveryProviderAddress);
+
+    discoveryProxy->setDiscoveryProxy(discoveryInProcessConnector);
+
+    capabilitiesRegistrar = new CapabilitiesRegistrar(dispatcherList,
+                                                      *discoveryProxy,
+                                                      libjoynrMessagingAddress,
+                                                      participantIdStorage,
+                                                      dispatcherAddress,
+                                                      messageRouter);
+
+    joynrDispatcher->registerPublicationManager(publicationManager);
+    joynrDispatcher->registerSubscriptionManager(subscriptionManager);
+
+    /**
+     * Finish initialising Capabilitiesclient by building a Proxy and passing it
+     */
+    std::int64_t discoveryMessagesTtl = messagingSettings->getDiscoveryMessagesTtl();
+
+    if (usingRealCapabilitiesClient) {
+        ProxyBuilder<infrastructure::GlobalCapabilitiesDirectoryProxy>* capabilitiesProxyBuilder =
+                createProxyBuilder<infrastructure::GlobalCapabilitiesDirectoryProxy>(
+                        messagingSettings->getDiscoveryDirectoriesDomain());
+        DiscoveryQos discoveryQos(10000);
+        discoveryQos.setArbitrationStrategy(
+                DiscoveryQos::ArbitrationStrategy::HIGHEST_PRIORITY); // actually only one
+                                                                      // provider
+                                                                      // should be available
+        std::shared_ptr<infrastructure::GlobalCapabilitiesDirectoryProxy> capabilitiesProxy(
+                capabilitiesProxyBuilder->setMessagingQos(MessagingQos(discoveryMessagesTtl))
+                        ->setCached(true)
+                        ->setDiscoveryQos(discoveryQos)
+                        ->build());
+        ((CapabilitiesClient*)capabilitiesClient)->init(capabilitiesProxy);
+    }
+
+    ProxyBuilder<infrastructure::ChannelUrlDirectoryProxy>* channelUrlDirectoryProxyBuilder =
+            createProxyBuilder<infrastructure::ChannelUrlDirectoryProxy>(
+                    messagingSettings->getDiscoveryDirectoriesDomain());
+
+    DiscoveryQos discoveryQos(10000);
+    discoveryQos.setArbitrationStrategy(
+            DiscoveryQos::ArbitrationStrategy::HIGHEST_PRIORITY); // actually only one provider
+                                                                  // should be available
+    channelUrlDirectoryProxy = std::shared_ptr<infrastructure::ChannelUrlDirectoryProxy>(
+            channelUrlDirectoryProxyBuilder->setMessagingQos(MessagingQos(discoveryMessagesTtl))
+                    ->setCached(true)
+                    ->setDiscoveryQos(discoveryQos)
+                    ->build());
+
+    channelUrlDirectory = std::shared_ptr<ILocalChannelUrlDirectory>(
+            new LocalChannelUrlDirectory(*messagingSettings, channelUrlDirectoryProxy));
+    messageReceiver->init(channelUrlDirectory);
+    messageSender->init(channelUrlDirectory, *messagingSettings);
+}
+
+ConnectorFactory* JoynrClusterControllerRuntime::createConnectorFactory(
+        InProcessConnectorFactory* inProcessConnectorFactory,
+        JoynrMessagingConnectorFactory* joynrMessagingConnectorFactory)
+{
+    return new ConnectorFactory(inProcessConnectorFactory, joynrMessagingConnectorFactory);
+}
+
+void JoynrClusterControllerRuntime::registerRoutingProvider()
+{
+    std::string domain(systemServicesSettings.getDomain());
+    std::shared_ptr<joynr::system::RoutingProvider> routingProvider(messageRouter);
+    std::string interfaceName(routingProvider->getInterfaceName());
+    std::string participantId(systemServicesSettings.getCcRoutingProviderParticipantId());
+
+    // provision the participant ID for the routing provider
+    participantIdStorage->setProviderParticipantId(domain, interfaceName, participantId);
+
+    registerProvider<joynr::system::RoutingProvider>(domain, routingProvider);
+}
+
+void JoynrClusterControllerRuntime::registerDiscoveryProvider()
+{
+    std::string domain(systemServicesSettings.getDomain());
+    std::shared_ptr<joynr::system::DiscoveryProvider> discoveryProvider(localCapabilitiesDirectory);
+    std::string interfaceName(discoveryProvider->getInterfaceName());
+    std::string participantId(systemServicesSettings.getCcDiscoveryProviderParticipantId());
+
+    // provision the participant ID for the discovery provider
+    participantIdStorage->setProviderParticipantId(domain, interfaceName, participantId);
+
+    registerProvider<joynr::system::DiscoveryProvider>(domain, discoveryProvider);
+}
+
+JoynrClusterControllerRuntime::~JoynrClusterControllerRuntime()
+{
+    JOYNR_LOG_TRACE(logger, "entering ~JoynrClusterControllerRuntime");
+    stopMessaging();
+
+    if (joynrDispatcher != nullptr) {
+        JOYNR_LOG_TRACE(logger, "joynrDispatcher");
+        // joynrDispatcher->stopMessaging();
+        delete joynrDispatcher;
+    }
+
+    delete inProcessDispatcher;
+    inProcessDispatcher = nullptr;
+    delete capabilitiesClient;
+    capabilitiesClient = nullptr;
+
+    delete inProcessPublicationSender;
+    inProcessPublicationSender = nullptr;
+    delete joynrMessageSender;
+    delete proxyFactory;
+    delete messagingSettings;
+    delete libjoynrSettings;
+    delete capabilitiesRegistrar;
+
+#ifdef USE_DBUS_COMMONAPI_COMMUNICATION
+    delete ccDbusMessageRouterAdapter;
+    delete dbusSettings;
+#endif // USE_DBUS_COMMONAPI_COMMUNICATION
+
+    delete asyncIPCMessageRouterAdapter;
+    delete asyncIPCSettings;
+
+    delete settings;
+
+    JOYNR_LOG_TRACE(logger, "leaving ~JoynrClusterControllerRuntime");
+}
+
+void JoynrClusterControllerRuntime::startMessaging()
+{
+    //    assert(joynrDispatcher!=NULL);
+    //    joynrDispatcher->startMessaging();
+    //    joynrDispatcher->waitForMessaging();
+    assert(messageReceiver != nullptr);
+    if (!messagingIsRunning) {
+        messageReceiver->startReceiveQueue();
+        messagingIsRunning = true;
+    }
+}
+
+void JoynrClusterControllerRuntime::stopMessaging()
+{
+    // joynrDispatcher->stopMessaging();
+    if (messagingIsRunning) {
+        messageReceiver->stopReceiveQueue();
+        messagingIsRunning = false;
+    }
+}
+
+void JoynrClusterControllerRuntime::runForever()
+{
+    app->exec();
+}
+
+JoynrClusterControllerRuntime* JoynrClusterControllerRuntime::create(Settings* settings)
+{
+    // Only allow one QCoreApplication instance
+    static int argc = 0;
+    static char* argv[] = {nullptr};
+    static QCoreApplication* coreApplication =
+            (QCoreApplication::instance() == nullptr) ? new QCoreApplication(argc, argv) : nullptr;
+
+    JoynrClusterControllerRuntime* runtime =
+            new JoynrClusterControllerRuntime(coreApplication, settings);
+    runtime->start();
+    return runtime;
+}
+
+void JoynrClusterControllerRuntime::unregisterProvider(const std::string& participantId)
+{
+    assert(capabilitiesRegistrar);
+    capabilitiesRegistrar->remove(participantId);
+}
+
+void JoynrClusterControllerRuntime::start()
+{
+    startMessaging();
+    registerRoutingProvider();
+    registerDiscoveryProvider();
+}
+
+void JoynrClusterControllerRuntime::stop(bool deleteChannel)
+{
+    if (deleteChannel) {
+        this->deleteChannel();
+    }
+    stopMessaging();
+}
+
+void JoynrClusterControllerRuntime::waitForChannelCreation()
+{
+    messageReceiver->waitForReceiveQueueStarted();
+}
+
+void JoynrClusterControllerRuntime::deleteChannel()
+{
+    messageReceiver->tryToDeleteChannel();
+}
+
+} // namespace joynr
diff --git a/cpp/runtimes/cluster-controller-runtime/JoynrClusterControllerRuntime.h b/cpp/runtimes/cluster-controller-runtime/JoynrClusterControllerRuntime.h
index 821a6db..b8c0ad1 100644
--- a/cpp/runtimes/cluster-controller-runtime/JoynrClusterControllerRuntime.h
+++ b/cpp/runtimes/cluster-controller-runtime/JoynrClusterControllerRuntime.h
@@ -1,158 +1,162 @@
-/*
- * #%L
- * %%
- * Copyright (C) 2011 - 2015 BMW Car IT GmbH
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * #L%
- */
-
-#ifndef JOYNRCLUSTERCONTROLLERRUNTIME_H
-#define JOYNRCLUSTERCONTROLLERRUNTIME_H
-
-#include <string>
-#include <memory>
-
-#include "joynr/PrivateCopyAssign.h"
-#include "joynr/JoynrClusterControllerRuntimeExport.h"
-#include "joynr/ClientQCache.h"
-#include "joynr/Logger.h"
-#include "joynr/JoynrRuntime.h"
-#include "libjoynr/websocket/WebSocketSettings.h"
-
-#include "joynr/RuntimeConfig.h"
-#ifdef USE_DBUS_COMMONAPI_COMMUNICATION
-#include "joynr/DBusMessageRouterAdapter.h"
-#include "common/dbus/DbusSettings.h"
-#endif // USE_DBUS_COMMONAPI_COMMUNICATION
-#include <string>
-
-class QCoreApplication;
-class JoynrClusterControllerRuntimeTest;
-
-namespace joynr
-{
-
-class InProcessClusterControllerMessagingSkeleton;
-class LocalCapabilitiesDirectory;
-class ILocalChannelUrlDirectory;
-class IMessageReceiver;
-class IMessageSender;
-class ICapabilitiesClient;
-class SubscriptionManager;
-class InProcessDispatcher;
-class ConnectorFactory;
-class InProcessConnectorFactory;
-class JoynrMessagingConnectorFactory;
-class MessagingSettings;
-class IDispatcher;
-class InProcessPublicationSender;
-class WebSocketCcMessagingSkeleton;
-class InProcessMessagingSkeleton;
-class IPlatformSecurityManager;
-class Settings;
-class LibjoynrSettings;
-
-namespace infrastructure
-{
-class ChannelUrlDirectoryProxy;
-} // namespace infrastructure
-
-class JOYNRCLUSTERCONTROLLERRUNTIME_EXPORT JoynrClusterControllerRuntime : public JoynrRuntime
-{
-public:
-    JoynrClusterControllerRuntime(QCoreApplication* app,
-                                  Settings* settings,
-                                  IMessageReceiver* messageReceiver = nullptr,
-                                  IMessageSender* = nullptr);
-
-    static JoynrClusterControllerRuntime* create(Settings* settings);
-
-    ~JoynrClusterControllerRuntime() override;
-
-    void unregisterProvider(const std::string& participantId) override;
-    void start();
-    void stop(bool deleteChannel = false);
-
-    void runForever();
-
-    // Functions used by integration tests
-    void startMessaging();
-    void stopMessaging();
-    void waitForChannelCreation();
-    void deleteChannel();
-    void registerRoutingProvider();
-    void registerDiscoveryProvider();
-
-protected:
-    void initializeAllDependencies();
-    virtual ConnectorFactory* createConnectorFactory(
-            InProcessConnectorFactory* inProcessConnectorFactory,
-            JoynrMessagingConnectorFactory* joynrMessagingConnectorFactory);
-
-    IDispatcher* joynrDispatcher;
-    IDispatcher* inProcessDispatcher;
-    IDispatcher* ccDispatcher;
-    SubscriptionManager* subscriptionManager;
-    IMessaging* joynrMessagingSendSkeleton;
-    JoynrMessageSender* joynrMessageSender;
-    QCoreApplication* app;
-    ICapabilitiesClient* capabilitiesClient;
-    std::shared_ptr<LocalCapabilitiesDirectory> localCapabilitiesDirectory;
-    std::shared_ptr<ILocalChannelUrlDirectory> channelUrlDirectory;
-    // Reason why CapabilitiesAggregator (CA) has to be a QSP:
-    // CA has to be a member variable, because it is passed to ProxyBuilder in createProxyBuilder()
-    // CA has to be a pointer instead of a reference, because it has to be initialised to NULL
-    // (because other members are needed for its constructor)
-    // CA is passed into different other classes, so ownership cannot be transferred.
-    // => CA needs to be a QSP
-    ClientQCache cache;
-    // messageRouter must be shared pointer since it is also registered as
-    // joynr::system::Routing provider and register capability expects shared pointer
-    std::shared_ptr<infrastructure::ChannelUrlDirectoryProxy> channelUrlDirectoryProxy;
-
-    std::shared_ptr<InProcessMessagingSkeleton> libJoynrMessagingSkeleton;
-
-    std::shared_ptr<IMessageReceiver> messageReceiver;
-    std::shared_ptr<IMessageSender> messageSender;
-
-    std::vector<IDispatcher*> dispatcherList;
-    InProcessConnectorFactory* inProcessConnectorFactory;
-    InProcessPublicationSender* inProcessPublicationSender;
-    JoynrMessagingConnectorFactory* joynrMessagingConnectorFactory;
-    ConnectorFactory* connectorFactory;
-    // take ownership, so a pointer is used
-    Settings* settings;
-    // use pointer for settings object to check the configuration before initialization
-    MessagingSettings* messagingSettings;
-    LibjoynrSettings* libjoynrSettings;
-
-#ifdef USE_DBUS_COMMONAPI_COMMUNICATION
-    DbusSettings* dbusSettings;
-    DBusMessageRouterAdapter* ccDbusMessageRouterAdapter;
-#endif // USE_DBUS_COMMONAPI_COMMUNICATION
-    WebSocketSettings wsSettings;
-    WebSocketCcMessagingSkeleton* wsCcMessagingSkeleton;
-    IPlatformSecurityManager* securityManager;
-    bool messagingIsRunning;
-
-    ADD_LOGGER(JoynrClusterControllerRuntime);
-
-private:
-    DISALLOW_COPY_AND_ASSIGN(JoynrClusterControllerRuntime);
-
-    friend class ::JoynrClusterControllerRuntimeTest;
-};
-
-} // namespace joynr
-#endif // JOYNRCLUSTERCONTROLLERRUNTIME_H
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2015 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+
+#ifndef JOYNRCLUSTERCONTROLLERRUNTIME_H
+#define JOYNRCLUSTERCONTROLLERRUNTIME_H
+
+#include <string>
+#include <memory>
+
+#include "joynr/PrivateCopyAssign.h"
+#include "joynr/JoynrClusterControllerRuntimeExport.h"
+#include "joynr/ClientQCache.h"
+#include "joynr/Logger.h"
+#include "joynr/JoynrRuntime.h"
+#include "libjoynr/websocket/WebSocketSettings.h"
+#include "joynr/AsyncIPCMessageRouterAdapter.h"
+#include "libjoynr/asyncipc/AsyncIPCSettings.h"
+
+#include "joynr/RuntimeConfig.h"
+#ifdef USE_DBUS_COMMONAPI_COMMUNICATION
+#include "joynr/DBusMessageRouterAdapter.h"
+#include "common/dbus/DbusSettings.h"
+#endif // USE_DBUS_COMMONAPI_COMMUNICATION
+#include <string>
+
+class QCoreApplication;
+class JoynrClusterControllerRuntimeTest;
+
+namespace joynr
+{
+
+class InProcessClusterControllerMessagingSkeleton;
+class LocalCapabilitiesDirectory;
+class ILocalChannelUrlDirectory;
+class IMessageReceiver;
+class IMessageSender;
+class ICapabilitiesClient;
+class SubscriptionManager;
+class InProcessDispatcher;
+class ConnectorFactory;
+class InProcessConnectorFactory;
+class JoynrMessagingConnectorFactory;
+class MessagingSettings;
+class IDispatcher;
+class InProcessPublicationSender;
+class WebSocketCcMessagingSkeleton;
+class InProcessMessagingSkeleton;
+class IPlatformSecurityManager;
+class Settings;
+class LibjoynrSettings;
+
+namespace infrastructure
+{
+class ChannelUrlDirectoryProxy;
+} // namespace infrastructure
+
+class JOYNRCLUSTERCONTROLLERRUNTIME_EXPORT JoynrClusterControllerRuntime : public JoynrRuntime
+{
+public:
+    JoynrClusterControllerRuntime(QCoreApplication* app,
+                                  Settings* settings,
+                                  IMessageReceiver* messageReceiver = nullptr,
+                                  IMessageSender* = nullptr);
+
+    static JoynrClusterControllerRuntime* create(Settings* settings);
+
+    ~JoynrClusterControllerRuntime() override;
+
+    void unregisterProvider(const std::string& participantId) override;
+    void start();
+    void stop(bool deleteChannel = false);
+
+    void runForever();
+
+    // Functions used by integration tests
+    void startMessaging();
+    void stopMessaging();
+    void waitForChannelCreation();
+    void deleteChannel();
+    void registerRoutingProvider();
+    void registerDiscoveryProvider();
+
+protected:
+    void initializeAllDependencies();
+    virtual ConnectorFactory* createConnectorFactory(
+            InProcessConnectorFactory* inProcessConnectorFactory,
+            JoynrMessagingConnectorFactory* joynrMessagingConnectorFactory);
+
+    IDispatcher* joynrDispatcher;
+    IDispatcher* inProcessDispatcher;
+    IDispatcher* ccDispatcher;
+    SubscriptionManager* subscriptionManager;
+    IMessaging* joynrMessagingSendSkeleton;
+    JoynrMessageSender* joynrMessageSender;
+    QCoreApplication* app;
+    ICapabilitiesClient* capabilitiesClient;
+    std::shared_ptr<LocalCapabilitiesDirectory> localCapabilitiesDirectory;
+    std::shared_ptr<ILocalChannelUrlDirectory> channelUrlDirectory;
+    // Reason why CapabilitiesAggregator (CA) has to be a QSP:
+    // CA has to be a member variable, because it is passed to ProxyBuilder in createProxyBuilder()
+    // CA has to be a pointer instead of a reference, because it has to be initialised to NULL
+    // (because other members are needed for its constructor)
+    // CA is passed into different other classes, so ownership cannot be transferred.
+    // => CA needs to be a QSP
+    ClientQCache cache;
+    // messageRouter must be shared pointer since it is also registered as
+    // joynr::system::Routing provider and register capability expects shared pointer
+    std::shared_ptr<infrastructure::ChannelUrlDirectoryProxy> channelUrlDirectoryProxy;
+
+    std::shared_ptr<InProcessMessagingSkeleton> libJoynrMessagingSkeleton;
+
+    std::shared_ptr<IMessageReceiver> messageReceiver;
+    std::shared_ptr<IMessageSender> messageSender;
+
+    std::vector<IDispatcher*> dispatcherList;
+    InProcessConnectorFactory* inProcessConnectorFactory;
+    InProcessPublicationSender* inProcessPublicationSender;
+    JoynrMessagingConnectorFactory* joynrMessagingConnectorFactory;
+    ConnectorFactory* connectorFactory;
+    // take ownership, so a pointer is used
+    Settings* settings;
+    // use pointer for settings object to check the configuration before initialization
+    MessagingSettings* messagingSettings;
+    LibjoynrSettings* libjoynrSettings;
+
+#ifdef USE_DBUS_COMMONAPI_COMMUNICATION
+    DbusSettings* dbusSettings;
+    DBusMessageRouterAdapter* ccDbusMessageRouterAdapter;
+#endif // USE_DBUS_COMMONAPI_COMMUNICATION
+    WebSocketSettings wsSettings;
+    WebSocketCcMessagingSkeleton* wsCcMessagingSkeleton;
+    AsyncIPCSettings* asyncIPCSettings;
+    AsyncIPCMessageRouterAdapter* asyncIPCMessageRouterAdapter;
+    IPlatformSecurityManager* securityManager;
+    bool messagingIsRunning;
+
+    ADD_LOGGER(JoynrClusterControllerRuntime);
+
+private:
+    DISALLOW_COPY_AND_ASSIGN(JoynrClusterControllerRuntime);
+
+    friend class ::JoynrClusterControllerRuntimeTest;
+};
+
+} // namespace joynr
+#endif // JOYNRCLUSTERCONTROLLERRUNTIME_H
diff --git a/cpp/runtimes/libjoynr-runtime/asyncipc/JoynrAsyncIPCRuntimeExecutor.cpp b/cpp/runtimes/libjoynr-runtime/asyncipc/JoynrAsyncIPCRuntimeExecutor.cpp
new file mode 100644
index 0000000..9f24f03
--- /dev/null
+++ b/cpp/runtimes/libjoynr-runtime/asyncipc/JoynrAsyncIPCRuntimeExecutor.cpp
@@ -0,0 +1,40 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2014 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#include "runtimes/libjoynr-runtime/asyncipc/JoynrAsyncIPCRuntimeExecutor.h"
+
+#include "runtimes/libjoynr-runtime/LibJoynrRuntime.h"
+#include "runtimes/libjoynr-runtime/asyncipc/LibJoynrAsyncIPCRuntime.h"
+#include "joynr/Settings.h"
+
+namespace joynr
+{
+
+JoynrAsyncIPCRuntimeExecutor::JoynrAsyncIPCRuntimeExecutor(Settings* settings)
+        : JoynrRuntimeExecutor(settings)
+{
+    createRuntime();
+}
+
+void JoynrAsyncIPCRuntimeExecutor::createRuntime()
+{
+    runtime = std::unique_ptr<LibJoynrRuntime>(new LibJoynrAsyncIPCRuntime(settings));
+    runtimeSemaphore.notify();
+}
+
+} // namespace joynr
diff --git a/cpp/runtimes/libjoynr-runtime/asyncipc/JoynrAsyncIPCRuntimeExecutor.h b/cpp/runtimes/libjoynr-runtime/asyncipc/JoynrAsyncIPCRuntimeExecutor.h
new file mode 100644
index 0000000..8e26242
--- /dev/null
+++ b/cpp/runtimes/libjoynr-runtime/asyncipc/JoynrAsyncIPCRuntimeExecutor.h
@@ -0,0 +1,44 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2014 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+
+#ifndef JOYNRASYNCIPCRUNTIMEEXECUTOR_H
+#define JOYNRASYNCIPCRUNTIMEEXECUTOR_H
+
+#include "joynr/PrivateCopyAssign.h"
+#include "runtimes/libjoynr-runtime/JoynrRuntimeExecutor.h"
+
+namespace joynr
+{
+
+class LibJoynrRuntime;
+class Settings;
+
+class JoynrAsyncIPCRuntimeExecutor : public JoynrRuntimeExecutor
+{
+public:
+    explicit JoynrAsyncIPCRuntimeExecutor(Settings* settings);
+    ~JoynrAsyncIPCRuntimeExecutor() override = default;
+
+private:
+    void createRuntime();
+    DISALLOW_COPY_AND_ASSIGN(JoynrAsyncIPCRuntimeExecutor);
+};
+
+} // namespace joynr
+#endif // JOYNRASYNCIPCRUNTIMEEXECUTOR_H
diff --git a/cpp/runtimes/libjoynr-runtime/asyncipc/JoynrRuntime.cpp b/cpp/runtimes/libjoynr-runtime/asyncipc/JoynrRuntime.cpp
new file mode 100644
index 0000000..e629368
--- /dev/null
+++ b/cpp/runtimes/libjoynr-runtime/asyncipc/JoynrRuntime.cpp
@@ -0,0 +1,37 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#include "joynr/JoynrRuntime.h"
+#include "libjoynr-runtime/LibJoynrRuntime.h"
+#include "libjoynr-runtime/asyncipc/JoynrAsyncIPCRuntimeExecutor.h"
+#include "joynr/Settings.h"
+
+namespace joynr
+{
+
+JoynrRuntime* JoynrRuntime::createRuntime(const std::string& pathToLibjoynrSettings,
+                                          const std::string& pathToMessagingSettings)
+{
+    Settings* settings = new Settings(pathToLibjoynrSettings);
+    Settings messagingSettings{pathToMessagingSettings};
+    Settings::merge(messagingSettings, *settings, false);
+
+    return LibJoynrRuntime::create(new JoynrAsyncIPCRuntimeExecutor(settings));
+}
+
+} // namespace joynr
diff --git a/cpp/runtimes/libjoynr-runtime/asyncipc/LibJoynrAsyncIPCRuntime.cpp b/cpp/runtimes/libjoynr-runtime/asyncipc/LibJoynrAsyncIPCRuntime.cpp
new file mode 100644
index 0000000..a1ed3f8
--- /dev/null
+++ b/cpp/runtimes/libjoynr-runtime/asyncipc/LibJoynrAsyncIPCRuntime.cpp
@@ -0,0 +1,71 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2014 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+#include "runtimes/libjoynr-runtime/asyncipc/LibJoynrAsyncIPCRuntime.h"
+#include "libjoynr/asyncipc/AsyncIPCSettings.h"
+#include "joynr/system/RoutingTypes/AsyncIPCAddress.h"
+#include "joynr/AsyncIPCMessageRouterAdapter.h"
+#include "libjoynr/asyncipc/AsyncIPCMessagingStubFactory.h"
+#include "joynr/Util.h"
+#include <stdio.h>
+
+namespace joynr
+{
+
+LibJoynrAsyncIPCRuntime::LibJoynrAsyncIPCRuntime(Settings* settings)
+        : LibJoynrRuntime(settings),
+          asyncIPCMessageRouterAdapter(NULL),
+          asyncIPCSettings(new AsyncIPCSettings(*settings)),
+          libjoynrMessagingServiceUrl()
+{
+    asyncIPCSettings->printSettings();
+
+    std::string uuid = Util::createUuid();
+    // remove dashes
+    uuid.erase(std::remove(uuid.begin(), uuid.end(), '-'), uuid.end());
+    std::string libjoynrMessagingId("libjoynr.messaging.participantid_" + uuid);
+    libjoynrMessagingServiceUrl = libjoynrMessagingId;
+
+    std::shared_ptr<joynr::system::RoutingTypes::Address> libjoynrMessagingAddress(
+            new system::RoutingTypes::AsyncIPCAddress(libjoynrMessagingId));
+
+    // create connection to parent routing service
+    std::shared_ptr<joynr::system::RoutingTypes::Address> ccMessagingAddress(
+            new system::RoutingTypes::AsyncIPCAddress(
+                    asyncIPCSettings->getClusterControllerMessagingParticipantId()));
+
+    LibJoynrRuntime::init(
+            new AsyncIPCMessagingStubFactory(), libjoynrMessagingAddress, ccMessagingAddress);
+}
+
+LibJoynrAsyncIPCRuntime::~LibJoynrAsyncIPCRuntime()
+{
+    delete asyncIPCMessageRouterAdapter;
+    asyncIPCMessageRouterAdapter = NULL;
+    delete asyncIPCSettings;
+    asyncIPCSettings = NULL;
+}
+
+void LibJoynrAsyncIPCRuntime::startLibJoynrMessagingSkeleton(MessageRouter& messageRouter)
+{
+    // create messaging skeleton using uuid
+    asyncIPCMessageRouterAdapter =
+            new AsyncIPCMessageRouterAdapter(messageRouter, libjoynrMessagingServiceUrl);
+}
+
+} // namespace joynr
diff --git a/cpp/runtimes/libjoynr-runtime/asyncipc/LibJoynrAsyncIPCRuntime.h b/cpp/runtimes/libjoynr-runtime/asyncipc/LibJoynrAsyncIPCRuntime.h
new file mode 100644
index 0000000..7b7ef5c
--- /dev/null
+++ b/cpp/runtimes/libjoynr-runtime/asyncipc/LibJoynrAsyncIPCRuntime.h
@@ -0,0 +1,51 @@
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2013 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+
+#ifndef LIBJOYNRASYNCIPCRUNTIME_H
+#define LIBJOYNRDASYNCIPCRUNTIME_H
+
+#include "joynr/PrivateCopyAssign.h"
+#include "runtimes/libjoynr-runtime/LibJoynrRuntime.h"
+
+namespace joynr
+{
+
+class AsyncIPCMessageRouterAdapter;
+class AsyncIPCSettings;
+class Settings;
+
+class LibJoynrAsyncIPCRuntime : public LibJoynrRuntime
+{
+public:
+    explicit LibJoynrAsyncIPCRuntime(Settings* settings);
+    ~LibJoynrAsyncIPCRuntime() override;
+
+protected:
+    AsyncIPCMessageRouterAdapter* asyncIPCMessageRouterAdapter;
+    AsyncIPCSettings* asyncIPCSettings;
+
+    virtual void startLibJoynrMessagingSkeleton(MessageRouter& messageRouter) override;
+
+private:
+    DISALLOW_COPY_AND_ASSIGN(LibJoynrAsyncIPCRuntime);
+    std::string libjoynrMessagingServiceUrl;
+};
+
+} // namespace joynr
+#endif // LIBJOYNRDBUSRUNTIME_H
diff --git a/cpp/tests/.gitignore b/cpp/tests/.gitignore
index 2845c3a..6515e9f 100644
--- a/cpp/tests/.gitignore
+++ b/cpp/tests/.gitignore
@@ -1,3 +1,6 @@
-/capabilitiesdump
-/joynr.properties
-/logs
+/capabilitiesdump
+/joynr.properties
+/logs
+/CMakeFiles/
+/cmake_install.cmake
+/Makefile
diff --git a/cpp/tests/CMakeLists.txt b/cpp/tests/CMakeLists.txt
index d4129f7..da81fa3 100644
--- a/cpp/tests/CMakeLists.txt
+++ b/cpp/tests/CMakeLists.txt
@@ -1,478 +1,491 @@
-message(STATUS "#############################################")
-message(STATUS "Configuring tests...")
-message(STATUS "#############################################\n")
-
-if(${WIN32})
-    set(DISABLE_PTHREAD_CMAKE_ARG ON)
-else()
-endif(${WIN32})
-
-
-if (USE_PLATFORM_GTEST_GMOCK)
-
-    find_package(GTest REQUIRED)
-    find_package(GMock REQUIRED)
-
-else (USE_PLATFORM_GTEST_GMOCK)
-
-    ### clone googletest git repository ###########################################################
-
-    # this repository contains both googletest and googlemock
-    AddExternalProject(
-        googletest-repo
-        DOWNLOAD_DIR "googletest-repo"
-        TIMEOUT 10
-        GIT_REPOSITORY https://github.com/google/googletest.git
-        GIT_TAG ddb8012e # there is no version tag on github; this is to make sure that a working version is used
-        CONFIGURE_COMMAND "" # Disable configuring
-        BUILD_COMMAND "" # Disable building
-    )
-
-    get_property(EP_PREFIX DIRECTORY PROPERTY EP_PREFIX)
-
-    ### Add google test ###########################################################
-
-    # build googletest library
-    AddExternalProject(
-        googletest
-        DOWNLOAD_COMMAND "" # already downloaded by googletest-repo
-        SOURCE_DIR "${EP_PREFIX}/src/googletest-repo/googletest"
-        BUILD_BYPRODUCTS "${EP_PREFIX}/src/googletest-build/${CMAKE_STATIC_LIBRARY_PREFIX}gtest${CMAKE_STATIC_LIBRARY_SUFFIX}"
-        CMAKE_ARGS -Dgtest_force_shared_crt=ON
-                   -Dgtest_disable_pthreads=${DISABLE_PTHREAD_CMAKE_ARG}
-    )
-
-    ExternalProject_Get_Property(googletest binary_dir)
-    set(googletest_binary_dir ${binary_dir})
-    message(STATUS "variable googletest_binary_dir=${googletest_binary_dir}")
-
-    # build googletest AFTER downloading the sources
-    add_dependencies(googletest googletest-repo)
-
-    # Specify include dir
-    ExternalProject_Get_Property(googletest source_dir)
-    set(googletest_source_dir ${source_dir})
-    message(STATUS "variable googletest_source_dir=${googletest_source_dir}")
-    set(GTEST_INCLUDE_DIRS ${googletest_source_dir}/include)
-    set(GTEST_LIBRARIES ${googletest_binary_dir}/libgtest.a)
-
-    ### Add google mock ###########################################################
-
-    # build googlemock library
-    AddExternalProject(
-        googlemock
-        DOWNLOAD_COMMAND "" # already downloaded by googletest-repo
-        SOURCE_DIR "${EP_PREFIX}/src/googletest-repo/googlemock"
-        BUILD_BYPRODUCTS "${EP_PREFIX}/src/googlemock-build/${CMAKE_STATIC_LIBRARY_PREFIX}gmock${CMAKE_STATIC_LIBRARY_SUFFIX}"
-        CMAKE_ARGS -Dgtest_force_shared_crt=ON
-                   -Dgtest_disable_pthreads=${DISABLE_PTHREAD_CMAKE_ARG}
-    )
-
-    ExternalProject_Get_Property(googlemock binary_dir)
-    set(googlemock_binary_dir ${binary_dir})
-    message(STATUS "variable googlemock_binary_dir=${googlemock_binary_dir}")
-
-    # build googlemock AFTER downloading the sources
-    add_dependencies(googlemock googletest-repo)
-
-    # Specify include dir
-    ExternalProject_Get_Property(googlemock source_dir)
-    set(googlemock_source_dir ${source_dir})
-    message(STATUS "variable googlemock_source_dir=${googlemock_source_dir}")
-    set(GMOCK_INCLUDE_DIRS ${googlemock_source_dir}/include)
-    set(GMOCK_LIBRARIES ${googlemock_binary_dir}/libgmock.a)
-
-endif(USE_PLATFORM_GTEST_GMOCK)
-
-include_directories(SYSTEM ${GTEST_INCLUDE_DIRS})
-include_directories(SYSTEM ${GMOCK_INCLUDE_DIRS})
-
-### copy test resources and settings ##########################################
-if(${CMAKE_GENERATOR} MATCHES "Visual Studio")
-    configure_file("resources/integrationtest.settings" "${JOYNR_BINARY_DIR}/Debug/test-resources/integrationtest.settings")
-    configure_file("resources/sslintegrationtest.settings" "${JOYNR_BINARY_DIR}/Debug/test-resources/sslintegrationtest.settings")
-    configure_file("resources/SystemIntegrationTest1.settings" "${JOYNR_BINARY_DIR}/Debug/test-resources/SystemIntegrationTest1.settings")
-    configure_file("resources/SystemIntegrationTest2.settings" "${JOYNR_BINARY_DIR}/Debug/test-resources/SystemIntegrationTest2.settings")
-    configure_file("resources/libjoynrSystemIntegration1.settings" "${JOYNR_BINARY_DIR}/Debug/test-resources/libjoynrSystemIntegration1.settings")
-    configure_file("resources/libjoynrSystemIntegration2.settings" "${JOYNR_BINARY_DIR}/Debug/test-resources/libjoynrSystemIntegration2.settings")
-    configure_file("resources/ca.crt" "${JOYNR_BINARY_DIR}/Debug/test-resources/ca.crt")
-    configure_file("resources/testclient.pem" "${JOYNR_BINARY_DIR}/Debug/test-resources/testclient.pem")
-    configure_file("resources/integrationtest.settings" "${JOYNR_BINARY_DIR}/Release/test-resources/integrationtest.settings")
-    configure_file("resources/sslintegrationtest.settings" "${JOYNR_BINARY_DIR}/Release/test-resources/sslintegrationtest.settings")
-    configure_file("resources/SystemIntegrationTest1.settings" "${JOYNR_BINARY_DIR}/Release/test-resources/SystemIntegrationTest1.settings")
-    configure_file("resources/SystemIntegrationTest2.settings" "${JOYNR_BINARY_DIR}/Release/test-resources/SystemIntegrationTest2.settings")
-    configure_file("resources/libjoynrSystemIntegration1.settings" "${JOYNR_BINARY_DIR}/Release/test-resources/libjoynrSystemIntegration1.settings")
-    configure_file("resources/libjoynrSystemIntegration2.settings" "${JOYNR_BINARY_DIR}/Release/test-resources/libjoynrSystemIntegration2.settings")
-    configure_file("resources/ca.crt" "${JOYNR_BINARY_DIR}/Release/test-resources/ca.crt")
-    configure_file("resources/testclient.pem" "${JOYNR_BINARY_DIR}/Release/test-resources/testclient.pem")
-else()
-    configure_file("resources/integrationtest.settings" "${JOYNR_BINARY_DIR}/test-resources/integrationtest.settings")
-    configure_file("resources/sslintegrationtest.settings" "${JOYNR_BINARY_DIR}/test-resources/sslintegrationtest.settings")
-    configure_file("resources/SystemIntegrationTest1.settings" "${JOYNR_BINARY_DIR}/test-resources/SystemIntegrationTest1.settings")
-    configure_file("resources/SystemIntegrationTest2.settings" "${JOYNR_BINARY_DIR}/test-resources/SystemIntegrationTest2.settings")
-    configure_file("resources/libjoynrSystemIntegration1.settings" "${JOYNR_BINARY_DIR}/test-resources/libjoynrSystemIntegration1.settings")
-    configure_file("resources/libjoynrSystemIntegration2.settings" "${JOYNR_BINARY_DIR}/test-resources/libjoynrSystemIntegration2.settings")
-    configure_file("resources/ca.crt" "${JOYNR_BINARY_DIR}/test-resources/ca.crt")
-    configure_file("resources/testclient.pem" "${JOYNR_BINARY_DIR}/test-resources/testclient.pem")
-endif(${CMAKE_GENERATOR} MATCHES "Visual Studio")
-
-
-### set up stuff common for all test targets ##################################
-
-include(AddTest.cmake)
-
-get_target_property(JoynrCommon_PUBLIC_INCLUDE_DIRECTORY JoynrCommon PUBLIC_INCLUDE_DIRECTORY)
-get_target_property(Joynr_PUBLIC_INCLUDE_DIRECTORY Joynr PUBLIC_INCLUDE_DIRECTORY)
-get_target_property(jsonserializer_PUBLIC_INCLUDE_DIRECTORY jsonserializer PUBLIC_INCLUDE_DIRECTORY)
-get_target_property(jsmn_PUBLIC_INCLUDE_DIRECTORY jsmn PUBLIC_INCLUDE_DIRECTORY)
-
-get_target_property(joynrwsruntime_PUBLIC_INCLUDE_DIRECTORY JoynrWsRuntime PUBLIC_INCLUDE_DIRECTORY)
-if(${BUILD_CLUSTER_CONTROLLER})
-    get_target_property(JoynrClusterController_PUBLIC_INCLUDE_DIRECTORY JoynrClusterController PUBLIC_INCLUDE_DIRECTORY)
-    get_target_property(JoynrClusterControllerRuntime_PUBLIC_INCLUDE_DIRECTORY JoynrClusterControllerRuntime PUBLIC_INCLUDE_DIRECTORY)
-endif(${BUILD_CLUSTER_CONTROLLER})
-
-file(
-    GLOB_RECURSE JoynrTest_GENSOURCES
-    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
-    "gen/*.cpp"
-)
-
-file(
-    GLOB_RECURSE JoynrTest_GENHEADERS
-    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
-    "gen/*.h"
-)
-
-set(
-    JoynrTest_INCLUDE_DIRECTORIES
-    ${libwebsockets_INCLUDE_DIRS}
-    ${CMAKE_CURRENT_SOURCE_DIR}
-    "${CMAKE_CURRENT_SOURCE_DIR}/.."
-    "${CMAKE_CURRENT_SOURCE_DIR}/gen/include"
-    ${JoynrCommon_PUBLIC_INCLUDE_DIRECTORY}
-    ${Joynr_PUBLIC_INCLUDE_DIRECTORY}
-    ${spdlog_SOURCE_DIR}/include
-    ${jsonserializer_PUBLIC_INCLUDE_DIRECTORY}
-    ${jsmn_PUBLIC_INCLUDE_DIRECTORY}
-    ${joynrwsruntime_PUBLIC_INCLUDE_DIRECTORY}
-)
-
-set(
-    test_TARGET_LIBRARIES
-    JoynrCommon
-    Joynr
-    jsonserializer
-)
-
-if(${USE_DBUS_COMMONAPI_COMMUNICATION})
-    set(
-        OPTIONAL_DBUS_LIBRARIES 
-        JoynrDbusRuntime
-    )
-    get_target_property(common_api_PUBLIC_INCLUDE_DIRECTORY JoynrCommonAPI PUBLIC_INCLUDE_DIRECTORY)
-    list(
-        APPEND JoynrTest_INCLUDE_DIRECTORIES
-        ${common_api_PUBLIC_INCLUDE_DIRECTORY}
-    )
-else()
-    set(OPTIONAL_DBUS_LIBRARIES "")
-endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
-
-# Visual Studio uses different directories for RELEASE and DEBUG
-if(${CMAKE_GENERATOR} MATCHES "Visual Studio")
-    set(
-        GMOCK_LINK_LIBRARY
-        optimized ${googlemock_binary_dir}/Release/${CMAKE_FIND_LIBRARY_PREFIXES}gmock${CMAKE_FIND_LIBRARY_SUFFIXES}
-        debug ${googlemock_binary_dir}/Debug/${CMAKE_FIND_LIBRARY_PREFIXES}gmock${CMAKE_FIND_LIBRARY_SUFFIXES}
-    )
-    set(
-        GTEST_LINK_LIBRARY
-        optimized ${googletest_binary_dir}/Release/${CMAKE_FIND_LIBRARY_PREFIXES}gtest${CMAKE_FIND_LIBRARY_SUFFIXES}
-        debug ${googletest_binary_dir}/Debug/${CMAKE_FIND_LIBRARY_PREFIXES}gtest${CMAKE_FIND_LIBRARY_SUFFIXES}
-    )
-
-    list(
-        APPEND test_TARGET_LIBRARIES
-        ${GTEST_LINK_LIBRARY}
-        ${GMOCK_LINK_LIBRARY}
-    )
-else()
-    list(
-        APPEND test_TARGET_LIBRARIES
-        ${GTEST_LIBRARIES}
-        ${GMOCK_LIBRARIES}
-    )
-endif(${CMAKE_GENERATOR} MATCHES "Visual Studio")
-
-set(
-    cluster_controller_test_INCLUDE_DIRECTORIES
-    ${JoynrTest_INCLUDE_DIRECTORIES}
-    ${JoynrClusterController_PUBLIC_INCLUDE_DIRECTORY}
-    ${JoynrClusterControllerRuntime_PUBLIC_INCLUDE_DIRECTORY}
-)
-
-set(
-    cluster_controller_test_TARGET_LIBRARIES
-    ${test_TARGET_LIBRARIES}
-    JoynrClusterController
-    JoynrClusterControllerRuntime
-    # Link the Dbus runtime last so that the cluster controller
-    # runtime is the default runtime
-    ${OPTIONAL_DBUS_LIBRARIES}
-)
-
-set(
-    libjoynr_test_TARGET_LIBRARIES
-    ${test_TARGET_LIBRARIES}
-    JoynrWsRuntime
-)
-
-set(
-    cluster_controller_test_HEADERS
-    "PrettyPrint.h"
-    "utils/MockObjects.h"
-    "utils/LibJoynrMockObjects.h"
-    "utils/MockLocalCapabilitiesDirectoryCallback.h"
-    ${JoynrTest_GENHEADERS}
-)
-
-file(
-    GLOB_RECURSE JsonSerailizerTest_GENSOURCES
-    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
-    #"gen/*.cpp" uncomment this when generate-test-sources prepared for jsonserializer
-    "unit-tests/jsonserializer/generated/*.cpp" #remove this when generate-test-sources prepared for jsonserializer
-)
-
-file(
-    GLOB_RECURSE JsonSerailizerTest_GENHEADERS
-    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
-    #"gen/*.h" uncomment this when generate-test-sources prepared for jsonserializer
-    "unit-tests/jsonserializer/generated/*.h" #remove this when generate-test-sources prepared for jsonserializer
-)
-
-set(
-    libjsonserializer_test_HEADERS
-    "unit-tests/jsonserializer/ExampleTypes.h"
-    ${JsonSerailizerTest_GENHEADERS}
-)
-
-set(
-    libjsonserializer_test_SOURCES
-    "unit-tests/jsonserializer/ExampleTypes.cpp"
-    ${JsonSerailizerTest_GENSOURCES}
-)
-
-set(
-    libjoynr_test_HEADERS
-    "PrettyPrint.h"
-    "utils/LibJoynrMockObjects.h"
-    ${JoynrTest_GENHEADERS}
-)
-
-set(
-    cluster_controller_test_SOURCES
-    "PrettyPrint.cpp"
-    "utils/MockObjects.cpp"
-    "utils/MockLocalCapabilitiesDirectoryCallback.cpp"
-    "TestMain.cpp"
-    ${JoynrTest_GENSOURCES}
-)
-
-set(
-    libjoynr_test_SOURCES
-    "PrettyPrint.cpp"
-    "TestMain.cpp"
-    ${JoynrTest_GENSOURCES}
-)
-
-if(${BUILD_CLUSTER_CONTROLLER})
-    ###############
-    # g_UnitTests #
-    ###############
-
-    file(
-        GLOB g_UnitTests_SOURCES
-        "unit-tests/*.cpp"
-        "unit-tests/websocket/*.cpp"
-        "unit-tests/jsonserializer/*.cpp"
-    )
-
-    if(${USE_DBUS_COMMONAPI_COMMUNICATION})
-        list(
-            APPEND g_UnitTests_SOURCES
-            "unit-tests/dbus/DbusSettingsTest.cpp"
-        )
-    endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
-
-    AddTest(
-        g_UnitTests
-        ${cluster_controller_test_HEADERS}
-        ${cluster_controller_test_SOURCES}
-        ${libjsonserializer_test_HEADERS}
-        ${libjsonserializer_test_SOURCES}
-        ${g_UnitTests_SOURCES}
-    )
-
-    target_link_libraries(
-        g_UnitTests
-        Qt5::Test
-        ${cluster_controller_test_TARGET_LIBRARIES}
-    )
-
-    target_include_directories(
-        g_UnitTests
-        SYSTEM
-        PRIVATE ${GTEST_INCLUDE_DIRS}
-        PRIVATE ${GMOCK_INCLUDE_DIRS}
-        PRIVATE ${cluster_controller_test_INCLUDE_DIRECTORIES}
-    )
-
-    ######################
-    # g_IntegrationTests #
-    ######################
-
-    file(
-       GLOB g_IntegrationTests_SOURCES
-       "integration-tests/*.cpp"
-    )
-
-    if(${USE_DBUS_COMMONAPI_COMMUNICATION})
-       list(
-           APPEND g_IntegrationTests_SOURCES
-           "integration-tests/dbus/LibJoynrRuntimeTest.cpp"
-           "integration-tests/dbus/LibJoynrDbusCommunicationTests.cpp"
-       )
-    endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
-
-    AddTest(
-       g_IntegrationTests
-       ${cluster_controller_test_HEADERS}
-       ${cluster_controller_test_SOURCES}
-       ${g_IntegrationTests_SOURCES}
-    )
-
-    target_link_libraries(g_IntegrationTests ${cluster_controller_test_TARGET_LIBRARIES})
-
-    target_include_directories(
-        g_IntegrationTests
-        SYSTEM
-        PRIVATE ${GTEST_INCLUDE_DIRS}
-        PRIVATE ${GMOCK_INCLUDE_DIRS}
-        PRIVATE ${cluster_controller_test_INCLUDE_DIRECTORIES}
-    )
-
-    ############################
-    # g_SystemIntegrationTests #
-    ############################
-
-    file(
-       GLOB g_SystemIntegrationTests_SOURCES
-       "systemintegration-tests/*.cpp"
-    )
-
-    if(${USE_DBUS_COMMONAPI_COMMUNICATION})
-       list(
-           APPEND g_SystemIntegrationTests_SOURCES
-           "systemintegration-tests/dbus/End2EndDbusTest.cpp"
-       )
-    endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
-
-    AddTest(
-       g_SystemIntegrationTests
-       ${cluster_controller_test_HEADERS}
-       ${cluster_controller_test_SOURCES}
-       ${g_SystemIntegrationTests_SOURCES}
-    )
-
-    target_link_libraries(g_SystemIntegrationTests ${cluster_controller_test_TARGET_LIBRARIES})
-
-    set_target_properties(
-       g_SystemIntegrationTests
-       PROPERTIES
-       COMPILE_FLAGS "-Wno-effc++ -Wno-unused-parameter"
-    )
-
-    target_include_directories(
-        g_SystemIntegrationTests
-        SYSTEM
-        PRIVATE ${GTEST_INCLUDE_DIRS}
-        PRIVATE ${GMOCK_INCLUDE_DIRS}
-        PRIVATE ${cluster_controller_test_INCLUDE_DIRECTORIES}
-    )
-
-    install(TARGETS g_UnitTests g_IntegrationTests g_SystemIntegrationTests
-        DESTINATION ${INSTALL_TEST_DIR} COMPONENT tests
-    )
-
-else()
-    # Build tests that run on libjoynr
-
-    ###############
-    # g_UnitTests #
-    ###############
-
-    set(
-        g_UnitTests_SOURCES
-        "unit-tests/JsonSerializerTest.cpp"
-    )
-
-    AddTest(
-        g_UnitTests
-        ${libjoynr_test_HEADERS}
-        ${libjoynr_test_SOURCES}
-        ${g_UnitTests_SOURCES}
-    )
-
-    target_link_libraries(
-        g_UnitTests
-        Qt5::Test
-        ${libjoynr_test_TARGET_LIBRARIES}
-    )
-
-    target_include_directories(
-        g_UnitTests
-        SYSTEM
-        PRIVATE ${GTEST_INCLUDE_DIRS}
-        PRIVATE ${GMOCK_INCLUDE_DIRS}
-        PRIVATE ${JoynrTest_INCLUDE_DIRECTORIES}
-    )
-
-    ############################
-    # g_SystemIntegrationTests #
-    ############################
-
-    set(
-       g_SystemIntegrationTests_SOURCES
-       "systemintegration-tests/TestConfiguration.h"
-       "systemintegration-tests/CombinedEnd2EndTest.h"
-       "systemintegration-tests/CombinedEnd2EndTest.cpp"
-       "systemintegration-tests/TestConfiguration.cpp"
-    )
-
-    AddTest(
-       g_SystemIntegrationTests
-       ${libjoynr_test_HEADERS}
-       ${libjoynr_test_SOURCES}
-       ${g_SystemIntegrationTests_SOURCES}
-    )
-
-    target_link_libraries(g_SystemIntegrationTests ${libjoynr_test_TARGET_LIBRARIES})
-
-    target_include_directories(
-        g_SystemIntegrationTests
-        SYSTEM
-        PRIVATE ${GTEST_INCLUDE_DIRS}
-        PRIVATE ${GMOCK_INCLUDE_DIRS}
-        PRIVATE ${JoynrTest_INCLUDE_DIRECTORIES}
-    )
-
-    install(TARGETS g_UnitTests g_SystemIntegrationTests
-        DESTINATION ${INSTALL_TEST_DIR} COMPONENT tests
-    )
-
-endif(${BUILD_CLUSTER_CONTROLLER})
-
-install(DIRECTORY resources
-        DESTINATION ${INSTALL_TEST_DIR} COMPONENT tests
-)
+message(STATUS "#############################################")
+message(STATUS "Configuring tests...")
+message(STATUS "#############################################\n")
+
+if(${WIN32})
+    set(DISABLE_PTHREAD_CMAKE_ARG ON)
+else()
+endif(${WIN32})
+
+
+if (USE_PLATFORM_GTEST_GMOCK)
+
+    find_package(GTest REQUIRED)
+    find_package(GMock REQUIRED)
+
+else (USE_PLATFORM_GTEST_GMOCK)
+
+    ### clone googletest git repository ###########################################################
+
+    # this repository contains both googletest and googlemock
+    AddExternalProject(
+        googletest-repo
+        DOWNLOAD_DIR "googletest-repo"
+        TIMEOUT 10
+        GIT_REPOSITORY https://github.com/google/googletest.git
+        GIT_TAG ddb8012e # there is no version tag on github; this is to make sure that a working version is used
+        CONFIGURE_COMMAND "" # Disable configuring
+        BUILD_COMMAND "" # Disable building
+    )
+
+    get_property(EP_PREFIX DIRECTORY PROPERTY EP_PREFIX)
+
+    ### Add google test ###########################################################
+
+    # build googletest library
+    AddExternalProject(
+        googletest
+        DOWNLOAD_COMMAND "" # already downloaded by googletest-repo
+        SOURCE_DIR "${EP_PREFIX}/src/googletest-repo/googletest"
+        BUILD_BYPRODUCTS "${EP_PREFIX}/src/googletest-build/${CMAKE_STATIC_LIBRARY_PREFIX}gtest${CMAKE_STATIC_LIBRARY_SUFFIX}"
+        CMAKE_ARGS -Dgtest_force_shared_crt=ON
+                   -Dgtest_disable_pthreads=${DISABLE_PTHREAD_CMAKE_ARG}
+    )
+
+    ExternalProject_Get_Property(googletest binary_dir)
+    set(googletest_binary_dir ${binary_dir})
+    message(STATUS "variable googletest_binary_dir=${googletest_binary_dir}")
+
+    # build googletest AFTER downloading the sources
+    add_dependencies(googletest googletest-repo)
+
+    # Specify include dir
+    ExternalProject_Get_Property(googletest source_dir)
+    set(googletest_source_dir ${source_dir})
+    message(STATUS "variable googletest_source_dir=${googletest_source_dir}")
+    set(GTEST_INCLUDE_DIRS ${googletest_source_dir}/include)
+    set(GTEST_LIBRARIES ${googletest_binary_dir}/libgtest.a)
+
+    ### Add google mock ###########################################################
+
+    # build googlemock library
+    AddExternalProject(
+        googlemock
+        DOWNLOAD_COMMAND "" # already downloaded by googletest-repo
+        SOURCE_DIR "${EP_PREFIX}/src/googletest-repo/googlemock"
+        BUILD_BYPRODUCTS "${EP_PREFIX}/src/googlemock-build/${CMAKE_STATIC_LIBRARY_PREFIX}gmock${CMAKE_STATIC_LIBRARY_SUFFIX}"
+        CMAKE_ARGS -Dgtest_force_shared_crt=ON
+                   -Dgtest_disable_pthreads=${DISABLE_PTHREAD_CMAKE_ARG}
+    )
+
+    ExternalProject_Get_Property(googlemock binary_dir)
+    set(googlemock_binary_dir ${binary_dir})
+    message(STATUS "variable googlemock_binary_dir=${googlemock_binary_dir}")
+
+    # build googlemock AFTER downloading the sources
+    add_dependencies(googlemock googletest-repo)
+
+    # Specify include dir
+    ExternalProject_Get_Property(googlemock source_dir)
+    set(googlemock_source_dir ${source_dir})
+    message(STATUS "variable googlemock_source_dir=${googlemock_source_dir}")
+    set(GMOCK_INCLUDE_DIRS ${googlemock_source_dir}/include)
+    set(GMOCK_LIBRARIES ${googlemock_binary_dir}/libgmock.a)
+
+endif(USE_PLATFORM_GTEST_GMOCK)
+
+include_directories(SYSTEM ${GTEST_INCLUDE_DIRS})
+include_directories(SYSTEM ${GMOCK_INCLUDE_DIRS})
+
+### copy test resources and settings ##########################################
+if(${CMAKE_GENERATOR} MATCHES "Visual Studio")
+    configure_file("resources/integrationtest.settings" "${JOYNR_BINARY_DIR}/Debug/test-resources/integrationtest.settings")
+    configure_file("resources/sslintegrationtest.settings" "${JOYNR_BINARY_DIR}/Debug/test-resources/sslintegrationtest.settings")
+    configure_file("resources/SystemIntegrationTest1.settings" "${JOYNR_BINARY_DIR}/Debug/test-resources/SystemIntegrationTest1.settings")
+    configure_file("resources/SystemIntegrationTest2.settings" "${JOYNR_BINARY_DIR}/Debug/test-resources/SystemIntegrationTest2.settings")
+    configure_file("resources/libjoynrSystemIntegration1.settings" "${JOYNR_BINARY_DIR}/Debug/test-resources/libjoynrSystemIntegration1.settings")
+    configure_file("resources/libjoynrSystemIntegration2.settings" "${JOYNR_BINARY_DIR}/Debug/test-resources/libjoynrSystemIntegration2.settings")
+    configure_file("resources/ca.crt" "${JOYNR_BINARY_DIR}/Debug/test-resources/ca.crt")
+    configure_file("resources/testclient.pem" "${JOYNR_BINARY_DIR}/Debug/test-resources/testclient.pem")
+    configure_file("resources/integrationtest.settings" "${JOYNR_BINARY_DIR}/Release/test-resources/integrationtest.settings")
+    configure_file("resources/sslintegrationtest.settings" "${JOYNR_BINARY_DIR}/Release/test-resources/sslintegrationtest.settings")
+    configure_file("resources/SystemIntegrationTest1.settings" "${JOYNR_BINARY_DIR}/Release/test-resources/SystemIntegrationTest1.settings")
+    configure_file("resources/SystemIntegrationTest2.settings" "${JOYNR_BINARY_DIR}/Release/test-resources/SystemIntegrationTest2.settings")
+    configure_file("resources/libjoynrSystemIntegration1.settings" "${JOYNR_BINARY_DIR}/Release/test-resources/libjoynrSystemIntegration1.settings")
+    configure_file("resources/libjoynrSystemIntegration2.settings" "${JOYNR_BINARY_DIR}/Release/test-resources/libjoynrSystemIntegration2.settings")
+    configure_file("resources/ca.crt" "${JOYNR_BINARY_DIR}/Release/test-resources/ca.crt")
+    configure_file("resources/testclient.pem" "${JOYNR_BINARY_DIR}/Release/test-resources/testclient.pem")
+else()
+    configure_file("resources/integrationtest.settings" "${JOYNR_BINARY_DIR}/test-resources/integrationtest.settings")
+    configure_file("resources/sslintegrationtest.settings" "${JOYNR_BINARY_DIR}/test-resources/sslintegrationtest.settings")
+    configure_file("resources/SystemIntegrationTest1.settings" "${JOYNR_BINARY_DIR}/test-resources/SystemIntegrationTest1.settings")
+    configure_file("resources/SystemIntegrationTest2.settings" "${JOYNR_BINARY_DIR}/test-resources/SystemIntegrationTest2.settings")
+    configure_file("resources/libjoynrSystemIntegration1.settings" "${JOYNR_BINARY_DIR}/test-resources/libjoynrSystemIntegration1.settings")
+    configure_file("resources/libjoynrSystemIntegration2.settings" "${JOYNR_BINARY_DIR}/test-resources/libjoynrSystemIntegration2.settings")
+    configure_file("resources/ca.crt" "${JOYNR_BINARY_DIR}/test-resources/ca.crt")
+    configure_file("resources/testclient.pem" "${JOYNR_BINARY_DIR}/test-resources/testclient.pem")
+endif(${CMAKE_GENERATOR} MATCHES "Visual Studio")
+
+
+### set up stuff common for all test targets ##################################
+
+include(AddTest.cmake)
+
+get_target_property(JoynrCommon_PUBLIC_INCLUDE_DIRECTORY JoynrCommon PUBLIC_INCLUDE_DIRECTORY)
+get_target_property(Joynr_PUBLIC_INCLUDE_DIRECTORY Joynr PUBLIC_INCLUDE_DIRECTORY)
+get_target_property(jsonserializer_PUBLIC_INCLUDE_DIRECTORY jsonserializer PUBLIC_INCLUDE_DIRECTORY)
+get_target_property(jsmn_PUBLIC_INCLUDE_DIRECTORY jsmn PUBLIC_INCLUDE_DIRECTORY)
+
+get_target_property(joynrwsruntime_PUBLIC_INCLUDE_DIRECTORY JoynrWsRuntime PUBLIC_INCLUDE_DIRECTORY)
+get_target_property(joynrasyncipcruntime_PUBLIC_INCLUDE_DIRECTORY JoynrAsyncIPCRuntime PUBLIC_INCLUDE_DIRECTORY)
+
+if(${BUILD_CLUSTER_CONTROLLER})
+    get_target_property(JoynrClusterController_PUBLIC_INCLUDE_DIRECTORY JoynrClusterController PUBLIC_INCLUDE_DIRECTORY)
+    get_target_property(JoynrClusterControllerRuntime_PUBLIC_INCLUDE_DIRECTORY JoynrClusterControllerRuntime PUBLIC_INCLUDE_DIRECTORY)
+endif(${BUILD_CLUSTER_CONTROLLER})
+
+file(
+    GLOB_RECURSE JoynrTest_GENSOURCES
+    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+    "gen/*.cpp"
+)
+
+file(
+    GLOB_RECURSE JoynrTest_GENHEADERS
+    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+    "gen/*.h"
+)
+
+set(
+    JoynrTest_INCLUDE_DIRECTORIES
+    ${libwebsockets_INCLUDE_DIRS}
+    ${CMAKE_CURRENT_SOURCE_DIR}
+    "${CMAKE_CURRENT_SOURCE_DIR}/.."
+    "${CMAKE_CURRENT_SOURCE_DIR}/gen/include"
+    ${JoynrCommon_PUBLIC_INCLUDE_DIRECTORY}
+    ${Joynr_PUBLIC_INCLUDE_DIRECTORY}
+    ${spdlog_SOURCE_DIR}/include
+    ${jsonserializer_PUBLIC_INCLUDE_DIRECTORY}
+    ${jsmn_PUBLIC_INCLUDE_DIRECTORY}
+    ${joynrwsruntime_PUBLIC_INCLUDE_DIRECTORY}
+    ${joynrasyncipcruntime_PUBLIC_INCLUDE_DIRECTORY}
+)
+
+set(
+    test_TARGET_LIBRARIES
+    JoynrCommon
+    Joynr
+    jsonserializer
+)
+
+set(
+    OPTIONAL_ASYNCIPC_LIBRARIES
+    JoynrAsyncIPCRuntime
+)
+
+if(${USE_DBUS_COMMONAPI_COMMUNICATION})
+    set(
+        OPTIONAL_DBUS_LIBRARIES 
+        JoynrDbusRuntime
+    )
+    get_target_property(common_api_PUBLIC_INCLUDE_DIRECTORY JoynrCommonAPI PUBLIC_INCLUDE_DIRECTORY)
+    list(
+        APPEND JoynrTest_INCLUDE_DIRECTORIES
+        ${common_api_PUBLIC_INCLUDE_DIRECTORY}
+    )
+else()
+    set(OPTIONAL_DBUS_LIBRARIES "")
+endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
+
+# Visual Studio uses different directories for RELEASE and DEBUG
+if(${CMAKE_GENERATOR} MATCHES "Visual Studio")
+    set(
+        GMOCK_LINK_LIBRARY
+        optimized ${googlemock_binary_dir}/Release/${CMAKE_FIND_LIBRARY_PREFIXES}gmock${CMAKE_FIND_LIBRARY_SUFFIXES}
+        debug ${googlemock_binary_dir}/Debug/${CMAKE_FIND_LIBRARY_PREFIXES}gmock${CMAKE_FIND_LIBRARY_SUFFIXES}
+    )
+    set(
+        GTEST_LINK_LIBRARY
+        optimized ${googletest_binary_dir}/Release/${CMAKE_FIND_LIBRARY_PREFIXES}gtest${CMAKE_FIND_LIBRARY_SUFFIXES}
+        debug ${googletest_binary_dir}/Debug/${CMAKE_FIND_LIBRARY_PREFIXES}gtest${CMAKE_FIND_LIBRARY_SUFFIXES}
+    )
+
+    list(
+        APPEND test_TARGET_LIBRARIES
+        ${GTEST_LINK_LIBRARY}
+        ${GMOCK_LINK_LIBRARY}
+    )
+else()
+    list(
+        APPEND test_TARGET_LIBRARIES
+        ${GTEST_LIBRARIES}
+        ${GMOCK_LIBRARIES}
+    )
+endif(${CMAKE_GENERATOR} MATCHES "Visual Studio")
+
+set(
+    cluster_controller_test_INCLUDE_DIRECTORIES
+    ${JoynrTest_INCLUDE_DIRECTORIES}
+    ${JoynrClusterController_PUBLIC_INCLUDE_DIRECTORY}
+    ${JoynrClusterControllerRuntime_PUBLIC_INCLUDE_DIRECTORY}
+)
+
+set(
+    cluster_controller_test_TARGET_LIBRARIES
+    ${test_TARGET_LIBRARIES}
+    JoynrClusterController
+    JoynrClusterControllerRuntime
+    # Link the Dbus runtime last so that the cluster controller
+    # runtime is the default runtime
+    ${OPTIONAL_DBUS_LIBRARIES}
+    ${OPTIONAL_ASYNCIPC_LIBRARIES}
+)
+
+set(
+    libjoynr_test_TARGET_LIBRARIES
+    ${test_TARGET_LIBRARIES}
+    JoynrWsRuntime
+    JoynrAsyncIPCRuntime
+)
+
+set(
+    cluster_controller_test_HEADERS
+    "PrettyPrint.h"
+    "utils/MockObjects.h"
+    "utils/LibJoynrMockObjects.h"
+    "utils/MockLocalCapabilitiesDirectoryCallback.h"
+    ${JoynrTest_GENHEADERS}
+)
+
+file(
+    GLOB_RECURSE JsonSerailizerTest_GENSOURCES
+    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+    #"gen/*.cpp" uncomment this when generate-test-sources prepared for jsonserializer
+    "unit-tests/jsonserializer/generated/*.cpp" #remove this when generate-test-sources prepared for jsonserializer
+)
+
+file(
+    GLOB_RECURSE JsonSerailizerTest_GENHEADERS
+    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+    #"gen/*.h" uncomment this when generate-test-sources prepared for jsonserializer
+    "unit-tests/jsonserializer/generated/*.h" #remove this when generate-test-sources prepared for jsonserializer
+)
+
+set(
+    libjsonserializer_test_HEADERS
+    "unit-tests/jsonserializer/ExampleTypes.h"
+    ${JsonSerailizerTest_GENHEADERS}
+)
+
+set(
+    libjsonserializer_test_SOURCES
+    "unit-tests/jsonserializer/ExampleTypes.cpp"
+    ${JsonSerailizerTest_GENSOURCES}
+)
+
+set(
+    libjoynr_test_HEADERS
+    "PrettyPrint.h"
+    "utils/LibJoynrMockObjects.h"
+    ${JoynrTest_GENHEADERS}
+)
+
+set(
+    cluster_controller_test_SOURCES
+    "PrettyPrint.cpp"
+    "utils/MockObjects.cpp"
+    "utils/MockLocalCapabilitiesDirectoryCallback.cpp"
+    "TestMain.cpp"
+    ${JoynrTest_GENSOURCES}
+)
+
+set(
+    libjoynr_test_SOURCES
+    "PrettyPrint.cpp"
+    "TestMain.cpp"
+    ${JoynrTest_GENSOURCES}
+)
+
+if(${BUILD_CLUSTER_CONTROLLER})
+    ###############
+    # g_UnitTests #
+    ###############
+
+    file(
+        GLOB g_UnitTests_SOURCES
+        "unit-tests/*.cpp"
+        "unit-tests/websocket/*.cpp"
+        "unit-tests/asyncipc/*.cpp"
+        "unit-tests/jsonserializer/*.cpp"
+    )
+
+    if(${USE_DBUS_COMMONAPI_COMMUNICATION})
+        list(
+            APPEND g_UnitTests_SOURCES
+            "unit-tests/dbus/DbusSettingsTest.cpp"
+        )
+    endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
+
+    AddTest(
+        g_UnitTests
+        ${cluster_controller_test_HEADERS}
+        ${cluster_controller_test_SOURCES}
+        ${libjsonserializer_test_HEADERS}
+        ${libjsonserializer_test_SOURCES}
+        ${g_UnitTests_SOURCES}
+    )
+
+    target_link_libraries(
+        g_UnitTests
+        Qt5::Test
+        ${cluster_controller_test_TARGET_LIBRARIES}
+    )
+
+    target_include_directories(
+        g_UnitTests
+        SYSTEM
+        PRIVATE ${GTEST_INCLUDE_DIRS}
+        PRIVATE ${GMOCK_INCLUDE_DIRS}
+        PRIVATE ${cluster_controller_test_INCLUDE_DIRECTORIES}
+    )
+
+    ######################
+    # g_IntegrationTests #
+    ######################
+
+    file(
+       GLOB g_IntegrationTests_SOURCES
+       "integration-tests/*.cpp"
+       "integration-tests/asyncipc/*.cpp"
+    )
+
+    if(${USE_DBUS_COMMONAPI_COMMUNICATION})
+       list(
+           APPEND g_IntegrationTests_SOURCES
+           "integration-tests/dbus/LibJoynrRuntimeTest.cpp"
+           "integration-tests/dbus/LibJoynrDbusCommunicationTests.cpp"
+       )
+    endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
+
+    AddTest(
+       g_IntegrationTests
+       ${cluster_controller_test_HEADERS}
+       ${cluster_controller_test_SOURCES}
+       ${g_IntegrationTests_SOURCES}
+    )
+
+    target_link_libraries(g_IntegrationTests ${cluster_controller_test_TARGET_LIBRARIES})
+
+    target_include_directories(
+        g_IntegrationTests
+        SYSTEM
+        PRIVATE ${GTEST_INCLUDE_DIRS}
+        PRIVATE ${GMOCK_INCLUDE_DIRS}
+        PRIVATE ${cluster_controller_test_INCLUDE_DIRECTORIES}
+    )
+
+    ############################
+    # g_SystemIntegrationTests #
+    ############################
+
+    file(
+       GLOB g_SystemIntegrationTests_SOURCES
+       "systemintegration-tests/*.cpp"
+       "systemintegration-tests/asyncipc/*.cpp"
+    )
+
+    if(${USE_DBUS_COMMONAPI_COMMUNICATION})
+       list(
+           APPEND g_SystemIntegrationTests_SOURCES
+           "systemintegration-tests/dbus/End2EndDbusTest.cpp"
+       )
+    endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
+
+    AddTest(
+       g_SystemIntegrationTests
+       ${cluster_controller_test_HEADERS}
+       ${cluster_controller_test_SOURCES}
+       ${g_SystemIntegrationTests_SOURCES}
+    )
+
+    target_link_libraries(g_SystemIntegrationTests ${cluster_controller_test_TARGET_LIBRARIES})
+
+    set_target_properties(
+       g_SystemIntegrationTests
+       PROPERTIES
+       COMPILE_FLAGS "-Wno-effc++ -Wno-unused-parameter"
+    )
+
+    target_include_directories(
+        g_SystemIntegrationTests
+        SYSTEM
+        PRIVATE ${GTEST_INCLUDE_DIRS}
+        PRIVATE ${GMOCK_INCLUDE_DIRS}
+        PRIVATE ${cluster_controller_test_INCLUDE_DIRECTORIES}
+    )
+
+    install(TARGETS g_UnitTests g_IntegrationTests g_SystemIntegrationTests
+        DESTINATION ${INSTALL_TEST_DIR} COMPONENT tests
+    )
+
+else()
+    # Build tests that run on libjoynr
+
+    ###############
+    # g_UnitTests #
+    ###############
+
+    set(
+        g_UnitTests_SOURCES
+        "unit-tests/JsonSerializerTest.cpp"
+    )
+
+    AddTest(
+        g_UnitTests
+        ${libjoynr_test_HEADERS}
+        ${libjoynr_test_SOURCES}
+        ${g_UnitTests_SOURCES}
+    )
+
+    target_link_libraries(
+        g_UnitTests
+        Qt5::Test
+        ${libjoynr_test_TARGET_LIBRARIES}
+    )
+
+    target_include_directories(
+        g_UnitTests
+        SYSTEM
+        PRIVATE ${GTEST_INCLUDE_DIRS}
+        PRIVATE ${GMOCK_INCLUDE_DIRS}
+        PRIVATE ${JoynrTest_INCLUDE_DIRECTORIES}
+    )
+
+    ############################
+    # g_SystemIntegrationTests #
+    ############################
+
+    set(
+       g_SystemIntegrationTests_SOURCES
+       "systemintegration-tests/TestConfiguration.h"
+       "systemintegration-tests/CombinedEnd2EndTest.h"
+       "systemintegration-tests/CombinedEnd2EndTest.cpp"
+       "systemintegration-tests/TestConfiguration.cpp"
+    )
+
+    AddTest(
+       g_SystemIntegrationTests
+       ${libjoynr_test_HEADERS}
+       ${libjoynr_test_SOURCES}
+       ${g_SystemIntegrationTests_SOURCES}
+    )
+
+    target_link_libraries(g_SystemIntegrationTests ${libjoynr_test_TARGET_LIBRARIES})
+
+    target_include_directories(
+        g_SystemIntegrationTests
+        SYSTEM
+        PRIVATE ${GTEST_INCLUDE_DIRS}
+        PRIVATE ${GMOCK_INCLUDE_DIRS}
+        PRIVATE ${JoynrTest_INCLUDE_DIRECTORIES}
+    )
+
+    install(TARGETS g_UnitTests g_SystemIntegrationTests
+        DESTINATION ${INSTALL_TEST_DIR} COMPONENT tests
+    )
+
+endif(${BUILD_CLUSTER_CONTROLLER})
+
+install(DIRECTORY resources
+        DESTINATION ${INSTALL_TEST_DIR} COMPONENT tests
+)
diff --git a/examples/radio-app/.gitignore b/examples/radio-app/.gitignore
index ec44ad1..df03739 100644
--- a/examples/radio-app/.gitignore
+++ b/examples/radio-app/.gitignore
@@ -1,14 +1,27 @@
-target
-.classpath
-.project
-.settings
-gen
-bin
-.checkstyle
-src/main/generated*
-CMakeLists.txt.user
-/provider-joynr.properties
-/joynr_participantIds.properties
-/consumer-joynr.properties
-/joynr.properties
-/gps-consumer-joynr.properties
+target
+.classpath
+.project
+.settings
+gen
+bin
+.checkstyle
+src/main/generated*
+CMakeLists.txt.user
+/provider-joynr.properties
+/joynr_participantIds.properties
+/consumer-joynr.properties
+/joynr.properties
+/gps-consumer-joynr.properties
+/CMakeFiles/
+/cmake_install.cmake
+/CMakeCache.txt
+/Makefile
+/moc_QtAddFavoriteStationErrorEnum.cpp
+/moc_QtCountry.cpp
+/moc_QtGeoPosition.cpp
+/moc_QtRadioStation.cpp
+/radio-app_automoc.cpp
+/radio-app-consumer-cc_automoc.cpp
+/radio-app-consumer-ws_automoc.cpp
+/radio-app-provider-cc_automoc.cpp
+/radio-app-provider-ws_automoc.cpp
diff --git a/examples/radio-app/CMakeLists.txt b/examples/radio-app/CMakeLists.txt
index 083399d..137b5d4 100644
--- a/examples/radio-app/CMakeLists.txt
+++ b/examples/radio-app/CMakeLists.txt
@@ -1,317 +1,348 @@
-cmake_minimum_required(VERSION 2.8.11)
-
-######## Project settings ########
-project(radio-app-0.14.1)
-
-# Compile to a bin directory current directory
-set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "bin/")
-add_definitions("-std=gnu++0x")
-
-set(
-    JOYNR_SERVER
-    "localhost:8080"
-    CACHE STRING "joynr infrastructure server (BounceProxy, CapDir, ChannelUrlDir) to use in settings files."
-)
-
-message(STATUS "option JOYNR_SERVER=${JOYNR_SERVER}")
-
-option(
-    ENABLE_CLANG_FORMATTER
-    "Use clang-formatter to format source code?"
-    ON
-)
-message(STATUS "option ENABLE_CLANG_FORMATTER=" ${ENABLE_CLANG_FORMATTER})
-
-
-##### Start of build ####################
-
-# Pull in the Joynr configuration
-find_package(Joynr 0.14.1 REQUIRED)
-message(STATUS "joynr variable Joynr_LIB_COMMON_INCLUDE_DIRS=${Joynr_LIB_COMMON_INCLUDE_DIRS}")
-message(STATUS "joynr variable Joynr_LIB_INPROCESS_INCLUDE_DIRS=${Joynr_LIB_INPROCESS_INCLUDE_DIRS}")
-message(STATUS "joynr variable Joynr_LIB_DBUS_INCLUDE_DIRS=${Joynr_LIB_DBUS_INCLUDE_DIRS}")
-message(STATUS "joynr variable Joynr_LIB_WS_INCLUDE_DIRS=${Joynr_LIB_WS_INCLUDE_DIRS}")
-message(STATUS "joynr variable Joynr_LIB_COMMON_LIBRARIES=${Joynr_LIB_COMMON_LIBRARIES}")
-message(STATUS "joynr variable Joynr_LIB_INPROCESS_LIBRARIES=${Joynr_LIB_INPROCESS_LIBRARIES}")
-message(STATUS "joynr variable Joynr_LIB_DBUS_LIBRARIES=${Joynr_LIB_DBUS_LIBRARIES}")
-message(STATUS "joynr variable Joynr_LIB_WS_LIBRARIES=${Joynr_LIB_WS_LIBRARIES}")
-message(STATUS "joynr variable Joynr_EXECUTABLES=${Joynr_EXECUTABLES}")
-message(STATUS "joynr variable Joynr_RESOURCES_DIR=${Joynr_RESOURCES_DIR}")
-message(STATUS "joynr variable USE_DBUS_COMMONAPI_COMMUNICATION=${USE_DBUS_COMMONAPI_COMMUNICATION}")
-
-######## Add Boost ########
-
-find_package(Boost 1.56.0 REQUIRED
-    COMPONENTS
-    filesystem
-)
-message(STATUS "variable Boost_LIBRARIES=${Boost_LIBRARIES}")
-message(STATUS "variable Boost_INCLUDE_DIRS=${Boost_INCLUDE_DIRS}")
-
-include_directories(${Boost_INCLUDE_DIRS})
-
-##### Helper variables for using generated code ###########
-
-file(GLOB_RECURSE GENERATED_HEADERS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
-	"src/main/generated-cpp/include/*.h"
-)
-
-file(GLOB_RECURSE GENERATED_SOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
-	"src/main/generated-cpp/*.cpp"
-)
-
-set(GENERATED_INCLUDE_DIRS
-	"src/main/generated-cpp/include"
-)
-
-# Put the Joynr_LIB_COMMON_INCLUDE_DIRS last so that it is possible to override types
-# defined in libjoynr
-include_directories(
-    ${GENERATED_INCLUDE_DIRS}
-    ${Joynr_LIB_COMMON_INCLUDE_DIRS}
-)
-
-# Use the generated header files for the consumer application
-set(radio-app-consumer_HEADERS
-    "src/main/cpp/MyRadioHelper.h"
-)
-
-# Use the generated source files for the consumer application
-set(radio-app-consumer_SOURCES
-    "src/main/cpp/MyRadioHelper.cpp"
-    "src/main/cpp/MyRadioConsumerApplication.cpp"
-)
-
-# Use the generated header files for the provider application
-set(radio-app-provider_HEADERS
-    ${GENERATED_HEADERS}
-    "src/main/cpp/MyRadioProvider.h"
-    "src/main/cpp/MyRadioHelper.h"
-    "src/main/cpp/TrafficServiceBroadcastFilter.h"
-    "src/main/cpp/GeocastBroadcastFilter.h"
-)
-
-# Use the generated source files for the provider application
-set(radio-app-provider_SOURCES
-    "src/main/cpp/MyRadioProvider.cpp"
-    "src/main/cpp/MyRadioHelper.cpp"
-    "src/main/cpp/MyRadioProviderApplication.cpp"
-    "src/main/cpp/TrafficServiceBroadcastFilter.cpp"
-    "src/main/cpp/GeocastBroadcastFilter.cpp"
-)
-
-# Link with the joynr libraries
-set(radio-app_LIBRARIES
-    ${Joynr_LIB_COMMON_LIBRARIES}
-    ${Boost_LIBRARIES}
-)
-
-# Put the generated code into a library and put the library in the bin directory
-set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
-
-if(${USE_DBUS_COMMONAPI_COMMUNICATION})
-    find_package(PkgConfig)
-    pkg_check_modules(DBUS1 REQUIRED dbus-1)
-    message(STATUS "variable DBUS_INCLUDE_DIRS=" ${DBUS1_INCLUDE_DIRS})
-    message(STATUS "variable DBUS1_LIBRARIES=" ${DBUS1_LIBRARIES})
-    message(STATUS "variable DBUS1_LIBRARY_DIRS=" ${DBUS1_LIBRARY_DIRS})
-    pkg_check_modules(COMMONAPI REQUIRED CommonAPI=2.1.4)
-    message(STATUS "variable COMMONAPI_INCLUDE_DIRS=" ${COMMONAPI_INCLUDE_DIRS})
-    message(STATUS "variable COMMONAPI_LIBRARIES=" ${COMMONAPI_LIBRARIES})
-    message(STATUS "variable COMMONAPI_VERSION=" ${COMMONAPI_VERSION})
-    pkg_check_modules(COMMONAPI_DBUS REQUIRED CommonAPI-DBus=2.1.4)
-    message(STATUS "variable COMMONAPI_DBUS_INCLUDE_DIRS=" ${COMMONAPI_DBUS_INCLUDE_DIRS})
-    message(STATUS "variable COMMONAPI_DBUS_LIBRARIES=" ${COMMONAPI_DBUS_LIBRARIES})
-    message(STATUS "variable COMMONAPI_DBUS_VERSION=" ${COMMONAPI_DBUS_VERSION})
-
-    link_directories(${DBUS1_LIBRARY_DIRS} ${COMMONAPI_LIBRARY_DIRS} ${COMMONAPI_DBUS_LIBRARY_DIRS})
-endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
-
-add_library(radio-app SHARED
-    ${GENERATED_HEADERS}
-    ${GENERATED_SOURCES}
-)
-
-target_link_libraries(radio-app
-    ${radio-app_LIBRARIES}
-)
-
-# Compile the provider application (running in-process with cluster controller)
-add_executable(radio-app-provider-cc
-    ${radio-app-provider_HEADERS}
-    ${radio-app-provider_SOURCES}
-)
-
-# Compile the consumer application (running in-process with cluster controller)
-add_executable(radio-app-consumer-cc
-    ${radio-app-consumer_HEADERS}
-    ${radio-app-consumer_SOURCES}
-)
-
-# Link the provider application
-target_link_libraries(radio-app-provider-cc
-    radio-app
-    ${radio-app_LIBRARIES}
-    ${Joynr_LIB_INPROCESS_LIBRARIES}
-)
-
-# Link the consumer application
-target_link_libraries(radio-app-consumer-cc
-    radio-app
-    ${radio-app_LIBRARIES}
-    ${Joynr_LIB_INPROCESS_LIBRARIES}
-)
-
-# copy joynr resources and settings
-file(
-    COPY ${Joynr_RESOURCES_DIR}
-    DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
-)
-
-
-
-# copy joynr executables
-file(
-    COPY ${Joynr_EXECUTABLES}
-    DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
-)
-
-# Compile the provider application (requires: running cluster controller)
-# Communicates via WebSockets with cluster controller
-add_executable(radio-app-provider-ws
-    ${radio-app-provider_HEADERS}
-    ${radio-app-provider_SOURCES}
-)
-
-# Link the provider application
-target_link_libraries(radio-app-provider-ws
-    radio-app
-    ${radio-app_LIBRARIES}
-    ${Joynr_LIB_WS_LIBRARIES}
-)
-
-# Compile the consumer application (requires: running cluster controller)
-# Communicates via WebSockets with cluster controller
-add_executable(radio-app-consumer-ws
-    ${radio-app-consumer_HEADERS}
-    ${radio-app-consumer_SOURCES}
-)
-
-# Link the consumer application
-target_link_libraries(radio-app-consumer-ws
-    radio-app
-    ${radio-app_LIBRARIES}
-    ${Joynr_LIB_WS_LIBRARIES}
-)
-
-install(TARGETS
-            radio-app-provider-ws
-            radio-app-consumer-ws
-            radio-app-provider-cc
-            radio-app-consumer-cc
-        RUNTIME DESTINATION bin COMPONENT bin
-)
-
-if(${USE_DBUS_COMMONAPI_COMMUNICATION})
-    # Compile the provider application (requires: Dbus and running cluster controller)
-    # Communicates via Dbus with cluster controller
-    add_executable(radio-app-provider-dbus
-        ${radio-app-provider_HEADERS}
-        ${radio-app-provider_SOURCES}
-    )
-
-    # Link the provider application
-    target_link_libraries(radio-app-provider-dbus
-        radio-app
-        ${radio-app_LIBRARIES}
-        ${Joynr_LIB_DBUS_LIBRARIES}
-    )
-
-    # Compile the consumer application (requires: Dbus and running cluster controller)
-    # Communicates via Dbus with cluster controller
-    add_executable(radio-app-consumer-dbus
-        ${radio-app-consumer_HEADERS}
-        ${radio-app-consumer_SOURCES}
-    )
-
-    # Link the consumer application
-    target_link_libraries(radio-app-consumer-dbus
-        radio-app
-        ${radio-app_LIBRARIES}
-        ${Joynr_LIB_DBUS_LIBRARIES}
-    )
-
-    install(TARGETS
-                radio-app-provider-dbus
-                radio-app-consumer-dbus
-            RUNTIME DESTINATION bin COMPONENT bin
-    )
-
-endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
-
-if(${ENABLE_CLANG_FORMATTER})
-    set(COMMENT "running C++ code formatter: clang-format")
-    set(COMMENT "${COMMENT}\nworking directory: ${CMAKE_CURRENT_SOURCE_DIR}")
-    set(COMMENT "${COMMENT}\nprocessing header files:\n${radio-app-provider_HEADERS}")
-    set(COMMENT "${COMMENT}\nprocessing source files:\n${radio-app-provider_SOURCES}")
-
-    add_custom_command(
-        TARGET radio-app-provider-cc
-        PRE_BUILD
-        COMMAND clang-format -i
-            ${radio-app-provider_HEADERS}
-            ${radio-app-provider_SOURCES}
-        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
-        COMMENT "${COMMENT}"
-        VERBATIM
-    )
-
-    set(COMMENT "running C++ code formatter: clang-format")
-    set(COMMENT "${COMMENT}\nworking directory: ${CMAKE_CURRENT_SOURCE_DIR}")
-    set(COMMENT "${COMMENT}\nprocessing header files:\n${radio-app-consumer_HEADERS}")
-    set(COMMENT "${COMMENT}\nprocessing source files:\n${radio-app-consumer_SOURCES}")
-
-    add_custom_command(
-        TARGET radio-app-consumer-cc
-        PRE_BUILD
-        COMMAND clang-format -i
-            ${radio-app-consumer_HEADERS}
-            ${radio-app-consumer_SOURCES}
-        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
-        COMMENT "${COMMENT}"
-        VERBATIM
-    )
-endif(${ENABLE_CLANG_FORMATTER})
-
-# Set Visual Studio to do parallel builds
-IF(${CMAKE_GENERATOR} MATCHES "Visual Studio")
-        set (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${MSVCC_AUTO_INCLUDE} /MP")
-
-        # When compiling with DEBUG turn on runtime error checks (RTC1) and
-        # Buffer Overflow detection (GS)
-        set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${MSVCC_AUTO_INCLUDE} /RTC1 /GS /MP")
-ENDIF(${CMAKE_GENERATOR} MATCHES "Visual Studio")
-
-
-# Visual Studio compiles to Debug and Release directories
-IF(${CMAKE_GENERATOR} MATCHES "Visual Studio")
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-provider.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug/resources/radio-app-provider.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-provider.dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug/resources/radio-app-provider.dbus.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-consumer.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug/resources/radio-app-consumer.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-consumer.dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug//resources/radio-app-consumer.dbus.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/cc.messaging.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug/resources/cc.messaging.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/cc.dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug//resources/cc.dbus.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-provider.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release/resources/radio-app-provider.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-provider.dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release/resources/radio-app-provider.dbus.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-consumer.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release/resources/radio-app-consumer.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-consumer.dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release//resources/radio-app-consumer.dbus.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/cc.messaging.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release/resources/cc.messaging.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/cc.dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release//resources/cc.dbus.settings)
-ELSE()
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-provider.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/radio-app-provider.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-provider.dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/radio-app-provider.dbus.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-consumer.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/radio-app-consumer.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-consumer.dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/radio-app-consumer.dbus.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/cc.messaging.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/cc.messaging.settings)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/cc.dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/cc.dbus.settings)
-ENDIF(${CMAKE_GENERATOR} MATCHES "Visual Studio")
+cmake_minimum_required(VERSION 2.8.11)
+
+######## Project settings ########
+project(radio-app-0.14.1)
+
+# Compile to a bin directory current directory
+set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "bin/")
+add_definitions("-std=gnu++0x")
+
+set(
+    JOYNR_SERVER
+    "localhost:8080"
+    CACHE STRING "joynr infrastructure server (BounceProxy, CapDir, ChannelUrlDir) to use in settings files."
+)
+
+message(STATUS "option JOYNR_SERVER=${JOYNR_SERVER}")
+
+option(
+    ENABLE_CLANG_FORMATTER
+    "Use clang-formatter to format source code?"
+    ON
+)
+message(STATUS "option ENABLE_CLANG_FORMATTER=" ${ENABLE_CLANG_FORMATTER})
+
+
+##### Start of build ####################
+
+# Pull in the Joynr configuration
+find_package(Joynr 0.14.1 REQUIRED)
+message(STATUS "joynr variable Joynr_LIB_COMMON_INCLUDE_DIRS=${Joynr_LIB_COMMON_INCLUDE_DIRS}")
+message(STATUS "joynr variable Joynr_LIB_INPROCESS_INCLUDE_DIRS=${Joynr_LIB_INPROCESS_INCLUDE_DIRS}")
+message(STATUS "joynr variable Joynr_LIB_DBUS_INCLUDE_DIRS=${Joynr_LIB_DBUS_INCLUDE_DIRS}")
+message(STATUS "joynr variable JOYNR_LIB_ASYNCIPC_INCLUDE_DIRS=${JOYNR_LIB_ASYNCIPC_INCLUDE_DIRS}")
+message(STATUS "joynr variable Joynr_LIB_WS_INCLUDE_DIRS=${Joynr_LIB_WS_INCLUDE_DIRS}")
+message(STATUS "joynr variable Joynr_LIB_COMMON_LIBRARIES=${Joynr_LIB_COMMON_LIBRARIES}")
+message(STATUS "joynr variable Joynr_LIB_INPROCESS_LIBRARIES=${Joynr_LIB_INPROCESS_LIBRARIES}")
+message(STATUS "joynr variable Joynr_LIB_DBUS_LIBRARIES=${Joynr_LIB_DBUS_LIBRARIES}")
+message(STATUS "joynr variable JOYNR_LIB_ASYNCIPC_LIBRARIES=${JOYNR_LIB_ASYNCIPC_LIBRARIES}")
+message(STATUS "joynr variable Joynr_LIB_WS_LIBRARIES=${Joynr_LIB_WS_LIBRARIES}")
+message(STATUS "joynr variable Joynr_EXECUTABLES=${Joynr_EXECUTABLES}")
+message(STATUS "joynr variable Joynr_RESOURCES_DIR=${Joynr_RESOURCES_DIR}")
+
+message(STATUS "joynr variable USE_DBUS_COMMONAPI_COMMUNICATION=${USE_DBUS_COMMONAPI_COMMUNICATION}")
+
+######## Add Boost ########
+
+find_package(Boost 1.56.0 REQUIRED
+    COMPONENTS
+    filesystem
+)
+message(STATUS "variable Boost_LIBRARIES=${Boost_LIBRARIES}")
+message(STATUS "variable Boost_INCLUDE_DIRS=${Boost_INCLUDE_DIRS}")
+
+include_directories(${Boost_INCLUDE_DIRS})
+
+##### Helper variables for using generated code ###########
+
+file(GLOB_RECURSE GENERATED_HEADERS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+	"src/main/generated-cpp/include/*.h"
+)
+
+file(GLOB_RECURSE GENERATED_SOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+	"src/main/generated-cpp/*.cpp"
+)
+
+set(GENERATED_INCLUDE_DIRS
+	"src/main/generated-cpp/include"
+)
+
+# Put the Joynr_LIB_COMMON_INCLUDE_DIRS last so that it is possible to override types
+# defined in libjoynr
+include_directories(
+    ${GENERATED_INCLUDE_DIRS}
+    ${Joynr_LIB_COMMON_INCLUDE_DIRS}
+)
+
+# Use the generated header files for the consumer application
+set(radio-app-consumer_HEADERS
+    "src/main/cpp/MyRadioHelper.h"
+)
+
+# Use the generated source files for the consumer application
+set(radio-app-consumer_SOURCES
+    "src/main/cpp/MyRadioHelper.cpp"
+    "src/main/cpp/MyRadioConsumerApplication.cpp"
+)
+
+# Use the generated header files for the provider application
+set(radio-app-provider_HEADERS
+    ${GENERATED_HEADERS}
+    "src/main/cpp/MyRadioProvider.h"
+    "src/main/cpp/MyRadioHelper.h"
+    "src/main/cpp/TrafficServiceBroadcastFilter.h"
+    "src/main/cpp/GeocastBroadcastFilter.h"
+)
+
+# Use the generated source files for the provider application
+set(radio-app-provider_SOURCES
+    "src/main/cpp/MyRadioProvider.cpp"
+    "src/main/cpp/MyRadioHelper.cpp"
+    "src/main/cpp/MyRadioProviderApplication.cpp"
+    "src/main/cpp/TrafficServiceBroadcastFilter.cpp"
+    "src/main/cpp/GeocastBroadcastFilter.cpp"
+)
+
+# Link with the joynr libraries
+set(radio-app_LIBRARIES
+    ${Joynr_LIB_COMMON_LIBRARIES}
+    ${Boost_LIBRARIES}
+)
+
+# Put the generated code into a library and put the library in the bin directory
+set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
+
+if(${USE_DBUS_COMMONAPI_COMMUNICATION})
+    find_package(PkgConfig)
+    pkg_check_modules(DBUS1 REQUIRED dbus-1)
+    message(STATUS "variable DBUS_INCLUDE_DIRS=" ${DBUS1_INCLUDE_DIRS})
+    message(STATUS "variable DBUS1_LIBRARIES=" ${DBUS1_LIBRARIES})
+    message(STATUS "variable DBUS1_LIBRARY_DIRS=" ${DBUS1_LIBRARY_DIRS})
+    pkg_check_modules(COMMONAPI REQUIRED CommonAPI=2.1.4)
+    message(STATUS "variable COMMONAPI_INCLUDE_DIRS=" ${COMMONAPI_INCLUDE_DIRS})
+    message(STATUS "variable COMMONAPI_LIBRARIES=" ${COMMONAPI_LIBRARIES})
+    message(STATUS "variable COMMONAPI_VERSION=" ${COMMONAPI_VERSION})
+    pkg_check_modules(COMMONAPI_DBUS REQUIRED CommonAPI-DBus=2.1.4)
+    message(STATUS "variable COMMONAPI_DBUS_INCLUDE_DIRS=" ${COMMONAPI_DBUS_INCLUDE_DIRS})
+    message(STATUS "variable COMMONAPI_DBUS_LIBRARIES=" ${COMMONAPI_DBUS_LIBRARIES})
+    message(STATUS "variable COMMONAPI_DBUS_VERSION=" ${COMMONAPI_DBUS_VERSION})
+
+    link_directories(${DBUS1_LIBRARY_DIRS} ${COMMONAPI_LIBRARY_DIRS} ${COMMONAPI_DBUS_LIBRARY_DIRS})
+endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
+
+add_library(radio-app SHARED
+    ${GENERATED_HEADERS}
+    ${GENERATED_SOURCES}
+)
+
+target_link_libraries(radio-app
+    ${radio-app_LIBRARIES}
+)
+
+# Compile the provider application (running in-process with cluster controller)
+add_executable(radio-app-provider-cc
+    ${radio-app-provider_HEADERS}
+    ${radio-app-provider_SOURCES}
+)
+
+# Compile the consumer application (running in-process with cluster controller)
+add_executable(radio-app-consumer-cc
+    ${radio-app-consumer_HEADERS}
+    ${radio-app-consumer_SOURCES}
+)
+
+# Link the provider application
+target_link_libraries(radio-app-provider-cc
+    radio-app
+    ${radio-app_LIBRARIES}
+    ${Joynr_LIB_INPROCESS_LIBRARIES}
+)
+
+# Link the consumer application
+target_link_libraries(radio-app-consumer-cc
+    radio-app
+    ${radio-app_LIBRARIES}
+    ${Joynr_LIB_INPROCESS_LIBRARIES}
+)
+
+# copy joynr resources and settings
+file(
+    COPY ${Joynr_RESOURCES_DIR}
+    DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
+)
+
+
+
+# copy joynr executables
+file(
+    COPY ${Joynr_EXECUTABLES}
+    DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
+)
+
+# Compile the provider application (requires: running cluster controller)
+# Communicates via WebSockets with cluster controller
+add_executable(radio-app-provider-ws
+    ${radio-app-provider_HEADERS}
+    ${radio-app-provider_SOURCES}
+)
+
+# Link the provider application
+target_link_libraries(radio-app-provider-ws
+    radio-app
+    ${radio-app_LIBRARIES}
+    ${Joynr_LIB_WS_LIBRARIES}
+)
+
+# Compile the consumer application (requires: running cluster controller)
+# Communicates via WebSockets with cluster controller
+add_executable(radio-app-consumer-ws
+    ${radio-app-consumer_HEADERS}
+    ${radio-app-consumer_SOURCES}
+)
+
+# Link the consumer application
+target_link_libraries(radio-app-consumer-ws
+    radio-app
+    ${radio-app_LIBRARIES}
+    ${Joynr_LIB_WS_LIBRARIES}
+)
+
+# Compile the consumer application (requires: running cluster controller)
+# Communicates via WebSockets with cluster controller
+add_executable(radio-app-provider-asyncipc
+    ${radio-app-provider_HEADERS}
+    ${radio-app-provider_SOURCES}
+)
+
+# Link the provider application
+target_link_libraries(radio-app-provider-asyncipc
+    radio-app
+    ${JOYNR_LIB_ASYNCIPC_LIBRARIES}
+)
+
+# Compile the consumer application (requires: running cluster controller)
+# Communicates via WebSockets with cluster controller
+add_executable(radio-app-consumer-asyncipc
+    ${radio-app-consumer_HEADERS}
+    ${radio-app-consumer_SOURCES}
+)
+
+# Link the consumer application
+target_link_libraries(radio-app-consumer-asyncipc
+    radio-app
+    ${JOYNR_LIB_ASYNCIPC_LIBRARIES}
+)
+
+install(TARGETS
+            radio-app-provider-ws
+            radio-app-consumer-ws
+            radio-app-provider-cc
+            radio-app-consumer-cc
+            radio-app-provider-asyncipc
+            radio-app-consumer-asyncipc
+        RUNTIME DESTINATION bin COMPONENT bin
+)
+
+if(${USE_DBUS_COMMONAPI_COMMUNICATION})
+    # Compile the provider application (requires: Dbus and running cluster controller)
+    # Communicates via Dbus with cluster controller
+    add_executable(radio-app-provider-dbus
+        ${radio-app-provider_HEADERS}
+        ${radio-app-provider_SOURCES}
+    )
+
+    # Link the provider application
+    target_link_libraries(radio-app-provider-dbus
+        radio-app
+        ${radio-app_LIBRARIES}
+        ${Joynr_LIB_DBUS_LIBRARIES}
+    )
+
+    # Compile the consumer application (requires: Dbus and running cluster controller)
+    # Communicates via Dbus with cluster controller
+    add_executable(radio-app-consumer-dbus
+        ${radio-app-consumer_HEADERS}
+        ${radio-app-consumer_SOURCES}
+    )
+
+    # Link the consumer application
+    target_link_libraries(radio-app-consumer-dbus
+        radio-app
+        ${radio-app_LIBRARIES}
+        ${Joynr_LIB_DBUS_LIBRARIES}
+    )
+
+    install(TARGETS
+                radio-app-provider-dbus
+                radio-app-consumer-dbus
+            RUNTIME DESTINATION bin COMPONENT bin
+    )
+
+endif(${USE_DBUS_COMMONAPI_COMMUNICATION})
+
+if(${ENABLE_CLANG_FORMATTER})
+    set(COMMENT "running C++ code formatter: clang-format")
+    set(COMMENT "${COMMENT}\nworking directory: ${CMAKE_CURRENT_SOURCE_DIR}")
+    set(COMMENT "${COMMENT}\nprocessing header files:\n${radio-app-provider_HEADERS}")
+    set(COMMENT "${COMMENT}\nprocessing source files:\n${radio-app-provider_SOURCES}")
+
+    add_custom_command(
+        TARGET radio-app-provider-cc
+        PRE_BUILD
+        COMMAND clang-format -i
+            ${radio-app-provider_HEADERS}
+            ${radio-app-provider_SOURCES}
+        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+        COMMENT "${COMMENT}"
+        VERBATIM
+    )
+
+    set(COMMENT "running C++ code formatter: clang-format")
+    set(COMMENT "${COMMENT}\nworking directory: ${CMAKE_CURRENT_SOURCE_DIR}")
+    set(COMMENT "${COMMENT}\nprocessing header files:\n${radio-app-consumer_HEADERS}")
+    set(COMMENT "${COMMENT}\nprocessing source files:\n${radio-app-consumer_SOURCES}")
+
+    add_custom_command(
+        TARGET radio-app-consumer-cc
+        PRE_BUILD
+        COMMAND clang-format -i
+            ${radio-app-consumer_HEADERS}
+            ${radio-app-consumer_SOURCES}
+        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+        COMMENT "${COMMENT}"
+        VERBATIM
+    )
+endif(${ENABLE_CLANG_FORMATTER})
+
+# Set Visual Studio to do parallel builds
+IF(${CMAKE_GENERATOR} MATCHES "Visual Studio")
+        set (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${MSVCC_AUTO_INCLUDE} /MP")
+
+        # When compiling with DEBUG turn on runtime error checks (RTC1) and
+        # Buffer Overflow detection (GS)
+        set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${MSVCC_AUTO_INCLUDE} /RTC1 /GS /MP")
+ENDIF(${CMAKE_GENERATOR} MATCHES "Visual Studio")
+
+
+# Visual Studio compiles to Debug and Release directories
+IF(${CMAKE_GENERATOR} MATCHES "Visual Studio")
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-provider.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug/resources/radio-app-provider.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-provider.dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug/resources/radio-app-provider.dbus.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-consumer.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug/resources/radio-app-consumer.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-consumer.dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug//resources/radio-app-consumer.dbus.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/cc.messaging.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug/resources/cc.messaging.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/cc.dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug//resources/cc.dbus.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-provider.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release/resources/radio-app-provider.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-provider.dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release/resources/radio-app-provider.dbus.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-consumer.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release/resources/radio-app-consumer.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-consumer.dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release//resources/radio-app-consumer.dbus.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/cc.messaging.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release/resources/cc.messaging.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/cc.dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release//resources/cc.dbus.settings)
+ELSE()
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-provider.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/radio-app-provider.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-provider.dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/radio-app-provider.dbus.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-consumer.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/radio-app-consumer.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/radio-app-consumer.dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/radio-app-consumer.dbus.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/cc.messaging.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/cc.messaging.settings)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/main/resources/cc.dbus.settings ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources/cc.dbus.settings)
+ENDIF(${CMAKE_GENERATOR} MATCHES "Visual Studio")
