From 7279ef7c54acf04927142f1e068acbf5dbeb07b5 Wed, 24 Feb 2016 10:53:02 +0100
From: Michal Gubriansky <michal.gubriansky@rec-global.com>
Date: Wed, 24 Feb 2016 10:52:28 +0100
Subject: [PATCH] complete java implementation

diff --git a/examples/radio-app/pom.xml b/examples/radio-app/pom.xml
index e893bff..1d2d7d9 100644
--- a/examples/radio-app/pom.xml
+++ b/examples/radio-app/pom.xml
@@ -1,372 +1,390 @@
-<!--
-  #%L
-  %%
-  Copyright (C) 2011 - 2015 BMW Car IT GmbH
-  %%
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  #L%
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<modelVersion>4.0.0</modelVersion>
-	<groupId>io.joynr.examples</groupId>
-	<artifactId>radio-app</artifactId>
-	<packaging>jar</packaging>
-	<name>${project.groupId}:${project.artifactId}</name>
-	<!--
-		Uncomment the following version entry, if this pom.xml is to be used standalone.
-		Replace the version number as required.
-		<version>1.0</version>
-	-->
-
-	<!--
-		If this pom.xml should be used standalone, the following parent section
-		must be removed
-	-->
-	<parent>
-		<groupId>io.joynr</groupId>
-		<artifactId>examples</artifactId>
-		<version>0.14.1</version>
-		<relativePath>../pom.xml</relativePath>
-	</parent>
-
-	<properties>
-		<!--
-			If this pom.xml should be used standalone, the following version
-			of the joynr framework which is inherited from the parent pom
-			must be replaced by a fixed one.
-		-->
-		<joynr.version>${project.version}</joynr.version>
-		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-		<license.useLicensesConfigFile>true</license.useLicensesConfigFile>
-	</properties>
-
-	<dependencies>
-		<!-- Core joynr framework -->
-		<dependency>
-			<groupId>io.joynr.java.core</groupId>
-			<artifactId>clustercontroller-websocket-runtime</artifactId>
-			<version>${joynr.version}</version>
-		</dependency>
-		<dependency>
-			<groupId>io.joynr.java.core</groupId>
-			<artifactId>clustercontroller-inprocess-runtime</artifactId>
-			<version>${joynr.version}</version>
-		</dependency>
-		<dependency>
-			<groupId>io.joynr.java.core</groupId>
-			<artifactId>libjoynr-websocket-runtime</artifactId>
-			<version>${joynr.version}</version>
-		</dependency>
-
-		<!-- Logging used in the demo app -->
-		<dependency>
-			<groupId>org.slf4j</groupId>
-			<artifactId>slf4j-log4j12</artifactId>
-			<version>1.6.6</version>
-		</dependency>
-
-		<!-- Console I/O framework used in the demo app -->
-		<dependency>
-			<groupId>jline</groupId>
-			<artifactId>jline</artifactId>
-			<version>2.12</version>
-		</dependency>
-
-		<!--
-			The following dependencies are only required for convenience
-			and are not required for the demo app itself.
-			They allow to run a jetty server that contains the minimum
-			backend
-		-->
-		<dependency>
-			<groupId>io.joynr.java.messaging.bounceproxy</groupId>
-			<artifactId>single-bounceproxy</artifactId>
-			<version>${joynr.version}</version>
-			<type>war</type>
-		</dependency>
-
-		<dependency>
-			<groupId>io.joynr.java.backend-services</groupId>
-			<artifactId>discovery-directory-servlet</artifactId>
-			<version>${joynr.version}</version>
-			<type>war</type>
-		</dependency>
-
-		<dependency>
-			<groupId>io.joynr.java.backend-services</groupId>
-			<artifactId>domain-access-controller-servlet</artifactId>
-			<version>${joynr.version}</version>
-			<type>war</type>
-		</dependency>
-	</dependencies>
-
-	<build>
-		<!--
-			If a local subdirectory is used to store Franca files,
-			it should be specified here as a resource
-		-->
-		<resources>
-			<resource>
-				<directory>src/main/resources</directory>
-				<filtering>true</filtering>
-			</resource>
-			<resource>
-				<directory>src/main/model</directory>
-			</resource>
-		</resources>
-
-		<finalName>${project.artifactId}</finalName>
-
-		<plugins>
-			<!-- The following section makes sure that Java 7
-				is used since joynr framework requires it -->
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-compiler-plugin</artifactId>
-				<version>3.3</version>
-				<configuration>
-					<source>1.7</source>
-					<target>1.7</target>
-					<testSource>1.7</testSource>
-					<testTarget>1.7</testTarget>
-					<debug>true</debug>
-					<debuglevel>lines,vars,source</debuglevel>
-				</configuration>
-				<!-- The following plugin is only needed for Eclipse -->
-				<dependencies>
-					<dependency>
-						<groupId>org.codehaus.plexus</groupId>
-						<artifactId>plexus-compiler-eclipse</artifactId>
-						<version>1.8.6</version>
-					</dependency>
-				</dependencies>
-			</plugin>
-
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-jar-plugin</artifactId>
-				<version>2.4</version>
-				<configuration>
-					<excludes>
-						<exclude>**/package-info*</exclude> <!-- to prevent package-info files from different projects to collide -->
-						<exclude>**/CheckForNull*</exclude> <!-- to prevent check-for-null annotations from package-info to be pulled
-							into jar-files -->
-					</excludes>
-				</configuration>
-			</plugin>
-
-			<!-- Add the generated Java and Franca files to the processing of sources -->
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>build-helper-maven-plugin</artifactId>
-				<version>1.7</version>
-				<executions>
-					<execution>
-						<id>add-source</id>
-						<phase>process-sources</phase>
-						<goals>
-							<goal>add-source</goal>
-						</goals>
-						<configuration>
-							<sources>
-								<source>src/main/generated-java</source>
-								<source>src/main/model</source>
-							</sources>
-						</configuration>
-					</execution>
-				</executions>
-			</plugin>
-
-			<!--
-			  Call the joynr framework code generator to
-			  create the required API files from the Franca input files.
-			  The input files can be specified either by relative path to file,
-			  relative path to directory they reside in, or using a
-			  dependency artifact that contains them.
-			  For further details please refer to the external documentation.
-			-->
-			<plugin>
-				<groupId>io.joynr.tools.generator</groupId>
-				<artifactId>joynr-generator-maven-plugin</artifactId>
-				<version>${joynr.version}</version>
-				<executions>
-					<!-- The following part is only required for target language Java -->
-					<execution>
-						<id>generate-java</id>
-						<phase>generate-sources</phase>
-						<goals>
-							<goal>generate</goal>
-						</goals>
-						<configuration>
-							<model>${basedir}/src/main/model</model>
-							<generationLanguage>java</generationLanguage>
-							<outputPath>${basedir}/src/main/generated-java</outputPath>
-						</configuration>
-					</execution>
-					<!-- The following part is only required for target language C++ -->
-					<execution>
-						<id>generate-cpp</id>
-						<phase>generate-sources</phase>
-						<goals>
-							<goal>generate</goal>
-						</goals>
-						<configuration>
-							<model>${basedir}/src/main/model</model>
-							<generationLanguage>cpp</generationLanguage>
-							<outputPath>${basedir}/src/main/generated-cpp</outputPath>
-						</configuration>
-					</execution>
-				</executions>
-				<dependencies>
-					<!-- The following part is only required for target language Java -->
-					<dependency>
-						<groupId>io.joynr.tools.generator</groupId>
-						<artifactId>java-generator</artifactId>
-						<version>${joynr.version}</version>
-					</dependency>
-					<!-- The following part is only required for target language C++ -->
-					<dependency>
-						<groupId>io.joynr.tools.generator</groupId>
-						<artifactId>cpp-generator</artifactId>
-						<version>${joynr.version}</version>
-					</dependency>
-				</dependencies>
-			</plugin>
-
-			<!-- clean up should remove any generated code as well -->
-			<plugin>
-				<artifactId>maven-clean-plugin</artifactId>
-				<version>2.5</version>
-				<configuration>
-					<filesets>
-						<!-- The following part is only required for target language Java -->
-						<fileset>
-							<directory>src/main/generated-java</directory>
-							<includes>
-								<include>**</include>
-							</includes>
-						</fileset>
-						<!-- The following part is only required for target language C++ -->
-						<fileset>
-							<directory>src/main/generated-cpp</directory>
-							<includes>
-								<include>**</include>
-							</includes>
-						</fileset>
-					</filesets>
-				</configuration>
-			</plugin>
-
-			<!--
-				The following plugins are only required for convenience
-				and are not required for the demo app itself.
-				They allow to run a jetty server that contains the minimum
-				backend
-			-->
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-dependency-plugin</artifactId>
-				<executions>
-					<execution>
-						<id>copy-backend-services</id>
-						<!--
-							NOTE: jetty:run runs in phase test-compile. Hence, backend services
-							must be copied at latest in the process-test-resources phase.
-						-->
-						<phase>process-test-resources</phase>
-						<goals>
-							<goal>copy</goal>
-						</goals>
-						<configuration>
-							<artifactItems>
-								<artifactItem>
-									<groupId>io.joynr.java.messaging.bounceproxy</groupId>
-									<artifactId>single-bounceproxy</artifactId>
-									<version>${joynr.version}</version>
-									<type>war</type>
-									<outputDirectory>${project.build.directory}</outputDirectory>
-									<destFileName>bounceproxy.war</destFileName>
-								</artifactItem>
-								<artifactItem>
-									<groupId>io.joynr.java.backend-services</groupId>
-									<artifactId>domain-access-controller-servlet</artifactId>
-									<version>${joynr.version}</version>
-									<type>war</type>
-									<outputDirectory>${project.build.directory}</outputDirectory>
-									<destFileName>accesscontrol.war</destFileName>
-								</artifactItem>
-								<artifactItem>
-									<groupId>io.joynr.java.backend-services</groupId>
-									<artifactId>discovery-directory-servlet</artifactId>
-									<version>${joynr.version}</version>
-									<type>war</type>
-									<outputDirectory>${project.build.directory}</outputDirectory>
-									<destFileName>discovery.war</destFileName>
-								</artifactItem>
-							</artifactItems>
-							<overWriteReleases>false</overWriteReleases>
-							<overWriteSnapshots>true</overWriteSnapshots>
-						</configuration>
-					</execution>
-				</executions>
-			</plugin>
-			<plugin>
-				<groupId>org.eclipse.jetty</groupId>
-				<artifactId>jetty-maven-plugin</artifactId>
-				<version>9.2.2.v20140723</version>
-				<dependencies>
-					<dependency>
-						<groupId>org.slf4j</groupId>
-						<artifactId>slf4j-log4j12</artifactId>
-						<version>1.6.6</version>
-					</dependency>
-				</dependencies>
-				<configuration>
-					<webApp>
-						<contextPath>/</contextPath>
-					</webApp>
-					<stopPort>9966</stopPort>
-					<stopKey>joynr</stopKey>
-					<contextHandlers>
-						<contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext">
-							<war>${project.build.directory}/bounceproxy.war</war>
-							<contextPath>/bounceproxy</contextPath>
-						</contextHandler>
-						<contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext">
-							<war>${project.build.directory}/discovery.war</war>
-							<contextPath>/discovery</contextPath>
-						</contextHandler>
-						<contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext">
-							<war>${project.build.directory}/accesscontrol.war</war>
-							<contextPath>/accesscontrol</contextPath>
-						</contextHandler>
-					</contextHandlers>
-					<systemProperties>
-						<systemProperty>
-							<name>log4j.configuration</name>
-							<value>file:${basedir}/src/main/resources/log4j.properties</value>
-						</systemProperty>
-						<systemProperty>
-							<name>joynr.servlet.hostPath</name>
-							<value>http://localhost:8080</value>
-						</systemProperty>
-						<systemProperty>
-							<name>org.atmosphere.useNative</name>
-							<value>true</value>
-						</systemProperty>
-					</systemProperties>
-				</configuration>
-			</plugin>
-		</plugins>
-	</build>
-</project>
+<!--
+  #%L
+  %%
+  Copyright (C) 2011 - 2015 BMW Car IT GmbH
+  %%
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  #L%
+  -->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+	<groupId>io.joynr.examples</groupId>
+	<artifactId>radio-app</artifactId>
+	<packaging>jar</packaging>
+	<name>${project.groupId}:${project.artifactId}</name>
+	<!--
+		Uncomment the following version entry, if this pom.xml is to be used standalone.
+		Replace the version number as required.
+		<version>1.0</version>
+	-->
+
+	<!--
+		If this pom.xml should be used standalone, the following parent section
+		must be removed
+	-->
+	<parent>
+		<groupId>io.joynr</groupId>
+		<artifactId>examples</artifactId>
+		<version>0.14.1</version>
+		<relativePath>../pom.xml</relativePath>
+	</parent>
+
+	<properties>
+		<!--
+			If this pom.xml should be used standalone, the following version
+			of the joynr framework which is inherited from the parent pom
+			must be replaced by a fixed one.
+		-->
+		<joynr.version>${project.version}</joynr.version>
+		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+		<license.useLicensesConfigFile>true</license.useLicensesConfigFile>
+	</properties>
+
+	<dependencies>
+		<!-- Core joynr framework -->
+		<dependency>
+			<groupId>io.joynr.java.core</groupId>
+			<artifactId>clustercontroller-websocket-runtime</artifactId>
+			<version>${joynr.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>io.joynr.java.core</groupId>
+			<artifactId>clustercontroller-inprocess-runtime</artifactId>
+			<version>${joynr.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>io.joynr.java.core</groupId>
+			<artifactId>libjoynr-websocket-runtime</artifactId>
+			<version>${joynr.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>io.joynr.java.core</groupId>
+			<artifactId>libjoynr-asyncipc-runtime</artifactId>
+			<version>${joynr.version}</version>
+		</dependency>
+
+		<!-- Logging used in the demo app -->
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>slf4j-log4j12</artifactId>
+			<version>1.6.6</version>
+		</dependency>
+
+		<!-- Console I/O framework used in the demo app -->
+		<dependency>
+			<groupId>jline</groupId>
+			<artifactId>jline</artifactId>
+			<version>2.12</version>
+		</dependency>
+
+		<!--
+			The following dependencies are only required for convenience
+			and are not required for the demo app itself.
+			They allow to run a jetty server that contains the minimum
+			backend
+		-->
+		<dependency>
+			<groupId>io.joynr.java.messaging.bounceproxy</groupId>
+			<artifactId>single-bounceproxy</artifactId>
+			<version>${joynr.version}</version>
+			<type>war</type>
+		</dependency>
+
+		<dependency>
+			<groupId>io.joynr.java.backend-services</groupId>
+			<artifactId>discovery-directory-servlet</artifactId>
+			<version>${joynr.version}</version>
+			<type>war</type>
+		</dependency>
+
+		<dependency>
+			<groupId>io.joynr.java.backend-services</groupId>
+			<artifactId>domain-access-controller-servlet</artifactId>
+			<version>${joynr.version}</version>
+			<type>war</type>
+		</dependency>
+	</dependencies>
+
+	<build>
+		<!--
+			If a local subdirectory is used to store Franca files,
+			it should be specified here as a resource
+		-->
+		<resources>
+			<resource>
+				<directory>src/main/resources</directory>
+				<filtering>true</filtering>
+			</resource>
+			<resource>
+				<directory>src/main/model</directory>
+			</resource>
+		</resources>
+
+		<finalName>${project.artifactId}</finalName>
+
+		<plugins>
+			<plugin>
+		      <artifactId>maven-assembly-plugin</artifactId>
+		      <configuration>
+		        <archive>
+		          <manifest>
+		            <mainClass>io.joynr.demo.MyRadioProviderApplication</mainClass>
+		          </manifest>
+		        </archive>
+		        <descriptorRefs>
+		          <descriptorRef>jar-with-dependencies</descriptorRef>
+		        </descriptorRefs>
+		      </configuration>
+		    </plugin>
+			<!-- The following section makes sure that Java 7
+				is used since joynr framework requires it -->
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-compiler-plugin</artifactId>
+				<version>3.3</version>
+				<configuration>
+					<source>1.7</source>
+					<target>1.7</target>
+					<testSource>1.7</testSource>
+					<testTarget>1.7</testTarget>
+					<debug>true</debug>
+					<debuglevel>lines,vars,source</debuglevel>
+				</configuration>
+				<!-- The following plugin is only needed for Eclipse -->
+				<dependencies>
+					<dependency>
+						<groupId>org.codehaus.plexus</groupId>
+						<artifactId>plexus-compiler-eclipse</artifactId>
+						<version>1.8.6</version>
+					</dependency>
+				</dependencies>
+			</plugin>
+
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-jar-plugin</artifactId>
+				<version>2.4</version>
+				<configuration>
+					<excludes>
+						<exclude>**/package-info*</exclude> <!-- to prevent package-info files from different projects to collide -->
+						<exclude>**/CheckForNull*</exclude> <!-- to prevent check-for-null annotations from package-info to be pulled
+							into jar-files -->
+					</excludes>
+				</configuration>
+			</plugin>
+
+			<!-- Add the generated Java and Franca files to the processing of sources -->
+			<plugin>
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>build-helper-maven-plugin</artifactId>
+				<version>1.7</version>
+				<executions>
+					<execution>
+						<id>add-source</id>
+						<phase>process-sources</phase>
+						<goals>
+							<goal>add-source</goal>
+						</goals>
+						<configuration>
+							<sources>
+								<source>src/main/generated-java</source>
+								<source>src/main/model</source>
+							</sources>
+						</configuration>
+					</execution>
+				</executions>
+			</plugin>
+
+			<!--
+			  Call the joynr framework code generator to
+			  create the required API files from the Franca input files.
+			  The input files can be specified either by relative path to file,
+			  relative path to directory they reside in, or using a
+			  dependency artifact that contains them.
+			  For further details please refer to the external documentation.
+			-->
+			<plugin>
+				<groupId>io.joynr.tools.generator</groupId>
+				<artifactId>joynr-generator-maven-plugin</artifactId>
+				<version>${joynr.version}</version>
+				<executions>
+					<!-- The following part is only required for target language Java -->
+					<execution>
+						<id>generate-java</id>
+						<phase>generate-sources</phase>
+						<goals>
+							<goal>generate</goal>
+						</goals>
+						<configuration>
+							<model>${basedir}/src/main/model</model>
+							<generationLanguage>java</generationLanguage>
+							<outputPath>${basedir}/src/main/generated-java</outputPath>
+						</configuration>
+					</execution>
+					<!-- The following part is only required for target language C++ -->
+					<execution>
+						<id>generate-cpp</id>
+						<phase>generate-sources</phase>
+						<goals>
+							<goal>generate</goal>
+						</goals>
+						<configuration>
+							<model>${basedir}/src/main/model</model>
+							<generationLanguage>cpp</generationLanguage>
+							<outputPath>${basedir}/src/main/generated-cpp</outputPath>
+						</configuration>
+					</execution>
+				</executions>
+				<dependencies>
+					<!-- The following part is only required for target language Java -->
+					<dependency>
+						<groupId>io.joynr.tools.generator</groupId>
+						<artifactId>java-generator</artifactId>
+						<version>${joynr.version}</version>
+					</dependency>
+					<!-- The following part is only required for target language C++ -->
+					<dependency>
+						<groupId>io.joynr.tools.generator</groupId>
+						<artifactId>cpp-generator</artifactId>
+						<version>${joynr.version}</version>
+					</dependency>
+				</dependencies>
+			</plugin>
+
+			<!-- clean up should remove any generated code as well -->
+			<plugin>
+				<artifactId>maven-clean-plugin</artifactId>
+				<version>2.5</version>
+				<configuration>
+					<filesets>
+						<!-- The following part is only required for target language Java -->
+						<fileset>
+							<directory>src/main/generated-java</directory>
+							<includes>
+								<include>**</include>
+							</includes>
+						</fileset>
+						<!-- The following part is only required for target language C++ -->
+						<fileset>
+							<directory>src/main/generated-cpp</directory>
+							<includes>
+								<include>**</include>
+							</includes>
+						</fileset>
+					</filesets>
+				</configuration>
+			</plugin>
+
+			<!--
+				The following plugins are only required for convenience
+				and are not required for the demo app itself.
+				They allow to run a jetty server that contains the minimum
+				backend
+			-->
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-dependency-plugin</artifactId>
+				<executions>
+					<execution>
+						<id>copy-backend-services</id>
+						<!--
+							NOTE: jetty:run runs in phase test-compile. Hence, backend services
+							must be copied at latest in the process-test-resources phase.
+						-->
+						<phase>process-test-resources</phase>
+						<goals>
+							<goal>copy</goal>
+						</goals>
+						<configuration>
+							<artifactItems>
+								<artifactItem>
+									<groupId>io.joynr.java.messaging.bounceproxy</groupId>
+									<artifactId>single-bounceproxy</artifactId>
+									<version>${joynr.version}</version>
+									<type>war</type>
+									<outputDirectory>${project.build.directory}</outputDirectory>
+									<destFileName>bounceproxy.war</destFileName>
+								</artifactItem>
+								<artifactItem>
+									<groupId>io.joynr.java.backend-services</groupId>
+									<artifactId>domain-access-controller-servlet</artifactId>
+									<version>${joynr.version}</version>
+									<type>war</type>
+									<outputDirectory>${project.build.directory}</outputDirectory>
+									<destFileName>accesscontrol.war</destFileName>
+								</artifactItem>
+								<artifactItem>
+									<groupId>io.joynr.java.backend-services</groupId>
+									<artifactId>discovery-directory-servlet</artifactId>
+									<version>${joynr.version}</version>
+									<type>war</type>
+									<outputDirectory>${project.build.directory}</outputDirectory>
+									<destFileName>discovery.war</destFileName>
+								</artifactItem>
+							</artifactItems>
+							<overWriteReleases>false</overWriteReleases>
+							<overWriteSnapshots>true</overWriteSnapshots>
+						</configuration>
+					</execution>
+				</executions>
+			</plugin>
+			<plugin>
+				<groupId>org.eclipse.jetty</groupId>
+				<artifactId>jetty-maven-plugin</artifactId>
+				<version>9.2.2.v20140723</version>
+				<dependencies>
+					<dependency>
+						<groupId>org.slf4j</groupId>
+						<artifactId>slf4j-log4j12</artifactId>
+						<version>1.6.6</version>
+					</dependency>
+				</dependencies>
+				<configuration>
+					<webApp>
+						<contextPath>/</contextPath>
+					</webApp>
+					<stopPort>9966</stopPort>
+					<stopKey>joynr</stopKey>
+					<contextHandlers>
+						<contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext">
+							<war>${project.build.directory}/bounceproxy.war</war>
+							<contextPath>/bounceproxy</contextPath>
+						</contextHandler>
+						<contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext">
+							<war>${project.build.directory}/discovery.war</war>
+							<contextPath>/discovery</contextPath>
+						</contextHandler>
+						<contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext">
+							<war>${project.build.directory}/accesscontrol.war</war>
+							<contextPath>/accesscontrol</contextPath>
+						</contextHandler>
+					</contextHandlers>
+					<systemProperties>
+						<systemProperty>
+							<name>log4j.configuration</name>
+							<value>file:${basedir}/src/main/resources/log4j.properties</value>
+						</systemProperty>
+						<systemProperty>
+							<name>joynr.servlet.hostPath</name>
+							<value>http://localhost:8080</value>
+						</systemProperty>
+						<systemProperty>
+							<name>org.atmosphere.useNative</name>
+							<value>true</value>
+						</systemProperty>
+					</systemProperties>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
+</project>
diff --git a/examples/radio-app/src/main/java/io/joynr/demo/MyRadioConsumerApplication.java b/examples/radio-app/src/main/java/io/joynr/demo/MyRadioConsumerApplication.java
index 0e021dc..9f77a15 100644
--- a/examples/radio-app/src/main/java/io/joynr/demo/MyRadioConsumerApplication.java
+++ b/examples/radio-app/src/main/java/io/joynr/demo/MyRadioConsumerApplication.java
@@ -1,461 +1,478 @@
-package io.joynr.demo;
-
-import java.io.IOException;
-import java.util.Properties;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.google.inject.Inject;
-import com.google.inject.Module;
-import com.google.inject.name.Named;
-import com.google.inject.util.Modules;
-
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
-
-/*
- * #%L
- * %%
- * Copyright (C) 2011 - 2015 BMW Car IT GmbH
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * #L%
- */
-
-import io.joynr.arbitration.ArbitrationStrategy;
-import io.joynr.arbitration.DiscoveryQos;
-import io.joynr.arbitration.DiscoveryScope;
-import io.joynr.exceptions.DiscoveryException;
-import io.joynr.exceptions.JoynrCommunicationException;
-import io.joynr.exceptions.JoynrRuntimeException;
-import io.joynr.messaging.AtmosphereMessagingModule;
-import io.joynr.messaging.MessagingPropertyKeys;
-import io.joynr.messaging.MessagingQos;
-import io.joynr.messaging.websocket.WebsocketModule;
-import io.joynr.proxy.CallbackWithModeledError;
-import io.joynr.proxy.Future;
-import io.joynr.proxy.ProxyBuilder;
-import io.joynr.pubsub.subscription.AttributeSubscriptionAdapter;
-import io.joynr.runtime.AbstractJoynrApplication;
-import io.joynr.runtime.CCInProcessRuntimeModule;
-import io.joynr.runtime.JoynrApplication;
-import io.joynr.runtime.JoynrApplicationModule;
-import io.joynr.runtime.JoynrInjectorFactory;
-import io.joynr.runtime.LibjoynrWebSocketRuntimeModule;
-import jline.console.ConsoleReader;
-import joynr.OnChangeSubscriptionQos;
-import joynr.OnChangeWithKeepAliveSubscriptionQos;
-import joynr.exceptions.ApplicationException;
-import joynr.exceptions.ProviderRuntimeException;
-import joynr.vehicle.Country;
-import joynr.vehicle.GeoPosition;
-import joynr.vehicle.Radio.AddFavoriteStationErrorEnum;
-import joynr.vehicle.RadioBroadcastInterface;
-import joynr.vehicle.RadioBroadcastInterface.NewStationDiscoveredBroadcastFilterParameters;
-import joynr.vehicle.RadioBroadcastInterface.WeakSignalBroadcastAdapter;
-import joynr.vehicle.RadioProxy;
-import joynr.vehicle.RadioStation;
-import joynr.vehicle.RadioSync.GetLocationOfCurrentStationReturned;
-
-public class MyRadioConsumerApplication extends AbstractJoynrApplication {
-    private static final String PRINT_BORDER = "\n####################\n";
-    private static final Logger LOG = LoggerFactory.getLogger(MyRadioConsumerApplication.class);
-    public static final String APP_CONFIG_PROVIDER_DOMAIN = "javademoapp.provider.domain";
-    private static final String STATIC_PERSISTENCE_FILE = "consumer-joynr.properties";
-
-    @Inject
-    @Named(APP_CONFIG_PROVIDER_DOMAIN)
-    private String providerDomain;
-    private String subscriptionIdCurrentStation;
-    private RadioProxy radioProxy;
-    @Inject
-    private ObjectMapper objectMapper;
-    @Inject
-    private DiscoveryScope discoveryScope;
-
-    /**
-     * Main method. This method is responsible for: 1. Instantiating the consumer application. 2. Injecting the instance
-     * with Guice bindings 3. Starting the application. 4. Ending the application so that the necessary clean up calls
-     * are made.
-     *
-     * @throws IOException
-     */
-    public static void main(String[] args) throws IOException {
-        // run application from cmd line using Maven:
-        // mvn exec:java -Dexec.mainClass="io.joynr.demo.MyRadioConsumerApplication" -Dexec.args="<provider-domain>"
-        if (args.length < 1 || args.length > 3) {
-            LOG.error("USAGE: java {} <provider-domain> [websocket [local]]",
-                      MyRadioConsumerApplication.class.getName());
-            return;
-        }
-        String providerDomain = args[0];
-
-        // joynr config properties are used to set joynr configuration at compile time. They are set on the
-        // JoynInjectorFactory.
-        Properties joynrConfig = new Properties();
-        Module runtimeModule = getRuntimeModule(args, joynrConfig);
-        final DiscoveryScope discoveryScope = getDiscoveryScope(args);
-
-        LOG.debug("Using the following runtime module: " + runtimeModule.getClass().getSimpleName());
-        LOG.debug("Searching for providers on domain \"{}\"", providerDomain);
-
-        // Set a custom static persistence file (default is joynr.properties in the working dir) to store
-        // joynr configuration. It allows for changing the joynr configuration at runtime. Custom persistence
-        // files support running the consumer and provider applications from within the same directory.
-        joynrConfig.setProperty(MessagingPropertyKeys.PERSISTENCE_FILE, STATIC_PERSISTENCE_FILE);
-
-        // How to use custom infrastructure elements:
-
-        // 1) Set them programmatically at compile time using the joynr configuration properties at the
-        // JoynInjectorFactory. E.g. uncomment the following lines to set a certain joynr server
-        // instance.
-        // joynrConfig.setProperty(MessagingPropertyKeys.BOUNCE_PROXY_URL, "http://localhost:8080/bounceproxy/");
-        // joynrConfig.setProperty(MessagingPropertyKeys.CAPABILITIESDIRECTORYURL, "http://localhost:8080/discovery/channels/discoverydirectory_channelid/");
-        // joynrConfig.setProperty(MessagingPropertyKeys.CHANNELURLDIRECTORYURL, "http://localhost:8080/discovery/channels/discoverydirectory_channelid/");
-        joynrConfig.setProperty(PROPERTY_JOYNR_DOMAIN_LOCAL, "radioapp_consumer_local_domain");
-
-        // 2) Or set them in the static persistence file (default: joynr.properties in working dir) at
-        // runtime. If not available in the working dir, it will be created during the first launch
-        // of the application. Copy the following lines to the custom persistence file to set a
-        // certain joynr server instance.
-        // NOTE: This application uses a custom static persistence file consumer-joynr.properties.
-        // Copy the following lines to the custom persistence file to set a certain joynr server
-        // instance.
-        // joynr.messaging.bounceproxyurl=http://localhost:8080/bounceproxy/
-        // joynr.messaging.capabilitiesdirectoryurl=http://localhost:8080/discovery/channels/discoverydirectory_channelid/
-        // joynr.messaging.channelurldirectoryurl=http://localhost:8080/discovery/channels/discoverydirectory_channelid/
-
-        // 3) Or set them in Java System properties.
-        // -Djoynr.messaging.bounceProxyUrl=http://localhost:8080/bounceproxy/
-        // -Djoynr.messaging.capabilitiesDirectoryUrl=http://localhost:8080/discovery/channels/discoverydirectory_channelid/
-        // -Djoynr.messaging.channelUrlDirectoryUrl=http://localhost:8080/discovery/channels/discoverydirectory_channelid/
-
-        // NOTE:
-        // Programmatically set configuration properties override properties set in the static persistence file.
-        // Java system properties override both
-
-        // Application-specific configuration properties are injected to the application by setting
-        // them on the JoynApplicationModule.
-        Properties appConfig = new Properties();
-        appConfig.setProperty(APP_CONFIG_PROVIDER_DOMAIN, providerDomain);
-
-        JoynrApplication myRadioConsumerApp = new JoynrInjectorFactory(joynrConfig, runtimeModule).createApplication(new JoynrApplicationModule(MyRadioConsumerApplication.class,
-                                                                                                                                                appConfig) {
-            @Override
-            protected void configure() {
-                super.configure();
-                bind(DiscoveryScope.class).toInstance(discoveryScope);
-            }
-        });
-        myRadioConsumerApp.run();
-
-        myRadioConsumerApp.shutdown();
-    }
-
-    private static Module getRuntimeModule(String[] args, Properties joynrConfig) {
-        Module runtimeModule;
-        if (args.length >= 2 && args[1].equalsIgnoreCase("websocket")) {
-            joynrConfig.setProperty(WebsocketModule.PROPERTY_WEBSOCKET_MESSAGING_HOST, "localhost");
-            joynrConfig.setProperty(WebsocketModule.PROPERTY_WEBSOCKET_MESSAGING_PORT, "4242");
-            joynrConfig.setProperty(WebsocketModule.PROPERTY_WEBSOCKET_MESSAGING_PROTOCOL, "ws");
-            joynrConfig.setProperty(WebsocketModule.PROPERTY_WEBSOCKET_MESSAGING_PATH, "");
-            runtimeModule = new LibjoynrWebSocketRuntimeModule();
-        } else {
-            runtimeModule = Modules.override(new CCInProcessRuntimeModule()).with(new AtmosphereMessagingModule());
-        }
-        return runtimeModule;
-    }
-
-    @Override
-    @SuppressWarnings(value = "DM_EXIT", justification = "WORKAROUND to be removed")
-    public void shutdown() {
-        if (radioProxy != null) {
-            if (subscriptionIdCurrentStation != null) {
-                radioProxy.unsubscribeFromCurrentStation(subscriptionIdCurrentStation);
-            }
-        }
-
-        // Add any clean up code here for your application.
-        runtime.shutdown(true);
-
-        // TODO currently there is a bug preventing all threads being stopped
-        // WORKAROUND
-        try {
-            Thread.sleep(3000);
-        } catch (InterruptedException e) {
-            // do nothing; exiting application
-        }
-        System.exit(0);
-    }
-
-    private static DiscoveryScope getDiscoveryScope(String[] args) {
-        if (args.length > 2 && args[2].equalsIgnoreCase("local")) {
-            return DiscoveryScope.LOCAL_ONLY;
-        }
-        return DiscoveryScope.LOCAL_AND_GLOBAL;
-    }
-
-    @SuppressWarnings("checkstyle:methodlength")
-    @Override
-    public void run() {
-        DiscoveryQos discoveryQos = new DiscoveryQos();
-        // As soon as the arbitration QoS is set on the proxy builder, discovery of suitable providers
-        // is triggered. If the discovery process does not find matching providers within the
-        // arbitration timeout duration it will be terminated and you will get an arbitration exception.
-        discoveryQos.setDiscoveryTimeout(10000);
-        discoveryQos.setDiscoveryScope(discoveryScope);
-        // Provider entries in the global capabilities directory are cached locally. Discovery will
-        // consider entries in this cache valid if they are younger as the max age of cached
-        // providers as defined in the QoS. All valid entries will be processed by the arbitrator when searching
-        // for and arbitrating the "best" matching provider.
-        // NOTE: Valid cache entries might prevent triggering a lookup in the global capabilities
-        // directory. Therefore, not all providers registered with the global capabilities
-        // directory might be taken into account during arbitration.
-        discoveryQos.setCacheMaxAge(Long.MAX_VALUE);
-        // The discovery process outputs a list of matching providers. The arbitration strategy then
-        // chooses one or more of them to be used by the proxy.
-        discoveryQos.setArbitrationStrategy(ArbitrationStrategy.HighestPriority);
-
-        // The provider will maintain at least a minimum interval idle time in milliseconds between
-        // successive notifications, even if on-change notifications are enabled and the value changes more
-        // often. This prevents the consumer from being flooded by updated values. The filtering happens on
-        // the provider's side, thus also preventing excessive network traffic.
-        int minInterval_ms = 0;
-        // The provider will send notifications every maximum interval in milliseconds, even if the value didn't
-        // change. It will send notifications more often if on-change notifications are enabled,
-        // the value changes more often, and the minimum interval QoS does not prevent it. The maximum interval
-        // can thus be seen as a sort of heart beat.
-        int maxInterval_ms = 10000;
-
-        // The provider will send notifications until the end date is reached. The consumer will not receive any
-        // notifications (neither value notifications nor missed publication notifications) after
-        // this date.
-        long expiryDate_ms = System.currentTimeMillis() + 60000;
-        // If no notification was received within the last alert interval, a missed publication
-        // notification will be raised.
-        int alertAfterInterval_ms = 20000;
-        // Notification messages will be sent with this time-to-live. If a notification message can not be
-        // delivered within its TTL, it will be deleted from the system.
-        // NOTE: If a notification message is not delivered due to an expired TTL, it might raise a
-        // missed publication notification (depending on the value of the alert interval QoS).
-        int publicationTtl_ms = 5000;
-
-        OnChangeWithKeepAliveSubscriptionQos subscriptionQos = new OnChangeWithKeepAliveSubscriptionQos(minInterval_ms,
-                                                                                                        maxInterval_ms,
-                                                                                                        expiryDate_ms,
-                                                                                                        alertAfterInterval_ms,
-                                                                                                        publicationTtl_ms);
-
-        ProxyBuilder<RadioProxy> proxyBuilder = runtime.getProxyBuilder(providerDomain, RadioProxy.class);
-
-        try {
-            // getting an attribute
-            radioProxy = proxyBuilder.setMessagingQos(new MessagingQos()).setDiscoveryQos(discoveryQos).build();
-            RadioStation currentStation = radioProxy.getCurrentStation();
-            LOG.info(PRINT_BORDER + "ATTRIBUTE GET: current station: " + currentStation + PRINT_BORDER);
-
-            // subscribe to an attribute
-            subscriptionIdCurrentStation = radioProxy.subscribeToCurrentStation(new AttributeSubscriptionAdapter<RadioStation>() {
-
-                                                                                    @Override
-                                                                                    public void onReceive(RadioStation value) {
-                                                                                        LOG.info(PRINT_BORDER
-                                                                                                + "ATTRIBUTE SUBSCRIPTION: current station: "
-                                                                                                + value + PRINT_BORDER);
-                                                                                    }
-
-                                                                                    @Override
-                                                                                    public void onError(JoynrRuntimeException error) {
-                                                                                        LOG.info(PRINT_BORDER
-                                                                                                + "ATTRIBUTE SUBSCRIPTION: " + error
-                                                                                                + PRINT_BORDER);
-                                                                                    }
-                                                                                },
-                                                                                subscriptionQos);
-
-            // broadcast subscription
-
-            // The provider will send a notification whenever the value changes. The number of sent
-            // notifications may be limited by the min interval QoS.
-            // NOTE: The provider must support on-change notifications in order to use this feature by
-            // calling the <broadcast>EventOccurred method of the <interface>Provider class whenever
-            // the <broadcast> should be triggered.
-            OnChangeSubscriptionQos weakSignalBroadcastSubscriptionQos;
-            // The provider will maintain at least a minimum interval idle time in milliseconds between
-            // successive notifications, even if on-change notifications are enabled and the value changes
-            // more often. This prevents the consumer from being flooded by updated values. The filtering
-            // happens on the provider's side, thus also preventing excessive network traffic.
-            int wsbMinInterval = 1 * 1000;
-            // The provider will send notifications until the end date is reached. The consumer will not receive any
-            // notifications (neither value notifications nor missed publication notifications) after
-            // this date.
-            long wsbExpiryDate = System.currentTimeMillis() + 60 * 1000;
-            // Notification messages will be sent with this time-to-live. If a notification message can not be
-            // delivered within its TTL, it will be deleted from the system.
-            // NOTE: If a notification message is not delivered due to an expired TTL, it might raise a
-            // missed publication notification (depending on the value of the alert interval QoS).
-            int wsbPublicationTtl = 5 * 1000;
-            weakSignalBroadcastSubscriptionQos = new OnChangeSubscriptionQos(wsbMinInterval,
-                                                                             wsbExpiryDate,
-                                                                             wsbPublicationTtl);
-            radioProxy.subscribeToWeakSignalBroadcast(new WeakSignalBroadcastAdapter() {
-                @Override
-                public void onReceive(RadioStation weakSignalStation) {
-                    LOG.info(PRINT_BORDER + "BROADCAST SUBSCRIPTION: weak signal: " + weakSignalStation + PRINT_BORDER);
-                }
-            },
-                                                      weakSignalBroadcastSubscriptionQos);
-
-            // selective broadcast subscription
-
-            OnChangeSubscriptionQos newStationDiscoveredBroadcastSubscriptionQos;
-            int nsdbMinInterval = 2 * 1000;
-            long nsdbExpiryDate = System.currentTimeMillis() + 180 * 1000;
-            int nsdbPublicationTtl = 5 * 1000;
-            newStationDiscoveredBroadcastSubscriptionQos = new OnChangeSubscriptionQos(nsdbMinInterval,
-                                                                                       nsdbExpiryDate,
-                                                                                       nsdbPublicationTtl);
-            NewStationDiscoveredBroadcastFilterParameters newStationDiscoveredBroadcastFilterParams = new NewStationDiscoveredBroadcastFilterParameters();
-            newStationDiscoveredBroadcastFilterParams.setHasTrafficService("true");
-            GeoPosition positionOfInterest = new GeoPosition(48.1351250, 11.5819810); // Munich
-            String positionOfInterestJson = null;
-            try {
-                positionOfInterestJson = objectMapper.writeValueAsString(positionOfInterest);
-            } catch (JsonProcessingException e1) {
-                LOG.error("Unable to write position of interest filter parameter to JSON", e1);
-            }
-            newStationDiscoveredBroadcastFilterParams.setPositionOfInterest(positionOfInterestJson);
-            newStationDiscoveredBroadcastFilterParams.setRadiusOfInterestArea("200000"); // 200 km
-            radioProxy.subscribeToNewStationDiscoveredBroadcast(new RadioBroadcastInterface.NewStationDiscoveredBroadcastAdapter() {
-                                                                    @Override
-                                                                    public void onReceive(RadioStation discoveredStation,
-                                                                                          GeoPosition geoPosition) {
-                                                                        LOG.info(PRINT_BORDER
-                                                                                + "BROADCAST SUBSCRIPTION: new station discovered: "
-                                                                                + discoveredStation + " at "
-                                                                                + geoPosition + PRINT_BORDER);
-                                                                    }
-                                                                },
-                                                                newStationDiscoveredBroadcastSubscriptionQos,
-                                                                newStationDiscoveredBroadcastFilterParams);
-
-            boolean success;
-
-            try {
-                // add favorite radio station
-                RadioStation favoriteStation = new RadioStation("99.3 The Fox Rocks", false, Country.CANADA);
-                success = radioProxy.addFavoriteStation(favoriteStation);
-                LOG.info(PRINT_BORDER + "METHOD: added favorite station: " + favoriteStation + ": " + success
-                         + PRINT_BORDER);
-                success = radioProxy.addFavoriteStation(favoriteStation);
-            } catch (ApplicationException exception) {
-                AddFavoriteStationErrorEnum error = exception.getError();
-                switch (error) {
-                case DUPLICATE_RADIOSTATION:
-                    LOG.info(PRINT_BORDER + "METHOD: addFavoriteStation failed with the following excpected error: " + error);
-                    break;
-                default:
-                    LOG.error(PRINT_BORDER + "METHOD: addFavoriteStation failed with an unexpected error: " + error);
-                    break;
-                }
-            }
-
-            try {
-                // add favorite radio station
-                RadioStation favoriteStation = new RadioStation("", false, Country.GERMANY);
-                success = radioProxy.addFavoriteStation(favoriteStation);
-                LOG.info(PRINT_BORDER + "METHOD: addFavoriteStation completed unexpected with the following output: " + success);
-            } catch (ApplicationException exception) {
-                String errorName = exception.getError().name();
-                LOG.info(PRINT_BORDER + "METHOD: addFavoriteStation failed with the following unexpected ApplicationExcecption: " + errorName);
-            } catch (ProviderRuntimeException exception) {
-                String errorName = exception.getMessage();
-                String expectation = errorName.equals(MyRadioProvider.MISSING_NAME) ? "expected" : "unexpected";
-                LOG.info(PRINT_BORDER + "METHOD: addFavoriteStation failed with the following " + expectation + " exception: " + errorName);
-            }
-
-            // shuffle the stations
-            radioProxy.shuffleStations();
-            currentStation = radioProxy.getCurrentStation();
-            LOG.info(PRINT_BORDER + "The current radio station after shuffling is: " + currentStation + PRINT_BORDER);
-
-            // add favorite radio station async
-            RadioStation radioStation = new RadioStation("99.4 AFN", false, Country.GERMANY);
-            Future<Boolean> future = radioProxy.addFavoriteStation(new CallbackWithModeledError<Boolean, AddFavoriteStationErrorEnum>() {
-                @Override
-                public void onSuccess(Boolean result) {
-                    LOG.info(PRINT_BORDER + "ASYNC METHOD: added favorite station: callback onSuccess" + PRINT_BORDER);
-                }
-
-                @Override
-                public void onFailure(JoynrRuntimeException error) {
-                    LOG.info(PRINT_BORDER + "ASYNC METHOD: added favorite station: callback onFailure: " + error.getMessage() + PRINT_BORDER);
-                }
-
-                @Override
-                public void onFailure(AddFavoriteStationErrorEnum errorEnum) {
-                    switch (errorEnum) {
-                    case DUPLICATE_RADIOSTATION:
-                        LOG.info(PRINT_BORDER + "ASYNC METHOD: added favorite station failed: Duplicate Station!" + PRINT_BORDER);
-                        break;
-
-                    default:
-                        LOG.error(PRINT_BORDER + "ASYNC METHOD: added favorite station failed: unknown errorEnum:" + errorEnum + PRINT_BORDER);
-                        break;
-                    }
-                    LOG.info(PRINT_BORDER + "ASYNC METHOD: added favorite station: callback onFailure: " + errorEnum
-                    + PRINT_BORDER);
-                }
-            }, radioStation);
-
-            try {
-                long timeoutInMilliseconds = 8000;
-                Boolean reply = future.get(timeoutInMilliseconds);
-                LOG.info(PRINT_BORDER + "ASYNC METHOD: added favorite station: " + radioStation + ": " + reply
-                        + PRINT_BORDER);
-            } catch (InterruptedException|JoynrRuntimeException|ApplicationException e) {
-                LOG.info(PRINT_BORDER + "ASYNC METHOD: added favorite station: " + radioStation
-                        + ": " + e.getClass().getSimpleName() + "!");
-            }
-
-            ConsoleReader console;
-            try {
-                console = new ConsoleReader();
-                int key;
-                while ((key = console.readCharacter()) != 'q') {
-                    switch (key) {
-                    case 's':
-                        radioProxy.shuffleStations();
-                        LOG.info("called shuffleStations");
-                        break;
-                    case 'm':
-                        GetLocationOfCurrentStationReturned locationOfCurrentStation = radioProxy.getLocationOfCurrentStation();
-                        LOG.info("called getLocationOfCurrentStation. country: " + locationOfCurrentStation.country + ", location: " + locationOfCurrentStation.location);
-                    default:
-                        LOG.info("\n\nUSAGE press\n" + " q\tto quit\n" + " s\tto shuffle stations\n");
-                        break;
-                    }
-                }
-            } catch (IOException e) {
-                LOG.error("error reading input from console", e);
-            }
-
-        } catch (DiscoveryException e) {
-            LOG.error("No provider found", e);
-        } catch (JoynrCommunicationException e) {
-            LOG.error("The message was not sent: ", e);
-        }
-    }
-}
+package io.joynr.demo;
+
+import java.io.IOException;
+import java.util.Properties;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.inject.Inject;
+import com.google.inject.Module;
+import com.google.inject.name.Named;
+import com.google.inject.util.Modules;
+
+import edu.umd.cs.findbugs.annotations.SuppressWarnings;
+
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2015 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+
+import io.joynr.arbitration.ArbitrationStrategy;
+import io.joynr.arbitration.DiscoveryQos;
+import io.joynr.arbitration.DiscoveryScope;
+import io.joynr.exceptions.DiscoveryException;
+import io.joynr.exceptions.JoynrCommunicationException;
+import io.joynr.exceptions.JoynrRuntimeException;
+import io.joynr.messaging.AtmosphereMessagingModule;
+import io.joynr.messaging.ConfigurableMessagingSettings;
+import io.joynr.messaging.MessagingPropertyKeys;
+import io.joynr.messaging.MessagingQos;
+import io.joynr.messaging.asyncipc.AsyncIpcModule;
+import io.joynr.messaging.websocket.WebsocketModule;
+import io.joynr.proxy.CallbackWithModeledError;
+import io.joynr.proxy.Future;
+import io.joynr.proxy.ProxyBuilder;
+import io.joynr.pubsub.subscription.AttributeSubscriptionAdapter;
+import io.joynr.runtime.AbstractJoynrApplication;
+import io.joynr.runtime.CCInProcessRuntimeModule;
+import io.joynr.runtime.JoynrApplication;
+import io.joynr.runtime.JoynrApplicationModule;
+import io.joynr.runtime.JoynrInjectorFactory;
+import io.joynr.runtime.LibJoynrAsyncIPCRuntimeModule;
+import io.joynr.runtime.LibjoynrWebSocketRuntimeModule;
+import jline.console.ConsoleReader;
+import joynr.OnChangeSubscriptionQos;
+import joynr.OnChangeWithKeepAliveSubscriptionQos;
+import joynr.exceptions.ApplicationException;
+import joynr.exceptions.ProviderRuntimeException;
+import joynr.vehicle.Country;
+import joynr.vehicle.GeoPosition;
+import joynr.vehicle.Radio.AddFavoriteStationErrorEnum;
+import joynr.vehicle.RadioBroadcastInterface;
+import joynr.vehicle.RadioBroadcastInterface.NewStationDiscoveredBroadcastFilterParameters;
+import joynr.vehicle.RadioBroadcastInterface.WeakSignalBroadcastAdapter;
+import joynr.vehicle.RadioProxy;
+import joynr.vehicle.RadioStation;
+import joynr.vehicle.RadioSync.GetLocationOfCurrentStationReturned;
+
+public class MyRadioConsumerApplication extends AbstractJoynrApplication {
+    private static final String PRINT_BORDER = "\n####################\n";
+    private static final Logger LOG = LoggerFactory.getLogger(MyRadioConsumerApplication.class);
+    public static final String APP_CONFIG_PROVIDER_DOMAIN = "javademoapp.provider.domain";
+    private static final String STATIC_PERSISTENCE_FILE = "consumer-joynr.properties";
+
+    @Inject
+    @Named(APP_CONFIG_PROVIDER_DOMAIN)
+    private String providerDomain;
+    private String subscriptionIdCurrentStation;
+    private RadioProxy radioProxy;
+    @Inject
+    private ObjectMapper objectMapper;
+    @Inject
+    private DiscoveryScope discoveryScope;
+
+    /**
+     * Main method. This method is responsible for: 1. Instantiating the consumer application. 2. Injecting the instance
+     * with Guice bindings 3. Starting the application. 4. Ending the application so that the necessary clean up calls
+     * are made.
+     *
+     * @throws IOException
+     */
+    public static void main(String[] args) throws IOException {
+        // run application from cmd line using Maven:
+        // mvn exec:java -Dexec.mainClass="io.joynr.demo.MyRadioConsumerApplication" -Dexec.args="<provider-domain>"
+        if (args.length < 1 || args.length > 3) {
+            LOG.error("USAGE: java {} <provider-domain> [websocket [local]]",
+                      MyRadioConsumerApplication.class.getName());
+            return;
+        }
+        String providerDomain = args[0];
+
+        // joynr config properties are used to set joynr configuration at compile time. They are set on the
+        // JoynInjectorFactory.
+        Properties joynrConfig = new Properties();
+        Module runtimeModule = getRuntimeModule(args, joynrConfig);
+        final DiscoveryScope discoveryScope = getDiscoveryScope(args);
+
+        LOG.debug("Using the following runtime module: " + runtimeModule.getClass().getSimpleName());
+        LOG.debug("Searching for providers on domain \"{}\"", providerDomain);
+
+        // Set a custom static persistence file (default is joynr.properties in the working dir) to store
+        // joynr configuration. It allows for changing the joynr configuration at runtime. Custom persistence
+        // files support running the consumer and provider applications from within the same directory.
+        joynrConfig.setProperty(MessagingPropertyKeys.PERSISTENCE_FILE, STATIC_PERSISTENCE_FILE);
+
+        // How to use custom infrastructure elements:
+
+        // 1) Set them programmatically at compile time using the joynr configuration properties at the
+        // JoynInjectorFactory. E.g. uncomment the following lines to set a certain joynr server
+        // instance.
+        // joynrConfig.setProperty(MessagingPropertyKeys.BOUNCE_PROXY_URL, "http://localhost:8080/bounceproxy/");
+        // joynrConfig.setProperty(MessagingPropertyKeys.CAPABILITIESDIRECTORYURL, "http://localhost:8080/discovery/channels/discoverydirectory_channelid/");
+        // joynrConfig.setProperty(MessagingPropertyKeys.CHANNELURLDIRECTORYURL, "http://localhost:8080/discovery/channels/discoverydirectory_channelid/");
+        joynrConfig.setProperty(PROPERTY_JOYNR_DOMAIN_LOCAL, "radioapp_consumer_local_domain");
+
+        // 2) Or set them in the static persistence file (default: joynr.properties in working dir) at
+        // runtime. If not available in the working dir, it will be created during the first launch
+        // of the application. Copy the following lines to the custom persistence file to set a
+        // certain joynr server instance.
+        // NOTE: This application uses a custom static persistence file consumer-joynr.properties.
+        // Copy the following lines to the custom persistence file to set a certain joynr server
+        // instance.
+        // joynr.messaging.bounceproxyurl=http://localhost:8080/bounceproxy/
+        // joynr.messaging.capabilitiesdirectoryurl=http://localhost:8080/discovery/channels/discoverydirectory_channelid/
+        // joynr.messaging.channelurldirectoryurl=http://localhost:8080/discovery/channels/discoverydirectory_channelid/
+
+        // 3) Or set them in Java System properties.
+        // -Djoynr.messaging.bounceProxyUrl=http://localhost:8080/bounceproxy/
+        // -Djoynr.messaging.capabilitiesDirectoryUrl=http://localhost:8080/discovery/channels/discoverydirectory_channelid/
+        // -Djoynr.messaging.channelUrlDirectoryUrl=http://localhost:8080/discovery/channels/discoverydirectory_channelid/
+
+        // NOTE:
+        // Programmatically set configuration properties override properties set in the static persistence file.
+        // Java system properties override both
+
+        // Application-specific configuration properties are injected to the application by setting
+        // them on the JoynApplicationModule.
+        Properties appConfig = new Properties();
+        appConfig.setProperty(APP_CONFIG_PROVIDER_DOMAIN, providerDomain);
+
+        JoynrApplication myRadioConsumerApp = new JoynrInjectorFactory(joynrConfig, runtimeModule).createApplication(new JoynrApplicationModule(MyRadioConsumerApplication.class,
+                                                                                                                                                appConfig) {
+            @Override
+            protected void configure() {
+                super.configure();
+                bind(DiscoveryScope.class).toInstance(discoveryScope);
+            }
+        });
+        myRadioConsumerApp.run();
+
+        myRadioConsumerApp.shutdown();
+    }
+
+    private static Module getRuntimeModule(String[] args, Properties joynrConfig) {
+        Module runtimeModule;
+        if (args.length >= 2 && args[1].equalsIgnoreCase("websocket")) {
+            joynrConfig.setProperty(WebsocketModule.PROPERTY_WEBSOCKET_MESSAGING_HOST, "localhost");
+            joynrConfig.setProperty(WebsocketModule.PROPERTY_WEBSOCKET_MESSAGING_PORT, "4242");
+            joynrConfig.setProperty(WebsocketModule.PROPERTY_WEBSOCKET_MESSAGING_PROTOCOL, "ws");
+            joynrConfig.setProperty(WebsocketModule.PROPERTY_WEBSOCKET_MESSAGING_PATH, "");
+            runtimeModule = new LibjoynrWebSocketRuntimeModule();
+        } else if (args.length == 2 && args[1].equalsIgnoreCase("asyncipc")) {
+            //queueId for the cluster controller pipe
+            joynrConfig.setProperty(AsyncIpcModule.PROPERTY_ASYNCIPC_MESSAGING_CC_QUEUEID, "cc.messaging.participantid");
+
+            joynrConfig.setProperty(AsyncIpcModule.PROPERTY_ASYNCIPC_MESSAGING_SKELETON,
+                                    "io.joynr.messaging.asyncipc.AsyncIPCMessagingSkeleton");
+
+            joynrConfig.setProperty(ConfigurableMessagingSettings.PROPERTY_CC_CONNECTION_TYPE, "ASYNCIPC");
+
+            //if queueId is empty it'll be generated otherwise the specified value is used
+            //joynrConfig.setProperty(AsyncIpcModule.PROPERTY_ASYNCIPC_MESSAGING_QUEUEID, "");
+            joynrConfig.setProperty(AsyncIpcModule.PROPERTY_ASYNCIPC_MESSAGING_QUEUEID, "my.radio.consumer");
+
+            runtimeModule = new LibJoynrAsyncIPCRuntimeModule();
+        } else {
+            runtimeModule = Modules.override(new CCInProcessRuntimeModule()).with(new AtmosphereMessagingModule());
+        }
+        return runtimeModule;
+    }
+
+    @Override
+    @SuppressWarnings(value = "DM_EXIT", justification = "WORKAROUND to be removed")
+    public void shutdown() {
+        if (radioProxy != null) {
+            if (subscriptionIdCurrentStation != null) {
+                radioProxy.unsubscribeFromCurrentStation(subscriptionIdCurrentStation);
+            }
+        }
+
+        // Add any clean up code here for your application.
+        runtime.shutdown(true);
+
+        // TODO currently there is a bug preventing all threads being stopped
+        // WORKAROUND
+        try {
+            Thread.sleep(3000);
+        } catch (InterruptedException e) {
+            // do nothing; exiting application
+        }
+        System.exit(0);
+    }
+
+    private static DiscoveryScope getDiscoveryScope(String[] args) {
+        if (args.length > 2 && args[2].equalsIgnoreCase("local")) {
+            return DiscoveryScope.LOCAL_ONLY;
+        }
+        return DiscoveryScope.LOCAL_AND_GLOBAL;
+    }
+
+    @SuppressWarnings("checkstyle:methodlength")
+    @Override
+    public void run() {
+        DiscoveryQos discoveryQos = new DiscoveryQos();
+        // As soon as the arbitration QoS is set on the proxy builder, discovery of suitable providers
+        // is triggered. If the discovery process does not find matching providers within the
+        // arbitration timeout duration it will be terminated and you will get an arbitration exception.
+        discoveryQos.setDiscoveryTimeout(10000);
+        discoveryQos.setDiscoveryScope(discoveryScope);
+        // Provider entries in the global capabilities directory are cached locally. Discovery will
+        // consider entries in this cache valid if they are younger as the max age of cached
+        // providers as defined in the QoS. All valid entries will be processed by the arbitrator when searching
+        // for and arbitrating the "best" matching provider.
+        // NOTE: Valid cache entries might prevent triggering a lookup in the global capabilities
+        // directory. Therefore, not all providers registered with the global capabilities
+        // directory might be taken into account during arbitration.
+        discoveryQos.setCacheMaxAge(Long.MAX_VALUE);
+        // The discovery process outputs a list of matching providers. The arbitration strategy then
+        // chooses one or more of them to be used by the proxy.
+        discoveryQos.setArbitrationStrategy(ArbitrationStrategy.HighestPriority);
+
+        // The provider will maintain at least a minimum interval idle time in milliseconds between
+        // successive notifications, even if on-change notifications are enabled and the value changes more
+        // often. This prevents the consumer from being flooded by updated values. The filtering happens on
+        // the provider's side, thus also preventing excessive network traffic.
+        int minInterval_ms = 0;
+        // The provider will send notifications every maximum interval in milliseconds, even if the value didn't
+        // change. It will send notifications more often if on-change notifications are enabled,
+        // the value changes more often, and the minimum interval QoS does not prevent it. The maximum interval
+        // can thus be seen as a sort of heart beat.
+        int maxInterval_ms = 10000;
+
+        // The provider will send notifications until the end date is reached. The consumer will not receive any
+        // notifications (neither value notifications nor missed publication notifications) after
+        // this date.
+        long expiryDate_ms = System.currentTimeMillis() + 60000;
+        // If no notification was received within the last alert interval, a missed publication
+        // notification will be raised.
+        int alertAfterInterval_ms = 20000;
+        // Notification messages will be sent with this time-to-live. If a notification message can not be
+        // delivered within its TTL, it will be deleted from the system.
+        // NOTE: If a notification message is not delivered due to an expired TTL, it might raise a
+        // missed publication notification (depending on the value of the alert interval QoS).
+        int publicationTtl_ms = 5000;
+
+        OnChangeWithKeepAliveSubscriptionQos subscriptionQos = new OnChangeWithKeepAliveSubscriptionQos(minInterval_ms,
+                                                                                                        maxInterval_ms,
+                                                                                                        expiryDate_ms,
+                                                                                                        alertAfterInterval_ms,
+                                                                                                        publicationTtl_ms);
+
+        ProxyBuilder<RadioProxy> proxyBuilder = runtime.getProxyBuilder(providerDomain, RadioProxy.class);
+
+        try {
+            // getting an attribute
+            radioProxy = proxyBuilder.setMessagingQos(new MessagingQos()).setDiscoveryQos(discoveryQos).build();
+            RadioStation currentStation = radioProxy.getCurrentStation();
+            LOG.info(PRINT_BORDER + "ATTRIBUTE GET: current station: " + currentStation + PRINT_BORDER);
+
+            // subscribe to an attribute
+            subscriptionIdCurrentStation = radioProxy.subscribeToCurrentStation(new AttributeSubscriptionAdapter<RadioStation>() {
+
+                                                                                    @Override
+                                                                                    public void onReceive(RadioStation value) {
+                                                                                        LOG.info(PRINT_BORDER
+                                                                                                + "ATTRIBUTE SUBSCRIPTION: current station: "
+                                                                                                + value + PRINT_BORDER);
+                                                                                    }
+
+                                                                                    @Override
+                                                                                    public void onError(JoynrRuntimeException error) {
+                                                                                        LOG.info(PRINT_BORDER
+                                                                                                + "ATTRIBUTE SUBSCRIPTION: " + error
+                                                                                                + PRINT_BORDER);
+                                                                                    }
+                                                                                },
+                                                                                subscriptionQos);
+
+            // broadcast subscription
+
+            // The provider will send a notification whenever the value changes. The number of sent
+            // notifications may be limited by the min interval QoS.
+            // NOTE: The provider must support on-change notifications in order to use this feature by
+            // calling the <broadcast>EventOccurred method of the <interface>Provider class whenever
+            // the <broadcast> should be triggered.
+            OnChangeSubscriptionQos weakSignalBroadcastSubscriptionQos;
+            // The provider will maintain at least a minimum interval idle time in milliseconds between
+            // successive notifications, even if on-change notifications are enabled and the value changes
+            // more often. This prevents the consumer from being flooded by updated values. The filtering
+            // happens on the provider's side, thus also preventing excessive network traffic.
+            int wsbMinInterval = 1 * 1000;
+            // The provider will send notifications until the end date is reached. The consumer will not receive any
+            // notifications (neither value notifications nor missed publication notifications) after
+            // this date.
+            long wsbExpiryDate = System.currentTimeMillis() + 60 * 1000;
+            // Notification messages will be sent with this time-to-live. If a notification message can not be
+            // delivered within its TTL, it will be deleted from the system.
+            // NOTE: If a notification message is not delivered due to an expired TTL, it might raise a
+            // missed publication notification (depending on the value of the alert interval QoS).
+            int wsbPublicationTtl = 5 * 1000;
+            weakSignalBroadcastSubscriptionQos = new OnChangeSubscriptionQos(wsbMinInterval,
+                                                                             wsbExpiryDate,
+                                                                             wsbPublicationTtl);
+            radioProxy.subscribeToWeakSignalBroadcast(new WeakSignalBroadcastAdapter() {
+                @Override
+                public void onReceive(RadioStation weakSignalStation) {
+                    LOG.info(PRINT_BORDER + "BROADCAST SUBSCRIPTION: weak signal: " + weakSignalStation + PRINT_BORDER);
+                }
+            },
+                                                      weakSignalBroadcastSubscriptionQos);
+
+            // selective broadcast subscription
+
+            OnChangeSubscriptionQos newStationDiscoveredBroadcastSubscriptionQos;
+            int nsdbMinInterval = 2 * 1000;
+            long nsdbExpiryDate = System.currentTimeMillis() + 180 * 1000;
+            int nsdbPublicationTtl = 5 * 1000;
+            newStationDiscoveredBroadcastSubscriptionQos = new OnChangeSubscriptionQos(nsdbMinInterval,
+                                                                                       nsdbExpiryDate,
+                                                                                       nsdbPublicationTtl);
+            NewStationDiscoveredBroadcastFilterParameters newStationDiscoveredBroadcastFilterParams = new NewStationDiscoveredBroadcastFilterParameters();
+            newStationDiscoveredBroadcastFilterParams.setHasTrafficService("true");
+            GeoPosition positionOfInterest = new GeoPosition(48.1351250, 11.5819810); // Munich
+            String positionOfInterestJson = null;
+            try {
+                positionOfInterestJson = objectMapper.writeValueAsString(positionOfInterest);
+            } catch (JsonProcessingException e1) {
+                LOG.error("Unable to write position of interest filter parameter to JSON", e1);
+            }
+            newStationDiscoveredBroadcastFilterParams.setPositionOfInterest(positionOfInterestJson);
+            newStationDiscoveredBroadcastFilterParams.setRadiusOfInterestArea("200000"); // 200 km
+            radioProxy.subscribeToNewStationDiscoveredBroadcast(new RadioBroadcastInterface.NewStationDiscoveredBroadcastAdapter() {
+                                                                    @Override
+                                                                    public void onReceive(RadioStation discoveredStation,
+                                                                                          GeoPosition geoPosition) {
+                                                                        LOG.info(PRINT_BORDER
+                                                                                + "BROADCAST SUBSCRIPTION: new station discovered: "
+                                                                                + discoveredStation + " at "
+                                                                                + geoPosition + PRINT_BORDER);
+                                                                    }
+                                                                },
+                                                                newStationDiscoveredBroadcastSubscriptionQos,
+                                                                newStationDiscoveredBroadcastFilterParams);
+
+            boolean success;
+
+            try {
+                // add favorite radio station
+                RadioStation favoriteStation = new RadioStation("99.3 The Fox Rocks", false, Country.CANADA);
+                success = radioProxy.addFavoriteStation(favoriteStation);
+                LOG.info(PRINT_BORDER + "METHOD: added favorite station: " + favoriteStation + ": " + success
+                         + PRINT_BORDER);
+                success = radioProxy.addFavoriteStation(favoriteStation);
+            } catch (ApplicationException exception) {
+                AddFavoriteStationErrorEnum error = exception.getError();
+                switch (error) {
+                case DUPLICATE_RADIOSTATION:
+                    LOG.info(PRINT_BORDER + "METHOD: addFavoriteStation failed with the following excpected error: " + error);
+                    break;
+                default:
+                    LOG.error(PRINT_BORDER + "METHOD: addFavoriteStation failed with an unexpected error: " + error);
+                    break;
+                }
+            }
+
+            try {
+                // add favorite radio station
+                RadioStation favoriteStation = new RadioStation("", false, Country.GERMANY);
+                success = radioProxy.addFavoriteStation(favoriteStation);
+                LOG.info(PRINT_BORDER + "METHOD: addFavoriteStation completed unexpected with the following output: " + success);
+            } catch (ApplicationException exception) {
+                String errorName = exception.getError().name();
+                LOG.info(PRINT_BORDER + "METHOD: addFavoriteStation failed with the following unexpected ApplicationExcecption: " + errorName);
+            } catch (ProviderRuntimeException exception) {
+                String errorName = exception.getMessage();
+                String expectation = errorName.equals(MyRadioProvider.MISSING_NAME) ? "expected" : "unexpected";
+                LOG.info(PRINT_BORDER + "METHOD: addFavoriteStation failed with the following " + expectation + " exception: " + errorName);
+            }
+
+            // shuffle the stations
+            radioProxy.shuffleStations();
+            currentStation = radioProxy.getCurrentStation();
+            LOG.info(PRINT_BORDER + "The current radio station after shuffling is: " + currentStation + PRINT_BORDER);
+
+            // add favorite radio station async
+            RadioStation radioStation = new RadioStation("99.4 AFN", false, Country.GERMANY);
+            Future<Boolean> future = radioProxy.addFavoriteStation(new CallbackWithModeledError<Boolean, AddFavoriteStationErrorEnum>() {
+                @Override
+                public void onSuccess(Boolean result) {
+                    LOG.info(PRINT_BORDER + "ASYNC METHOD: added favorite station: callback onSuccess" + PRINT_BORDER);
+                }
+
+                @Override
+                public void onFailure(JoynrRuntimeException error) {
+                    LOG.info(PRINT_BORDER + "ASYNC METHOD: added favorite station: callback onFailure: " + error.getMessage() + PRINT_BORDER);
+                }
+
+                @Override
+                public void onFailure(AddFavoriteStationErrorEnum errorEnum) {
+                    switch (errorEnum) {
+                    case DUPLICATE_RADIOSTATION:
+                        LOG.info(PRINT_BORDER + "ASYNC METHOD: added favorite station failed: Duplicate Station!" + PRINT_BORDER);
+                        break;
+
+                    default:
+                        LOG.error(PRINT_BORDER + "ASYNC METHOD: added favorite station failed: unknown errorEnum:" + errorEnum + PRINT_BORDER);
+                        break;
+                    }
+                    LOG.info(PRINT_BORDER + "ASYNC METHOD: added favorite station: callback onFailure: " + errorEnum
+                    + PRINT_BORDER);
+                }
+            }, radioStation);
+
+            try {
+                long timeoutInMilliseconds = 8000;
+                Boolean reply = future.get(timeoutInMilliseconds);
+                LOG.info(PRINT_BORDER + "ASYNC METHOD: added favorite station: " + radioStation + ": " + reply
+                        + PRINT_BORDER);
+            } catch (InterruptedException|JoynrRuntimeException|ApplicationException e) {
+                LOG.info(PRINT_BORDER + "ASYNC METHOD: added favorite station: " + radioStation
+                        + ": " + e.getClass().getSimpleName() + "!");
+            }
+
+            ConsoleReader console;
+            try {
+                console = new ConsoleReader();
+                int key;
+                while ((key = console.readCharacter()) != 'q') {
+                    switch (key) {
+                    case 's':
+                        radioProxy.shuffleStations();
+                        LOG.info("called shuffleStations");
+                        break;
+                    case 'm':
+                        GetLocationOfCurrentStationReturned locationOfCurrentStation = radioProxy.getLocationOfCurrentStation();
+                        LOG.info("called getLocationOfCurrentStation. country: " + locationOfCurrentStation.country + ", location: " + locationOfCurrentStation.location);
+                    default:
+                        LOG.info("\n\nUSAGE press\n" + " q\tto quit\n" + " s\tto shuffle stations\n");
+                        break;
+                    }
+                }
+            } catch (IOException e) {
+                LOG.error("error reading input from console", e);
+            }
+
+        } catch (DiscoveryException e) {
+            LOG.error("No provider found", e);
+        } catch (JoynrCommunicationException e) {
+            LOG.error("The message was not sent: ", e);
+        }
+    }
+}
diff --git a/examples/radio-app/src/main/java/io/joynr/demo/MyRadioProviderApplication.java b/examples/radio-app/src/main/java/io/joynr/demo/MyRadioProviderApplication.java
index e2fdb9c..9edea7a 100644
--- a/examples/radio-app/src/main/java/io/joynr/demo/MyRadioProviderApplication.java
+++ b/examples/radio-app/src/main/java/io/joynr/demo/MyRadioProviderApplication.java
@@ -1,267 +1,301 @@
-package io.joynr.demo;
-
-/*
- * #%L
- * %%
- * Copyright (C) 2011 - 2015 BMW Car IT GmbH
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * #L%
- */
-
-import io.joynr.accesscontrol.StaticDomainAccessControlProvisioning;
-import io.joynr.accesscontrol.StaticDomainAccessControlProvisioningModule;
-import io.joynr.exceptions.JoynrRuntimeException;
-import io.joynr.messaging.AtmosphereMessagingModule;
-import io.joynr.messaging.MessagingPropertyKeys;
-import io.joynr.messaging.websocket.WebsocketModule;
-import io.joynr.runtime.AbstractJoynrApplication;
-import io.joynr.runtime.CCInProcessRuntimeModule;
-import io.joynr.runtime.CCWebSocketRuntimeModule;
-import io.joynr.runtime.JoynrApplication;
-import io.joynr.runtime.JoynrApplicationModule;
-import io.joynr.runtime.JoynrInjectorFactory;
-import io.joynr.runtime.LibjoynrWebSocketRuntimeModule;
-
-import java.io.IOException;
-import java.util.Properties;
-
-import jline.console.ConsoleReader;
-import joynr.infrastructure.DacTypes.MasterAccessControlEntry;
-import joynr.infrastructure.DacTypes.Permission;
-import joynr.infrastructure.DacTypes.TrustLevel;
-import joynr.types.ProviderScope;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
-import com.google.inject.Inject;
-import com.google.inject.Module;
-import com.google.inject.util.Modules;
-
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
-
-public class MyRadioProviderApplication extends AbstractJoynrApplication {
-    private static final Logger LOG = LoggerFactory.getLogger(MyRadioProviderApplication.class);
-    public static final String STATIC_PERSISTENCE_FILE = "provider-joynr.properties";
-
-    private MyRadioProvider provider = null;
-
-    @Inject
-    private ObjectMapper jsonSerializer;
-
-    @Inject
-    private ProviderScope providerScope;
-
-    public static void main(String[] args) throws Exception {
-        // run application from cmd line using Maven:
-        // mvn exec:java -Dexec.mainClass="io.joynr.demo.MyRadioProviderApplication" -Dexec.args="<local-domain>"
-        // Get the provider domain from the command line
-        if (args.length < 1 || args.length > 3) {
-            LOG.error("\n\nUSAGE: java {} <local-domain> [(websocket | websocketCC) [local]]\n\n NOTE: Providers are registered on the local domain.",
-                      MyRadioProviderApplication.class.getName());
-            return;
-        }
-        String localDomain = args[0];
-
-        Properties joynrConfig = new Properties();
-        Module runtimeModule = getRuntimeModule(args, joynrConfig);
-        final ProviderScope providerScope = getProviderScope(args);
-        LOG.debug("Using the following runtime module: " + runtimeModule.getClass().getSimpleName());
-        LOG.debug("Registering provider with the following scope: " + providerScope.name());
-        LOG.debug("Registering provider on domain \"{}\"", localDomain);
-
-        // joynr config properties are used to set joynr configuration at
-        // compile time. They are set on the
-        // JoynrInjectorFactory.
-        // Set a custom static persistence file (default is joynr.properties in
-        // the working dir) to store
-        // joynr configuration. It allows for changing the joynr configuration
-        // at runtime. Custom persistence
-        // files support running the consumer and provider applications from
-        // within the same directory.
-        joynrConfig.setProperty(MessagingPropertyKeys.PERSISTENCE_FILE, STATIC_PERSISTENCE_FILE);
-
-        // How to use custom infrastructure elements:
-
-        // 1) Set them programmatically at compile time using the joynr
-        // configuration properties at the
-        // JoynInjectorFactory. E.g. uncomment the following lines to set a
-        // certain joynr server
-        // instance.
-        // joynrConfig.setProperty(MessagingPropertyKeys.BOUNCE_PROXY_URL,
-        // "http://localhost:8080/bounceproxy/");
-        // joynrConfig.setProperty(MessagingPropertyKeys.CAPABILITIESDIRECTORYURL,
-        // "http://localhost:8080/discovery/channels/discoverydirectory_channelid/");
-        // joynrConfig.setProperty(MessagingPropertyKeys.CHANNELURLDIRECTORYURL,
-        // "http://localhost:8080/discovery/channels/discoverydirectory_channelid/");
-
-        // Each joynr instance has a local domain. It identifies the execution
-        // device/platform, e.g. the
-        // vehicle. Normally, providers on that instance are registered for the
-        // local domain.
-        joynrConfig.setProperty(PROPERTY_JOYNR_DOMAIN_LOCAL, localDomain);
-
-        // 2) Or set them in the static persistence file (default:
-        // joynr.properties in working dir) at
-        // runtime. If not available in the working dir, it will be created
-        // during the first launch
-        // of the application. Copy the following lines to the custom
-        // persistence file to set a
-        // certain joynr server instance.
-        // NOTE: This application uses a custom static persistence file
-        // provider-joynr.properties.
-        // Copy the following lines to the custom persistence file to set a
-        // certain joynr server
-        // instance.
-        // joynr.messaging.bounceproxyurl=http://localhost:8080/bounceproxy/
-        // joynr.messaging.capabilitiesdirectoryurl=http://localhost:8080/discovery/channels/discoverydirectory_channelid/
-        // joynr.messaging.channelurldirectoryurl=http://localhost:8080/discovery/channels/discoverydirectory_channelid/
-
-        // 3) Or set them in Java System properties.
-        // -Djoynr.messaging.bounceProxyUrl=http://localhost:8080/bounceproxy/
-        // -Djoynr.messaging.capabilitiesDirectoryUrl=http://localhost:8080/discovery/channels/discoverydirectory_channelid/
-        // -Djoynr.messaging.channelUrlDirectoryUrl=http://localhost:8080/discovery/channels/discoverydirectory_channelid/
-
-        // NOTE:
-        // Programmatically set configuration properties override properties set
-        // in the static persistence file.
-        // Java system properties override both
-
-        // Application-specific configuration properties are injected to the
-        // application by setting
-        // them on the JoynApplicationModule.
-        Properties appConfig = new Properties();
-
-        // Use injected static provisioning of access control entries to allow access to anyone to this interface
-        provisionAccessControl(joynrConfig, localDomain);
-        JoynrApplication joynrApplication = new JoynrInjectorFactory(joynrConfig,
-                                                                     runtimeModule,
-                                                                     new StaticDomainAccessControlProvisioningModule()).createApplication(new JoynrApplicationModule(MyRadioProviderApplication.class,
-                                                                                                                                                                     appConfig) {
-            @Override
-            protected void configure() {
-                super.configure();
-                bind(ProviderScope.class).toInstance(providerScope);
-            }
-        });
-        joynrApplication.run();
-
-        joynrApplication.shutdown();
-    }
-
-    private static ProviderScope getProviderScope(String[] args) {
-        if (args.length > 2 && args[2].equalsIgnoreCase("local")) {
-            return ProviderScope.LOCAL;
-        }
-        return ProviderScope.GLOBAL;
-    }
-
-    private static Module getRuntimeModule(String[] args, Properties joynrConfig) {
-        if (args.length > 1) {
-            if (args[1].equalsIgnoreCase("websocket")) {
-                configureWebSocket(joynrConfig);
-                return new LibjoynrWebSocketRuntimeModule();
-            } else if (args[1].equalsIgnoreCase("websocketcc")) {
-                configureWebSocket(joynrConfig);
-                return new CCWebSocketRuntimeModule();
-            }
-        }
-        //by default:
-        return Modules.override(new CCInProcessRuntimeModule()).with(new AtmosphereMessagingModule());
-    }
-
-    private static void configureWebSocket(Properties joynrConfig) {
-        joynrConfig.setProperty(WebsocketModule.PROPERTY_WEBSOCKET_MESSAGING_HOST, "localhost");
-        joynrConfig.setProperty(WebsocketModule.PROPERTY_WEBSOCKET_MESSAGING_PORT, "4242");
-        joynrConfig.setProperty(WebsocketModule.PROPERTY_WEBSOCKET_MESSAGING_PROTOCOL, "ws");
-        joynrConfig.setProperty(WebsocketModule.PROPERTY_WEBSOCKET_MESSAGING_PATH, "");
-    }
-
-    @Override
-    public void run() {
-        provider = new MyRadioProvider(providerScope);
-        provider.addBroadcastFilter(new TrafficServiceBroadcastFilter());
-        provider.addBroadcastFilter(new GeocastBroadcastFilter(jsonSerializer));
-        runtime.registerProvider(localDomain, provider);
-
-        ConsoleReader console;
-        try {
-            console = new ConsoleReader();
-            int key;
-            while ((key = console.readCharacter()) != 'q') {
-                switch (key) {
-                case 's':
-                    provider.shuffleStations();
-                    break;
-                case 'w':
-                    provider.fireWeakSignalEvent();
-                    break;
-                case 'n':
-                    provider.fireNewStationDiscoveredEvent();
-                    break;
-                default:
-                    LOG.info("\n\nUSAGE press\n" + " q\tto quit\n" + " s\tto shuffle stations\n"
-                            + " w\tto fire weak signal event\n" + " n\tto fire station discovered event\n");
-                    break;
-                }
-            }
-        } catch (IOException e) {
-            LOG.error("error reading input from console", e);
-        }
-    }
-
-    @Override
-    @SuppressWarnings(value = "DM_EXIT", justification = "WORKAROUND to be removed")
-    public void shutdown() {
-        LOG.info("shutting down");
-        if (provider != null) {
-            try {
-                runtime.unregisterProvider(localDomain, provider);
-            } catch (JoynrRuntimeException e) {
-                LOG.error("unable to unregister capabilities {}", e.getMessage());
-            }
-        }
-        runtime.shutdown(true);
-        // TODO currently there is a bug preventing all threads being stopped
-        // WORKAROUND
-        try {
-            Thread.sleep(3000);
-        } catch (InterruptedException e) {
-            // do nothing; exiting application
-        }
-        System.exit(0);
-    }
-
-    private static void provisionAccessControl(Properties properties, String domain) throws Exception {
-        ObjectMapper objectMapper = new ObjectMapper();
-        objectMapper.enableDefaultTypingAsProperty(DefaultTyping.JAVA_LANG_OBJECT, "_typeName");
-        MasterAccessControlEntry newMasterAccessControlEntry = new MasterAccessControlEntry("*",
-                                                                                            domain,
-                                                                                            MyRadioProvider.INTERFACE_NAME,
-                                                                                            TrustLevel.LOW,
-                                                                                            new TrustLevel[]{ TrustLevel.LOW },
-                                                                                            TrustLevel.LOW,
-                                                                                            new TrustLevel[]{ TrustLevel.LOW },
-                                                                                            "*",
-                                                                                            Permission.YES,
-                                                                                            new Permission[]{ Permission.YES });
-
-        MasterAccessControlEntry[] provisionedAccessControlEntries = { newMasterAccessControlEntry };
-        String provisionedAccessControlEntriesAsJson = objectMapper.writeValueAsString(provisionedAccessControlEntries);
-        properties.setProperty(StaticDomainAccessControlProvisioning.PROPERTY_PROVISIONED_MASTER_ACCESSCONTROLENTRIES,
-                               provisionedAccessControlEntriesAsJson);
-    }
-}
+package io.joynr.demo;
+
+import java.io.IOException;
+import java.util.Properties;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
+import com.google.inject.Inject;
+import com.google.inject.Module;
+import com.google.inject.util.Modules;
+
+import edu.umd.cs.findbugs.annotations.SuppressWarnings;
+
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2015 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+
+import io.joynr.accesscontrol.StaticDomainAccessControlProvisioning;
+import io.joynr.accesscontrol.StaticDomainAccessControlProvisioningModule;
+import io.joynr.exceptions.JoynrRuntimeException;
+import io.joynr.messaging.AtmosphereMessagingModule;
+import io.joynr.messaging.ConfigurableMessagingSettings;
+import io.joynr.messaging.MessagingPropertyKeys;
+import io.joynr.messaging.asyncipc.AsyncIpcModule;
+import io.joynr.messaging.websocket.WebsocketModule;
+import io.joynr.runtime.AbstractJoynrApplication;
+import io.joynr.runtime.CCInProcessRuntimeModule;
+import io.joynr.runtime.CCWebSocketRuntimeModule;
+import io.joynr.runtime.JoynrApplication;
+import io.joynr.runtime.JoynrApplicationModule;
+import io.joynr.runtime.JoynrInjectorFactory;
+import io.joynr.runtime.LibJoynrAsyncIPCRuntimeModule;
+import io.joynr.runtime.LibjoynrWebSocketRuntimeModule;
+
+import java.io.IOException;
+import java.util.Properties;
+
+import jline.console.ConsoleReader;
+import joynr.infrastructure.DacTypes.MasterAccessControlEntry;
+import joynr.infrastructure.DacTypes.Permission;
+import joynr.infrastructure.DacTypes.TrustLevel;
+import joynr.types.ProviderScope;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
+import com.google.inject.Inject;
+import com.google.inject.Module;
+import com.google.inject.util.Modules;
+
+import edu.umd.cs.findbugs.annotations.SuppressWarnings;
+
+public class MyRadioProviderApplication extends AbstractJoynrApplication {
+    private static final Logger LOG = LoggerFactory.getLogger(MyRadioProviderApplication.class);
+    public static final String STATIC_PERSISTENCE_FILE = "provider-joynr.properties";
+
+    private MyRadioProvider provider = null;
+
+    @Inject
+    private ObjectMapper jsonSerializer;
+
+    @Inject
+    private ProviderScope providerScope;
+
+    public static void main(String[] args) throws Exception {
+        // run application from cmd line using Maven:
+        // mvn exec:java -Dexec.mainClass="io.joynr.demo.MyRadioProviderApplication" -Dexec.args="<local-domain>"
+        // Get the provider domain from the command line
+        if (args.length < 1 || args.length > 3) {
+            LOG.error("\n\nUSAGE: java {} <local-domain> [(websocket | websocketCC) [local]]\n\n NOTE: Providers are registered on the local domain.",
+                      MyRadioProviderApplication.class.getName());
+            return;
+        }
+        String localDomain = args[0];
+
+        Properties joynrConfig = new Properties();
+        Module runtimeModule = getRuntimeModule(args, joynrConfig);
+        final ProviderScope providerScope = getProviderScope(args);
+        LOG.debug("Using the following runtime module: " + runtimeModule.getClass().getSimpleName());
+        LOG.debug("Registering provider with the following scope: " + providerScope.name());
+        LOG.debug("Registering provider on domain \"{}\"", localDomain);
+
+        // joynr config properties are used to set joynr configuration at
+        // compile time. They are set on the
+        // JoynrInjectorFactory.
+        // Set a custom static persistence file (default is joynr.properties in
+        // the working dir) to store
+        // joynr configuration. It allows for changing the joynr configuration
+        // at runtime. Custom persistence
+        // files support running the consumer and provider applications from
+        // within the same directory.
+        joynrConfig.setProperty(MessagingPropertyKeys.PERSISTENCE_FILE, STATIC_PERSISTENCE_FILE);
+
+        // How to use custom infrastructure elements:
+
+        // 1) Set them programmatically at compile time using the joynr
+        // configuration properties at the
+        // JoynInjectorFactory. E.g. uncomment the following lines to set a
+        // certain joynr server
+        // instance.
+        // joynrConfig.setProperty(MessagingPropertyKeys.BOUNCE_PROXY_URL,
+        // "http://localhost:8080/bounceproxy/");
+        // joynrConfig.setProperty(MessagingPropertyKeys.CAPABILITIESDIRECTORYURL,
+        // "http://localhost:8080/discovery/channels/discoverydirectory_channelid/");
+        // joynrConfig.setProperty(MessagingPropertyKeys.CHANNELURLDIRECTORYURL,
+        // "http://localhost:8080/discovery/channels/discoverydirectory_channelid/");
+
+        // Each joynr instance has a local domain. It identifies the execution
+        // device/platform, e.g. the
+        // vehicle. Normally, providers on that instance are registered for the
+        // local domain.
+        joynrConfig.setProperty(PROPERTY_JOYNR_DOMAIN_LOCAL, localDomain);
+
+        // 2) Or set them in the static persistence file (default:
+        // joynr.properties in working dir) at
+        // runtime. If not available in the working dir, it will be created
+        // during the first launch
+        // of the application. Copy the following lines to the custom
+        // persistence file to set a
+        // certain joynr server instance.
+        // NOTE: This application uses a custom static persistence file
+        // provider-joynr.properties.
+        // Copy the following lines to the custom persistence file to set a
+        // certain joynr server
+        // instance.
+        // joynr.messaging.bounceproxyurl=http://localhost:8080/bounceproxy/
+        // joynr.messaging.capabilitiesdirectoryurl=http://localhost:8080/discovery/channels/discoverydirectory_channelid/
+        // joynr.messaging.channelurldirectoryurl=http://localhost:8080/discovery/channels/discoverydirectory_channelid/
+
+        // 3) Or set them in Java System properties.
+        // -Djoynr.messaging.bounceProxyUrl=http://localhost:8080/bounceproxy/
+        // -Djoynr.messaging.capabilitiesDirectoryUrl=http://localhost:8080/discovery/channels/discoverydirectory_channelid/
+        // -Djoynr.messaging.channelUrlDirectoryUrl=http://localhost:8080/discovery/channels/discoverydirectory_channelid/
+
+        // NOTE:
+        // Programmatically set configuration properties override properties set
+        // in the static persistence file.
+        // Java system properties override both
+
+        // Application-specific configuration properties are injected to the
+        // application by setting
+        // them on the JoynApplicationModule.
+        Properties appConfig = new Properties();
+
+        // Use injected static provisioning of access control entries to allow access to anyone to this interface
+        provisionAccessControl(joynrConfig, localDomain);
+        JoynrApplication joynrApplication = new JoynrInjectorFactory(joynrConfig,
+                                                                     runtimeModule,
+                                                                     new StaticDomainAccessControlProvisioningModule()).createApplication(new JoynrApplicationModule(MyRadioProviderApplication.class,
+                                                                                                                                                                     appConfig) {
+            @Override
+            protected void configure() {
+                super.configure();
+                bind(ProviderScope.class).toInstance(providerScope);
+            }
+        });
+        joynrApplication.run();
+
+        joynrApplication.shutdown();
+    }
+
+    private static ProviderScope getProviderScope(String[] args) {
+        if (args.length > 2 && args[2].equalsIgnoreCase("local")) {
+            return ProviderScope.LOCAL;
+        }
+        return ProviderScope.GLOBAL;
+    }
+
+    private static Module getRuntimeModule(String[] args, Properties joynrConfig) {
+        if (args.length > 1) {
+            if (args[1].equalsIgnoreCase("websocket")) {
+                configureWebSocket(joynrConfig);
+                return new LibjoynrWebSocketRuntimeModule();
+            } else if (args[1].equalsIgnoreCase("websocketcc")) {
+                configureWebSocket(joynrConfig);
+                return new CCWebSocketRuntimeModule();
+            } else if (args[1].equalsIgnoreCase("asyncipc")) {
+                configureAsyncipc(joynrConfig);
+                return new LibJoynrAsyncIPCRuntimeModule();
+            }
+        }
+        //by default:
+        return Modules.override(new CCInProcessRuntimeModule()).with(new AtmosphereMessagingModule());
+    }
+
+    private static void configureAsyncipc(Properties joynrConfig) {
+        //queueId for the cluster controller pipe
+        joynrConfig.setProperty(AsyncIpcModule.PROPERTY_ASYNCIPC_MESSAGING_CC_QUEUEID, "cc.messaging.participantid");
+
+        joynrConfig.setProperty(AsyncIpcModule.PROPERTY_ASYNCIPC_MESSAGING_SKELETON,
+                                "io.joynr.messaging.asyncipc.AsyncIPCMessagingSkeleton");
+
+        joynrConfig.setProperty(ConfigurableMessagingSettings.PROPERTY_CC_CONNECTION_TYPE, "ASYNCIPC");
+
+        //if queueId is empty it'll be generated otherwise the specified value is used
+        //joynrConfig.setProperty(AsyncIpcModule.PROPERTY_ASYNCIPC_MESSAGING_QUEUEID, "");
+        joynrConfig.setProperty(AsyncIpcModule.PROPERTY_ASYNCIPC_MESSAGING_QUEUEID, "my.radio.provider");
+    }
+
+    private static void configureWebSocket(Properties joynrConfig) {
+        joynrConfig.setProperty(WebsocketModule.PROPERTY_WEBSOCKET_MESSAGING_HOST, "localhost");
+        joynrConfig.setProperty(WebsocketModule.PROPERTY_WEBSOCKET_MESSAGING_PORT, "4242");
+        joynrConfig.setProperty(WebsocketModule.PROPERTY_WEBSOCKET_MESSAGING_PROTOCOL, "ws");
+        joynrConfig.setProperty(WebsocketModule.PROPERTY_WEBSOCKET_MESSAGING_PATH, "");
+    }
+
+    @Override
+    public void run() {
+        provider = new MyRadioProvider(providerScope);
+        provider.addBroadcastFilter(new TrafficServiceBroadcastFilter());
+        provider.addBroadcastFilter(new GeocastBroadcastFilter(jsonSerializer));
+        runtime.registerProvider(localDomain, provider);
+
+        ConsoleReader console;
+        try {
+            console = new ConsoleReader();
+            int key;
+            while ((key = console.readCharacter()) != 'q') {
+                switch (key) {
+                case 's':
+                    provider.shuffleStations();
+                    break;
+                case 'w':
+                    provider.fireWeakSignalEvent();
+                    break;
+                case 'n':
+                    provider.fireNewStationDiscoveredEvent();
+                    break;
+                default:
+                    LOG.info("\n\nUSAGE press\n" + " q\tto quit\n" + " s\tto shuffle stations\n"
+                            + " w\tto fire weak signal event\n" + " n\tto fire station discovered event\n");
+                    break;
+                }
+            }
+        } catch (IOException e) {
+            LOG.error("error reading input from console", e);
+        }
+    }
+
+    @Override
+    @SuppressWarnings(value = "DM_EXIT", justification = "WORKAROUND to be removed")
+    public void shutdown() {
+        LOG.info("shutting down");
+        if (provider != null) {
+            try {
+                runtime.unregisterProvider(localDomain, provider);
+            } catch (JoynrRuntimeException e) {
+                LOG.error("unable to unregister capabilities {}", e.getMessage());
+            }
+        }
+        runtime.shutdown(true);
+        // TODO currently there is a bug preventing all threads being stopped
+        // WORKAROUND
+        try {
+            Thread.sleep(3000);
+        } catch (InterruptedException e) {
+            // do nothing; exiting application
+        }
+        System.exit(0);
+    }
+
+    private static void provisionAccessControl(Properties properties, String domain) throws Exception {
+        ObjectMapper objectMapper = new ObjectMapper();
+        objectMapper.enableDefaultTypingAsProperty(DefaultTyping.JAVA_LANG_OBJECT, "_typeName");
+        MasterAccessControlEntry newMasterAccessControlEntry = new MasterAccessControlEntry("*",
+                                                                                            domain,
+                                                                                            MyRadioProvider.INTERFACE_NAME,
+                                                                                            TrustLevel.LOW,
+                                                                                            new TrustLevel[]{ TrustLevel.LOW },
+                                                                                            TrustLevel.LOW,
+                                                                                            new TrustLevel[]{ TrustLevel.LOW },
+                                                                                            "*",
+                                                                                            Permission.YES,
+                                                                                            new Permission[]{ Permission.YES });
+
+        MasterAccessControlEntry[] provisionedAccessControlEntries = { newMasterAccessControlEntry };
+        String provisionedAccessControlEntriesAsJson = objectMapper.writeValueAsString(provisionedAccessControlEntries);
+        properties.setProperty(StaticDomainAccessControlProvisioning.PROPERTY_PROVISIONED_MASTER_ACCESSCONTROLENTRIES,
+                               provisionedAccessControlEntriesAsJson);
+    }
+}
diff --git a/java/backend-services/discovery-directory-servlet/pom.xml b/java/backend-services/discovery-directory-servlet/pom.xml
index 22093cb..8c40e60 100644
--- a/java/backend-services/discovery-directory-servlet/pom.xml
+++ b/java/backend-services/discovery-directory-servlet/pom.xml
@@ -1,290 +1,289 @@
-<!--
-  #%L
-  %%
-  Copyright (C) 2011 - 2013 BMW Car IT GmbH
-  %%
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  #L%
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<modelVersion>4.0.0</modelVersion>
-
-	<groupId>io.joynr.java.backend-services</groupId>
-	<artifactId>discovery-directory-servlet</artifactId>
-	<packaging>war</packaging>
-
-	<name>${project.groupId}:${project.artifactId}</name>
-
-	<parent>
-		<groupId>io.joynr.java</groupId>
-		<artifactId>backend-services</artifactId>
-		<version>0.14.1</version>
-		<relativePath>../pom.xml</relativePath>
-	</parent>
-
-	<dependencies>
-		<dependency>
-			<groupId>io.joynr.java.messaging</groupId>
-			<artifactId>messaging-servlet</artifactId>
-			<version>${project.version}</version>
-			<classifier>classes</classifier>
-			<type>jar</type>
-		</dependency>
-		<dependency>
-			<groupId>io.joynr.java.messaging</groupId>
-			<artifactId>messaging-servlet</artifactId>
-			<version>${project.version}</version>
-			<type>war</type>
-		</dependency>
-		<dependency>
-			<groupId>io.joynr.java.backend-services</groupId>
-			<artifactId>capabilities-directory</artifactId>
-			<version>${project.version}</version>
-		</dependency>
-		<dependency>
-			<groupId>io.joynr.java.backend-services</groupId>
-			<artifactId>channel-url-directory</artifactId>
-			<version>${project.version}</version>
-		</dependency>
-		<dependency>
-			<groupId>org.slf4j</groupId>
-			<artifactId>slf4j-log4j12</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>net.logstash.log4j</groupId>
-			<artifactId>jsonevent-layout</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>com.sun.jersey.jersey-test-framework</groupId>
-			<artifactId>jersey-test-framework-grizzly2</artifactId>
-			<scope>test</scope>
-			<exclusions>
-				<exclusion>
-					<groupId>javax.servlet</groupId>
-					<artifactId>servlet-api</artifactId>
-				</exclusion>
-			</exclusions>
-		</dependency>
-		<!-- 
-			The sources of javassist must be added to the WAR due to its LGPL-2.1 license.
-			It is pulled in as transitive dependency:
-			io.joynr.java.messaging:messaging-servlet:jar:classes:0.14.1:compile
-			+- org.reflections:reflections:jar:0.9.8:compile
-			|  +- javassist:javassist:jar:3.12.1.GA:compile
-			Please double check the correct version if these dependencies change.
-		-->
-		<dependency>
-			<groupId>javassist</groupId>
-			<artifactId>javassist</artifactId>
-			<classifier>sources</classifier>
-		</dependency>
-		<!--
-			The sources of hibernate-entitymanager. hibernate-core and hibernate-commons-annotations
-			must be added to the WAR due to its LGPL-2.1 license.
-			It is pulled in as transitive dependency:
-			+- io.joynr.java.backend-services:capabilities-directory:jar:0.14.1:compile
-			|  +- org.hibernate:hibernate-entitymanager:jar:4.3.8.Final:compile
-			|  |  +- org.hibernate:hibernate-core:jar:4.3.8.Final:compile
-			|  |  +- org.hibernate.common:hibernate-commons-annotations:jar:4.0.5.Final:compile
-		-->
-		<dependency>
-			<groupId>org.hibernate</groupId>
-			<artifactId>hibernate-core</artifactId>
-			<classifier>sources</classifier>
-			<exclusions>
-				<exclusion>
-					<artifactId>jboss-logging-annotations</artifactId>
-					<groupId>org.jboss.logging</groupId>
-				</exclusion>
-				<exclusion>
-					<artifactId>jboss-logging</artifactId>
-					<groupId>org.jboss.logging</groupId>
-				</exclusion>
-			</exclusions>
-		</dependency>
-		<dependency>
-			<groupId>org.hibernate</groupId>
-			<artifactId>hibernate-entitymanager</artifactId>
-			<classifier>sources</classifier>
-			<exclusions>
-				<exclusion>
-					<artifactId>jboss-logging-annotations</artifactId>
-					<groupId>org.jboss.logging</groupId>
-				</exclusion>
-				<exclusion>
-					<artifactId>jboss-logging</artifactId>
-					<groupId>org.jboss.logging</groupId>
-				</exclusion>
-			</exclusions>
-		</dependency>
-		<dependency>
-			<groupId>org.hibernate.common</groupId>
-			<artifactId>hibernate-commons-annotations</artifactId>
-			<version>4.0.5.Final</version>
-			<classifier>sources</classifier>
-			<exclusions>
-				<exclusion>
-					<artifactId>jboss-logging-annotations</artifactId>
-					<groupId>org.jboss.logging</groupId>
-				</exclusion>
-				<exclusion>
-					<artifactId>jboss-logging</artifactId>
-					<groupId>org.jboss.logging</groupId>
-				</exclusion>
-			</exclusions>
-		</dependency>
-	</dependencies>
-
-
-	<build>
-		<finalName>${project.artifactId}</finalName>
-		<plugins>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-war-plugin</artifactId>
-				<configuration>
-					<!-- <webXml>${basedir}/src/main/resources/WEB-INF/web.xml</webXml> -->
-					<!-- warName>discovery</warName -->
-					<warSourceDirectory>src/main/resources</warSourceDirectory>
-					<configuration>
-						<!-- no default value -->
-						<dependentWarIncludes>WEB-INF/web.xml, WEB-INF/glassfish-web.xml</dependentWarIncludes>
-						<dependentWarExcludes>WEB-INF/lib/*</dependentWarExcludes>
-					</configuration>
-					<overlays>
-						<overlay>
-							<groupId>io.joynr.java.messaging</groupId>
-							<artifactId>messaging-servlet</artifactId>
-							<type>war</type>
-						</overlay>
-					</overlays>
-					<webResources>
-						<resource>
-							<directory>${basedir}</directory>
-							<includes>
-								<include>*LICENSE*</include>
-								<include>NOTICE*</include>
-							</includes>
-						</resource>
-						<resource>
-							<directory>${project.build.directory}</directory>
-							<includes>
-								<include>LICENSE</include>
-							</includes>
-						</resource>
-					</webResources>
-				</configuration>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-dependency-plugin</artifactId>
-				<executions>
-					<execution>
-						<id>copy</id>
-						<phase>initialize</phase>
-						<goals>
-							<goal>copy</goal>
-						</goals>
-						<configuration>
-							<artifactItems>
-								<artifactItem>
-									<groupId>io.joynr.java.messaging.bounceproxy</groupId>
-									<artifactId>single-bounceproxy</artifactId>
-									<version>${project.version}</version>
-									<type>war</type>
-									<outputDirectory>${project.build.directory}</outputDirectory>
-									<destFileName>bounceproxy.war</destFileName>
-								</artifactItem>
-							</artifactItems>
-							<overWriteReleases>false</overWriteReleases>
-							<overWriteSnapshots>true</overWriteSnapshots>
-						</configuration>
-					</execution>
-				</executions>
-			</plugin>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>properties-maven-plugin</artifactId>
-				<executions>
-					<execution>
-						<goals>
-							<goal>set-system-properties</goal>
-						</goals>
-						<configuration>
-							<properties>
-								<property>
-									<name>log4j.configuration</name>
-									<value>file:${basedir}/src/main/resources/WEB-INF/classes/log4j.properties</value>
-								</property>
-							</properties>
-						</configuration>
-					</execution>
-				</executions>
-			</plugin>
-			<plugin>
-				<groupId>org.eclipse.jetty</groupId>
-				<artifactId>jetty-maven-plugin</artifactId>
-				<configuration>
-					<webAppSourceDirectory>src/main/resources</webAppSourceDirectory>
-					<webApp>
-						<contextPath>/discovery</contextPath>
-					</webApp>
-					<!--
-					Don't define system properties here, because it will override system
-					properties defined in plugin management in super POM.
-					-->
-					<contextHandlers combine.self="override">
-						<contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext">
-							<war>${project.build.directory}/bounceproxy.war</war>
-							<contextPath>/bounceproxy</contextPath>
-						</contextHandler>
-					</contextHandlers>
-				</configuration>
-			</plugin>
-		</plugins>
-		<pluginManagement>
-			<plugins>
-				<!--This plugin's configuration is used to store Eclipse m2e settings 
-					only. It has no influence on the Maven build itself. -->
-				<plugin>
-					<groupId>org.eclipse.m2e</groupId>
-					<artifactId>lifecycle-mapping</artifactId>
-					<version>1.0.0</version>
-					<configuration>
-						<lifecycleMappingMetadata>
-							<pluginExecutions>
-								<pluginExecution>
-									<pluginExecutionFilter>
-										<groupId>org.appfuse</groupId>
-										<artifactId>
-											maven-warpath-plugin
-										</artifactId>
-										<versionRange>
-											[2.0.2,)
-										</versionRange>
-										<goals>
-											<goal>add-classes</goal>
-										</goals>
-									</pluginExecutionFilter>
-									<action>
-										<ignore />
-									</action>
-								</pluginExecution>
-							</pluginExecutions>
-						</lifecycleMappingMetadata>
-					</configuration>
-				</plugin>
-			</plugins>
-		</pluginManagement>
-	</build>
-</project>
+<!--
+  #%L
+  %%
+  Copyright (C) 2011 - 2013 BMW Car IT GmbH
+  %%
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  #L%
+  -->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+
+	<groupId>io.joynr.java.backend-services</groupId>
+	<artifactId>discovery-directory-servlet</artifactId>
+	<packaging>war</packaging>
+
+	<name>${project.groupId}:${project.artifactId}</name>
+
+	<parent>
+		<groupId>io.joynr.java</groupId>
+		<artifactId>backend-services</artifactId>
+		<version>0.14.1</version>
+		<relativePath>../pom.xml</relativePath>
+	</parent>
+
+	<dependencies>
+		<dependency>
+			<groupId>io.joynr.java.messaging</groupId>
+			<artifactId>messaging-servlet</artifactId>
+			<version>${project.version}</version>
+			<classifier>classes</classifier>
+			<type>jar</type>
+		</dependency>
+		<dependency>
+			<groupId>io.joynr.java.messaging</groupId>
+			<artifactId>messaging-servlet</artifactId>
+			<version>${project.version}</version>
+			<type>war</type>
+		</dependency>
+		<dependency>
+			<groupId>io.joynr.java.backend-services</groupId>
+			<artifactId>capabilities-directory</artifactId>
+			<version>${project.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>io.joynr.java.backend-services</groupId>
+			<artifactId>channel-url-directory</artifactId>
+			<version>${project.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>slf4j-log4j12</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>net.logstash.log4j</groupId>
+			<artifactId>jsonevent-layout</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>com.sun.jersey.jersey-test-framework</groupId>
+			<artifactId>jersey-test-framework-grizzly2</artifactId>
+			<scope>test</scope>
+			<exclusions>
+				<exclusion>
+					<groupId>javax.servlet</groupId>
+					<artifactId>servlet-api</artifactId>
+				</exclusion>
+			</exclusions>
+		</dependency>
+		<!-- 
+			The sources of javassist must be added to the WAR due to its LGPL-2.1 license.
+			It is pulled in as transitive dependency:
+			io.joynr.java.messaging:messaging-servlet:jar:classes:0.14.1:compile
+			+- org.reflections:reflections:jar:0.9.8:compile
+			|  +- javassist:javassist:jar:3.12.1.GA:compile
+			Please double check the correct version if these dependencies change.
+		-->
+		<dependency>
+			<groupId>javassist</groupId>
+			<artifactId>javassist</artifactId>
+			<classifier>sources</classifier>
+		</dependency>
+		<!--
+			The sources of hibernate-entitymanager. hibernate-core and hibernate-commons-annotations
+			must be added to the WAR due to its LGPL-2.1 license.
+			It is pulled in as transitive dependency:
+			+- io.joynr.java.backend-services:capabilities-directory:jar:0.14.1:compile
+			|  +- org.hibernate:hibernate-entitymanager:jar:4.3.8.Final:compile
+			|  |  +- org.hibernate:hibernate-core:jar:4.3.8.Final:compile
+			|  |  +- org.hibernate.common:hibernate-commons-annotations:jar:4.0.5.Final:compile
+		-->
+		<dependency>
+			<groupId>org.hibernate</groupId>
+			<artifactId>hibernate-core</artifactId>
+			<classifier>sources</classifier>
+			<exclusions>
+				<exclusion>
+					<artifactId>jboss-logging-annotations</artifactId>
+					<groupId>org.jboss.logging</groupId>
+				</exclusion>
+				<exclusion>
+					<artifactId>jboss-logging</artifactId>
+					<groupId>org.jboss.logging</groupId>
+				</exclusion>
+			</exclusions>
+		</dependency>
+		<dependency>
+			<groupId>org.hibernate</groupId>
+			<artifactId>hibernate-entitymanager</artifactId>
+			<classifier>sources</classifier>
+			<exclusions>
+				<exclusion>
+					<artifactId>jboss-logging-annotations</artifactId>
+					<groupId>org.jboss.logging</groupId>
+				</exclusion>
+				<exclusion>
+					<artifactId>jboss-logging</artifactId>
+					<groupId>org.jboss.logging</groupId>
+				</exclusion>
+			</exclusions>
+		</dependency>
+		<dependency>
+			<groupId>org.hibernate.common</groupId>
+			<artifactId>hibernate-commons-annotations</artifactId>
+			<version>4.0.5.Final</version>
+			<classifier>sources</classifier>
+			<exclusions>
+				<exclusion>
+					<artifactId>jboss-logging-annotations</artifactId>
+					<groupId>org.jboss.logging</groupId>
+				</exclusion>
+				<exclusion>
+					<artifactId>jboss-logging</artifactId>
+					<groupId>org.jboss.logging</groupId>
+				</exclusion>
+			</exclusions>
+		</dependency>
+	</dependencies>
+
+
+	<build>
+		<finalName>${project.artifactId}</finalName>
+		<pluginManagement>
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-war-plugin</artifactId>
+				<configuration>
+					<failOnMissingWebXml>false</failOnMissingWebXml>
+					<!-- <webXml>${basedir}/src/main/resources/WEB-INF/web.xml</webXml> -->
+					<!-- warName>discovery</warName -->
+					<warSourceDirectory>src/main/resources</warSourceDirectory>
+					<configuration>
+						<!-- no default value -->
+						<dependentWarIncludes>WEB-INF/web.xml, WEB-INF/glassfish-web.xml</dependentWarIncludes>
+						<dependentWarExcludes>WEB-INF/lib/*</dependentWarExcludes>
+					</configuration>
+					<overlays>
+						<overlay>
+							<groupId>io.joynr.java.messaging</groupId>
+							<artifactId>messaging-servlet</artifactId>
+							<type>war</type>
+						</overlay>
+					</overlays>
+					<webResources>
+						<resource>
+							<directory>${basedir}</directory>
+							<includes>
+								<include>*LICENSE*</include>
+								<include>NOTICE*</include>
+							</includes>
+						</resource>
+						<resource>
+							<directory>${project.build.directory}</directory>
+							<includes>
+								<include>LICENSE</include>
+							</includes>
+						</resource>
+					</webResources>
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-dependency-plugin</artifactId>
+				<executions>
+					<execution>
+						<id>copy</id>
+						<phase>initialize</phase>
+						<goals>
+							<goal>copy</goal>
+						</goals>
+						<configuration>
+							<artifactItems>
+								<artifactItem>
+									<groupId>io.joynr.java.messaging.bounceproxy</groupId>
+									<artifactId>single-bounceproxy</artifactId>
+									<version>${project.version}</version>
+									<type>war</type>
+									<outputDirectory>${project.build.directory}</outputDirectory>
+									<destFileName>bounceproxy.war</destFileName>
+								</artifactItem>
+							</artifactItems>
+							<overWriteReleases>false</overWriteReleases>
+							<overWriteSnapshots>true</overWriteSnapshots>
+						</configuration>
+					</execution>
+				</executions>
+			</plugin>
+			<plugin>
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>properties-maven-plugin</artifactId>
+				<executions>
+					<execution>
+						<goals>
+							<goal>set-system-properties</goal>
+						</goals>
+						<configuration>
+							<properties>
+								<property>
+									<name>log4j.configuration</name>
+									<value>file:${basedir}/src/main/resources/WEB-INF/classes/log4j.properties</value>
+								</property>
+							</properties>
+						</configuration>
+					</execution>
+				</executions>
+			</plugin>
+			<plugin>
+				<groupId>org.eclipse.jetty</groupId>
+				<artifactId>jetty-maven-plugin</artifactId>
+				<configuration>
+					<webAppSourceDirectory>src/main/resources</webAppSourceDirectory>
+					<webApp>
+						<contextPath>/discovery</contextPath>
+					</webApp>
+					<!--
+					Don't define system properties here, because it will override system
+					properties defined in plugin management in super POM.
+					-->
+					<contextHandlers combine.self="override">
+						<contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext">
+							<war>${project.build.directory}/bounceproxy.war</war>
+							<contextPath>/bounceproxy</contextPath>
+						</contextHandler>
+					</contextHandlers>
+				</configuration>
+			</plugin>
+				<!--This plugin's configuration is used to store Eclipse m2e settings 
+					only. It has no influence on the Maven build itself. -->
+				<plugin>
+					<groupId>org.eclipse.m2e</groupId>
+					<artifactId>lifecycle-mapping</artifactId>
+					<version>1.0.0</version>
+					<configuration>
+						<lifecycleMappingMetadata>
+							<pluginExecutions>
+								<pluginExecution>
+									<pluginExecutionFilter>
+										<groupId>org.appfuse</groupId>
+										<artifactId>
+											maven-warpath-plugin
+										</artifactId>
+										<versionRange>
+											[2.0.2,)
+										</versionRange>
+										<goals>
+											<goal>add-classes</goal>
+										</goals>
+									</pluginExecutionFilter>
+									<action>
+										<ignore />
+									</action>
+								</pluginExecution>
+							</pluginExecutions>
+						</lifecycleMappingMetadata>
+					</configuration>
+				</plugin>
+			</plugins>
+		</pluginManagement>
+	</build>
+</project>
diff --git a/java/backend-services/domain-access-controller-servlet/pom.xml b/java/backend-services/domain-access-controller-servlet/pom.xml
index fe88841..008e903 100755
--- a/java/backend-services/domain-access-controller-servlet/pom.xml
+++ b/java/backend-services/domain-access-controller-servlet/pom.xml
@@ -1,318 +1,317 @@
-<!--
-  #%L
-  %%
-  Copyright (C) 2011 - 2013 BMW Car IT GmbH
-  %%
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  #L%
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<modelVersion>4.0.0</modelVersion>
-
-	<groupId>io.joynr.java.backend-services</groupId>
-	<artifactId>domain-access-controller-servlet</artifactId>
-	<packaging>war</packaging>
-	<name>${project.groupId}:${project.artifactId}</name>
-
-	<parent>
-		<groupId>io.joynr.java</groupId>
-		<artifactId>backend-services</artifactId>
-		<version>0.14.1</version>
-		<relativePath>../pom.xml</relativePath>
-	</parent>
-
-	<properties>
-		<jslint-plugin.version>2.0.3</jslint-plugin.version>
-	</properties>
-
-	<dependencies>
-		<dependency>
-			<groupId>io.joynr.java.messaging</groupId>
-			<artifactId>messaging-servlet</artifactId>
-			<version>${project.version}</version>
-			<classifier>classes</classifier>
-			<type>jar</type>
-		</dependency>
-		<dependency>
-			<groupId>io.joynr.java.messaging</groupId>
-			<artifactId>messaging-servlet</artifactId>
-			<version>${project.version}</version>
-			<type>war</type>
-		</dependency>
-		<dependency>
-			<groupId>io.joynr.java.backend-services</groupId>
-			<artifactId>domain-access-controller</artifactId>
-			<version>${project.version}</version>
-		</dependency>
-		<dependency>
-			<groupId>org.slf4j</groupId>
-			<artifactId>slf4j-log4j12</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>com.sun.jersey.jersey-test-framework</groupId>
-			<artifactId>jersey-test-framework-grizzly2</artifactId>
-			<scope>test</scope>
-			<exclusions>
-				<exclusion>
-					<groupId>javax.servlet</groupId>
-					<artifactId>servlet-api</artifactId>
-				</exclusion>
-			</exclusions>
-		</dependency>
-		<!--
-			The sources of javassist must be added to the WAR due to its LGPL-2.1 license.
-			It is pulled in as transitive dependency:
-			io.joynr.java.messaging:messaging-servlet:jar:classes:0.14.1:compile
-			+- org.reflections:reflections:jar:0.9.8:compile
-			|  +- javassist:javassist:jar:3.12.1.GA:compile
-			Please double check the correct version if these dependencies change.
-		-->
-		<dependency>
-			<groupId>javassist</groupId>
-			<artifactId>javassist</artifactId>
-			<version>${javaassist.version}</version>
-			<classifier>sources</classifier>
-		</dependency>
-		<dependency>
-			<groupId>com.sun.jersey</groupId>
-			<artifactId>jersey-servlet</artifactId>
-			<version>${jersey.version}</version>
-		</dependency>
-		<dependency>
-			<groupId>com.google.code.gson</groupId>
-			<artifactId>gson</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.mockito</groupId>
-			<artifactId>mockito-core</artifactId>
-			<scope>test</scope>
-		</dependency>
-	</dependencies>
-
-	<build>
-		<finalName>${project.artifactId}</finalName>
-		<plugins>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-war-plugin</artifactId>
-				<configuration>
-					<!-- <webXml>${basedir}/src/main/resources/WEB-INF/web.xml</webXml> -->
-					<!-- warName>acl</warName -->
-					<warSourceDirectory>src/main/resources</warSourceDirectory>
-					<configuration>
-						<!-- no default value -->
-						<dependentWarIncludes>WEB-INF/web.xml, WEB-INF/glassfish-web.xml</dependentWarIncludes>
-						<dependentWarExcludes>WEB-INF/lib/*</dependentWarExcludes>
-					</configuration>
-					<overlays>
-						<overlay>
-							<groupId>io.joynr.java.messaging</groupId>
-							<artifactId>messaging-servlet</artifactId>
-							<type>war</type>
-						</overlay>
-					</overlays>
-					<webResources>
-						<resource>
-							<directory>${basedir}</directory>
-							<includes>
-								<include>*LICENSE*</include>
-								<include>NOTICE*</include>
-							</includes>
-						</resource>
-						<resource>
-							<directory>${project.build.directory}</directory>
-							<includes>
-								<include>LICENSE</include>
-							</includes>
-						</resource>
-					</webResources>
-				</configuration>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-dependency-plugin</artifactId>
-				<executions>
-					<execution>
-						<id>copy</id>
-						<phase>initialize</phase>
-						<goals>
-							<goal>copy</goal>
-						</goals>
-						<configuration>
-							<artifactItems>
-								<artifactItem>
-									<groupId>io.joynr.java.messaging.bounceproxy</groupId>
-									<artifactId>single-bounceproxy</artifactId>
-									<version>${project.version}</version>
-									<type>war</type>
-									<outputDirectory>${project.build.directory}</outputDirectory>
-									<destFileName>bounceproxy.war</destFileName>
-								</artifactItem>
-								<artifactItem>
-									<groupId>io.joynr.java.backend-services</groupId>
-									<artifactId>discovery-directory-servlet</artifactId>
-									<version>${project.version}</version>
-									<type>war</type>
-									<outputDirectory>${project.build.directory}</outputDirectory>
-									<destFileName>discovery.war</destFileName>
-								</artifactItem>
-							</artifactItems>
-							<overWriteReleases>false</overWriteReleases>
-							<overWriteSnapshots>true</overWriteSnapshots>
-						</configuration>
-					</execution>
-				</executions>
-			</plugin>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>properties-maven-plugin</artifactId>
-				<executions>
-					<execution>
-						<goals>
-							<goal>set-system-properties</goal>
-						</goals>
-						<configuration>
-							<properties>
-								<property>
-									<name>log4j.configuration</name>
-									<value>file:${basedir}/src/main/resources/WEB-INF/classes/log4j.properties</value>
-								</property>
-							</properties>
-						</configuration>
-					</execution>
-				</executions>
-			</plugin>
-			<plugin>
-				<groupId>org.eclipse.jetty</groupId>
-				<artifactId>jetty-maven-plugin</artifactId>
-				<configuration>
-					<webAppSourceDirectory>src/main/resources</webAppSourceDirectory>
-					<webApp>
-						<contextPath>/accesscontrol</contextPath>
-					</webApp>
-					<!--
-					Don't define system properties here, because it will override system
-					properties defined in plugin management in super POM.
-					-->
-					<contextHandlers combine.self="override">
-						<contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext">
-							<war>${project.build.directory}/bounceproxy.war</war>
-							<contextPath>/bounceproxy</contextPath>
-						</contextHandler>
-						<contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext">
-							<war>${project.build.directory}/discovery.war</war>
-							<contextPath>/discovery</contextPath>
-						</contextHandler>
-					</contextHandlers>
-				</configuration>
-			</plugin>
-
-			<!-- jslint-ing src/main/webapp/js -->
-			<plugin>
-				<groupId>com.googlecode.jslint4java</groupId>
-				<artifactId>jslint4java-maven-plugin</artifactId>
-				<version>${jslint-plugin.version}</version>
-				<executions>
-					<execution>
-						<id>lint-project</id>
-						<phase>process-sources</phase>
-						<goals>
-							<goal>lint</goal>
-						</goals>
-						<configuration>
-							<options>
-								<predef>define,log4javascript,angular,WebSocket,$,console</predef>
-							</options>
-							<sourceFolders>
-								<sourceFolder>src/main/webapp/js</sourceFolder>
-							</sourceFolders>
-						</configuration>
-					</execution>
-					<execution>
-						<id>lint-testsrc</id>
-						<phase>process-sources</phase>
-						<goals>
-							<goal>lint</goal>
-						</goals>
-						<configuration>
-							<options>
-								<predef>beforeEach, afterEach, describe, expect, it, runs,
-									waitsFor, jasmine, spyOn, log4javascript, angular
-								</predef>
-							</options>
-							<sourceFolders>
-								<sourceFolder>${project.build.testSourceDirectory}/js</sourceFolder>
-							</sourceFolders>
-						</configuration>
-					</execution>
-				</executions>
-				<configuration>
-					<excludes>
-						<exclude>**/webapp/libs/*.js</exclude>
-					</excludes>
-					<failOnError>true</failOnError>
-					<options>
-						<!--  If multiple var statements per function should be allowed -->
-						<vars>true</vars>
-						<!--  If sloppy whitespace is tolerated -->
-						<white>true</white>
-						<!-- predefine define and require functions used with AMD module loading -->
-						<predef>log4javascript,angular</predef>
-						<!-- allow not using "pragma strict" -->
-						<sloppy>true</sloppy>
-						<!-- Allow accessing browser globals like Window, setTimeout, etc. without defining them ecplicitely -->
-						<browser>true</browser>
-						<!-- Allow using ++ and -->
-						<plusplus>true</plusplus>
-						<!-- Allow TODO comments -->
-						<todo>true</todo>
-					</options>
-				</configuration>
-			</plugin>
-		</plugins>
-		<pluginManagement>
-			<plugins>
-				<!--This plugin's configuration is used to store Eclipse m2e settings
-					only. It has no influence on the Maven build itself. -->
-				<plugin>
-					<groupId>org.eclipse.m2e</groupId>
-					<artifactId>lifecycle-mapping</artifactId>
-					<version>1.0.0</version>
-					<configuration>
-						<lifecycleMappingMetadata>
-							<pluginExecutions>
-								<pluginExecution>
-									<pluginExecutionFilter>
-										<groupId>org.appfuse</groupId>
-										<artifactId>
-											maven-warpath-plugin
-										</artifactId>
-										<versionRange>
-											[2.0.2,)
-										</versionRange>
-										<goals>
-											<goal>add-classes</goal>
-										</goals>
-									</pluginExecutionFilter>
-									<action>
-										<ignore />
-									</action>
-								</pluginExecution>
-							</pluginExecutions>
-						</lifecycleMappingMetadata>
-					</configuration>
-				</plugin>
-			</plugins>
-		</pluginManagement>
-	</build>
-</project>
+<!--
+  #%L
+  %%
+  Copyright (C) 2011 - 2013 BMW Car IT GmbH
+  %%
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  #L%
+  -->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+
+	<groupId>io.joynr.java.backend-services</groupId>
+	<artifactId>domain-access-controller-servlet</artifactId>
+	<packaging>war</packaging>
+	<name>${project.groupId}:${project.artifactId}</name>
+
+	<parent>
+		<groupId>io.joynr.java</groupId>
+		<artifactId>backend-services</artifactId>
+		<version>0.14.1</version>
+		<relativePath>../pom.xml</relativePath>
+	</parent>
+
+	<properties>
+		<jslint-plugin.version>2.0.3</jslint-plugin.version>
+	</properties>
+
+	<dependencies>
+		<dependency>
+			<groupId>io.joynr.java.messaging</groupId>
+			<artifactId>messaging-servlet</artifactId>
+			<version>${project.version}</version>
+			<classifier>classes</classifier>
+			<type>jar</type>
+		</dependency>
+		<dependency>
+			<groupId>io.joynr.java.messaging</groupId>
+			<artifactId>messaging-servlet</artifactId>
+			<version>${project.version}</version>
+			<type>war</type>
+		</dependency>
+		<dependency>
+			<groupId>io.joynr.java.backend-services</groupId>
+			<artifactId>domain-access-controller</artifactId>
+			<version>${project.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>slf4j-log4j12</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>com.sun.jersey.jersey-test-framework</groupId>
+			<artifactId>jersey-test-framework-grizzly2</artifactId>
+			<scope>test</scope>
+			<exclusions>
+				<exclusion>
+					<groupId>javax.servlet</groupId>
+					<artifactId>servlet-api</artifactId>
+				</exclusion>
+			</exclusions>
+		</dependency>
+		<!--
+			The sources of javassist must be added to the WAR due to its LGPL-2.1 license.
+			It is pulled in as transitive dependency:
+			io.joynr.java.messaging:messaging-servlet:jar:classes:0.14.1:compile
+			+- org.reflections:reflections:jar:0.9.8:compile
+			|  +- javassist:javassist:jar:3.12.1.GA:compile
+			Please double check the correct version if these dependencies change.
+		-->
+		<dependency>
+			<groupId>javassist</groupId>
+			<artifactId>javassist</artifactId>
+			<version>${javaassist.version}</version>
+			<classifier>sources</classifier>
+		</dependency>
+		<dependency>
+			<groupId>com.sun.jersey</groupId>
+			<artifactId>jersey-servlet</artifactId>
+			<version>${jersey.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>com.google.code.gson</groupId>
+			<artifactId>gson</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.mockito</groupId>
+			<artifactId>mockito-core</artifactId>
+			<scope>test</scope>
+		</dependency>
+	</dependencies>
+
+	<build>
+		<finalName>${project.artifactId}</finalName>
+		<pluginManagement>
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-war-plugin</artifactId>
+				<configuration>
+					<failOnMissingWebXml>false</failOnMissingWebXml>
+					<!-- <webXml>${basedir}/src/main/resources/WEB-INF/web.xml</webXml> -->
+					<!-- warName>acl</warName -->
+					<warSourceDirectory>src/main/resources</warSourceDirectory>
+					<configuration>
+						<!-- no default value -->
+						<dependentWarIncludes>WEB-INF/web.xml, WEB-INF/glassfish-web.xml</dependentWarIncludes>
+						<dependentWarExcludes>WEB-INF/lib/*</dependentWarExcludes>
+					</configuration>
+					<overlays>
+						<overlay>
+							<groupId>io.joynr.java.messaging</groupId>
+							<artifactId>messaging-servlet</artifactId>
+							<type>war</type>
+						</overlay>
+					</overlays>
+					<webResources>
+						<resource>
+							<directory>${basedir}</directory>
+							<includes>
+								<include>*LICENSE*</include>
+								<include>NOTICE*</include>
+							</includes>
+						</resource>
+						<resource>
+							<directory>${project.build.directory}</directory>
+							<includes>
+								<include>LICENSE</include>
+							</includes>
+						</resource>
+					</webResources>
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-dependency-plugin</artifactId>
+				<executions>
+					<execution>
+						<id>copy</id>
+						<phase>initialize</phase>
+						<goals>
+							<goal>copy</goal>
+						</goals>
+						<configuration>
+							<artifactItems>
+								<artifactItem>
+									<groupId>io.joynr.java.messaging.bounceproxy</groupId>
+									<artifactId>single-bounceproxy</artifactId>
+									<version>${project.version}</version>
+									<type>war</type>
+									<outputDirectory>${project.build.directory}</outputDirectory>
+									<destFileName>bounceproxy.war</destFileName>
+								</artifactItem>
+								<artifactItem>
+									<groupId>io.joynr.java.backend-services</groupId>
+									<artifactId>discovery-directory-servlet</artifactId>
+									<version>${project.version}</version>
+									<type>war</type>
+									<outputDirectory>${project.build.directory}</outputDirectory>
+									<destFileName>discovery.war</destFileName>
+								</artifactItem>
+							</artifactItems>
+							<overWriteReleases>false</overWriteReleases>
+							<overWriteSnapshots>true</overWriteSnapshots>
+						</configuration>
+					</execution>
+				</executions>
+			</plugin>
+			<plugin>
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>properties-maven-plugin</artifactId>
+				<executions>
+					<execution>
+						<goals>
+							<goal>set-system-properties</goal>
+						</goals>
+						<configuration>
+							<properties>
+								<property>
+									<name>log4j.configuration</name>
+									<value>file:${basedir}/src/main/resources/WEB-INF/classes/log4j.properties</value>
+								</property>
+							</properties>
+						</configuration>
+					</execution>
+				</executions>
+			</plugin>
+			<plugin>
+				<groupId>org.eclipse.jetty</groupId>
+				<artifactId>jetty-maven-plugin</artifactId>
+				<configuration>
+					<webAppSourceDirectory>src/main/resources</webAppSourceDirectory>
+					<webApp>
+						<contextPath>/accesscontrol</contextPath>
+					</webApp>
+					<!--
+					Don't define system properties here, because it will override system
+					properties defined in plugin management in super POM.
+					-->
+					<contextHandlers combine.self="override">
+						<contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext">
+							<war>${project.build.directory}/bounceproxy.war</war>
+							<contextPath>/bounceproxy</contextPath>
+						</contextHandler>
+						<contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext">
+							<war>${project.build.directory}/discovery.war</war>
+							<contextPath>/discovery</contextPath>
+						</contextHandler>
+					</contextHandlers>
+				</configuration>
+			</plugin>
+
+			<!-- jslint-ing src/main/webapp/js -->
+			<plugin>
+				<groupId>com.googlecode.jslint4java</groupId>
+				<artifactId>jslint4java-maven-plugin</artifactId>
+				<version>${jslint-plugin.version}</version>
+				<executions>
+					<execution>
+						<id>lint-project</id>
+						<phase>process-sources</phase>
+						<goals>
+							<goal>lint</goal>
+						</goals>
+						<configuration>
+							<options>
+								<predef>define,log4javascript,angular,WebSocket,$,console</predef>
+							</options>
+							<sourceFolders>
+								<sourceFolder>src/main/webapp/js</sourceFolder>
+							</sourceFolders>
+						</configuration>
+					</execution>
+					<execution>
+						<id>lint-testsrc</id>
+						<phase>process-sources</phase>
+						<goals>
+							<goal>lint</goal>
+						</goals>
+						<configuration>
+							<options>
+								<predef>beforeEach, afterEach, describe, expect, it, runs,
+									waitsFor, jasmine, spyOn, log4javascript, angular
+								</predef>
+							</options>
+							<sourceFolders>
+								<sourceFolder>${project.build.testSourceDirectory}/js</sourceFolder>
+							</sourceFolders>
+						</configuration>
+					</execution>
+				</executions>
+				<configuration>
+					<excludes>
+						<exclude>**/webapp/libs/*.js</exclude>
+					</excludes>
+					<failOnError>true</failOnError>
+					<options>
+						<!--  If multiple var statements per function should be allowed -->
+						<vars>true</vars>
+						<!--  If sloppy whitespace is tolerated -->
+						<white>true</white>
+						<!-- predefine define and require functions used with AMD module loading -->
+						<predef>log4javascript,angular</predef>
+						<!-- allow not using "pragma strict" -->
+						<sloppy>true</sloppy>
+						<!-- Allow accessing browser globals like Window, setTimeout, etc. without defining them ecplicitely -->
+						<browser>true</browser>
+						<!-- Allow using ++ and -->
+						<plusplus>true</plusplus>
+						<!-- Allow TODO comments -->
+						<todo>true</todo>
+					</options>
+				</configuration>
+			</plugin>
+				<!--This plugin's configuration is used to store Eclipse m2e settings
+					only. It has no influence on the Maven build itself. -->
+				<plugin>
+					<groupId>org.eclipse.m2e</groupId>
+					<artifactId>lifecycle-mapping</artifactId>
+					<version>1.0.0</version>
+					<configuration>
+						<lifecycleMappingMetadata>
+							<pluginExecutions>
+								<pluginExecution>
+									<pluginExecutionFilter>
+										<groupId>org.appfuse</groupId>
+										<artifactId>
+											maven-warpath-plugin
+										</artifactId>
+										<versionRange>
+											[2.0.2,)
+										</versionRange>
+										<goals>
+											<goal>add-classes</goal>
+										</goals>
+									</pluginExecutionFilter>
+									<action>
+										<ignore />
+									</action>
+								</pluginExecution>
+							</pluginExecutions>
+						</lifecycleMappingMetadata>
+					</configuration>
+				</plugin>
+			</plugins>
+		</pluginManagement>
+	</build>
+</project>
diff --git a/java/backend-services/joynr.properties b/java/backend-services/joynr.properties
new file mode 100644
index 0000000..5c022e9
--- /dev/null
+++ b/java/backend-services/joynr.properties
@@ -0,0 +1,3 @@
+#Wed Jan 27 10:36:48 CET 2016
+joynr.messaging.channelid=1ed2ba49-288d-4e1f-9484-b43e31815515
+joynr.messaging.receiverid=6bd2eb37-4e37-4370-97bf-438cb56ab16b
diff --git a/java/common/access-control-common/.gitignore b/java/common/access-control-common/.gitignore
index 084b244..57511b4 100644
--- a/java/common/access-control-common/.gitignore
+++ b/java/common/access-control-common/.gitignore
@@ -1,5 +1,6 @@
-target
-.classpath
-.project
-.settings
-logs
\ No newline at end of file
+target
+.classpath
+.project
+.settings
+logs
+/dependency-reduced-pom.xml
diff --git a/java/core/libjoynr-asyncipc-runtime/.gitignore b/java/core/libjoynr-asyncipc-runtime/.gitignore
new file mode 100644
index 0000000..24d6437
--- /dev/null
+++ b/java/core/libjoynr-asyncipc-runtime/.gitignore
@@ -0,0 +1 @@
+/target/
diff --git a/java/core/libjoynr-asyncipc-runtime/pom.xml b/java/core/libjoynr-asyncipc-runtime/pom.xml
new file mode 100644
index 0000000..e4badac
--- /dev/null
+++ b/java/core/libjoynr-asyncipc-runtime/pom.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>core</artifactId>
+        <groupId>io.joynr.java</groupId>
+        <version>0.14.1</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>io.joynr.java.core</groupId>
+    <artifactId>libjoynr-asyncipc-runtime</artifactId>
+    <dependencies>
+        <dependency>
+            <groupId>io.joynr.java.messaging.asyncipc</groupId>
+            <artifactId>joynr-asyncipc</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>io.joynr.java.core</groupId>
+            <artifactId>libjoynr</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+    </dependencies>
+
+
+</project>
\ No newline at end of file
diff --git a/java/core/libjoynr-asyncipc-runtime/src/main/java/io/joynr/runtime/LibJoynrAsyncIPCRuntime.java b/java/core/libjoynr-asyncipc-runtime/src/main/java/io/joynr/runtime/LibJoynrAsyncIPCRuntime.java
new file mode 100644
index 0000000..c166048
--- /dev/null
+++ b/java/core/libjoynr-asyncipc-runtime/src/main/java/io/joynr/runtime/LibJoynrAsyncIPCRuntime.java
@@ -0,0 +1,84 @@
+package io.joynr.runtime;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.inject.Inject;
+import com.google.inject.name.Named;
+
+import io.joynr.discovery.LocalDiscoveryAggregator;
+import io.joynr.dispatching.Dispatcher;
+import io.joynr.dispatching.RequestCallerDirectory;
+import io.joynr.dispatching.rpc.ReplyCallerDirectory;
+import io.joynr.exceptions.JoynrIllegalStateException;
+import io.joynr.messaging.ConfigurableMessagingSettings;
+import io.joynr.messaging.IMessaging;
+import io.joynr.messaging.asyncipc.AsyncIPCMessagingSkeleton;
+import io.joynr.messaging.asyncipc.AsyncIPCMessagingStubAdapter;
+import io.joynr.messaging.asyncipc.AsyncIpcModule;
+import io.joynr.messaging.routing.ChildMessageRouter;
+import io.joynr.messaging.routing.MessagingStubFactory;
+import io.joynr.proxy.ProxyBuilderFactory;
+import joynr.system.RoutingTypes.Address;
+import joynr.system.RoutingTypes.AsyncIPCAddress;
+
+public class LibJoynrAsyncIPCRuntime extends LibjoynrRuntime<AsyncIPCAddress> {
+
+    public static final Logger logger = LoggerFactory.getLogger(LibJoynrAsyncIPCRuntime.class);
+
+    @Inject
+    public LibJoynrAsyncIPCRuntime(ObjectMapper objectMapper,
+                                   ProxyBuilderFactory proxyBuilderFactory,
+                                   RequestCallerDirectory requestCallerDirectory,
+                                   ReplyCallerDirectory replyCallerDirectory,
+                                   Dispatcher dispatcher,
+                                   LocalDiscoveryAggregator localDiscoveryAggregator,
+                                   @Named(SystemServicesSettings.PROPERTY_SYSTEM_SERVICES_DOMAIN) String systemServicesDomain,
+                                   @Named(SystemServicesSettings.PROPERTY_DISPATCHER_ADDRESS) Address dispatcherAddress,
+                                   @Named(ConfigurableMessagingSettings.PROPERTY_CAPABILITIES_DIRECTORY_ADDRESS) Address capabilitiesDirectoryAddress,
+                                   @Named(ConfigurableMessagingSettings.PROPERTY_CHANNEL_URL_DIRECTORY_ADDRESS) Address channelUrlDirectoryAddress,
+                                   @Named(ConfigurableMessagingSettings.PROPERTY_DOMAIN_ACCESS_CONTROLLER_ADDRESS) Address domainAccessControllerAddress,
+                                   @Named(SystemServicesSettings.PROPERTY_CC_MESSAGING_ADDRESS) Address discoveryProviderAddress,
+                                   @Named(SystemServicesSettings.PROPERTY_CC_MESSAGING_ADDRESS) Address ccMessagingAddress,
+                                   @Named(SystemServicesSettings.PROPERTY_LIBJOYNR_MESSAGING_ADDRESS) AsyncIPCAddress libjoynrMessagingAddress,
+                                   ChildMessageRouter messageRouter,
+                                   @Named(SystemServicesSettings.PROPERTY_CC_ROUTING_PROVIDER_PARTICIPANT_ID) String parentRoutingProviderParticipantId,
+                                   @Named(AsyncIpcModule.PROPERTY_ASYNCIPC_MESSAGING_SKELETON) AsyncIPCMessagingSkeleton messagingSkeleton,
+                                   MessagingStubFactory messagingStubFactory) {
+        super(objectMapper,
+              proxyBuilderFactory,
+              requestCallerDirectory,
+              replyCallerDirectory,
+              dispatcher,
+              localDiscoveryAggregator,
+              systemServicesDomain,
+              dispatcherAddress,
+              capabilitiesDirectoryAddress,
+              channelUrlDirectoryAddress,
+              domainAccessControllerAddress,
+              discoveryProviderAddress,
+              ccMessagingAddress,
+              libjoynrMessagingAddress,
+              messageRouter,
+              parentRoutingProviderParticipantId,
+              messagingSkeleton,
+              messagingStubFactory);
+    }
+
+    @Override
+    protected void initMessagingStub(AsyncIPCAddress libjoynrMessagingAddress, IMessaging messagingStub) {
+        if (messagingStub instanceof AsyncIPCMessagingStubAdapter) {
+            initAsyncIpcStub(libjoynrMessagingAddress, (AsyncIPCMessagingStubAdapter) messagingStub);
+        } else {
+            throw new JoynrIllegalStateException("The messaging stub in the LibJoynrAsyncIPCRuntime"
+                    + " has to be of type " + AsyncIPCMessagingStubAdapter.class.getSimpleName());
+        }
+
+    }
+
+    private void initAsyncIpcStub(AsyncIPCAddress libjoynrMessagingAddress, AsyncIPCMessagingStubAdapter messagingStub) {
+
+    }
+
+}
diff --git a/java/core/libjoynr-asyncipc-runtime/src/main/java/io/joynr/runtime/LibJoynrAsyncIPCRuntimeModule.java b/java/core/libjoynr-asyncipc-runtime/src/main/java/io/joynr/runtime/LibJoynrAsyncIPCRuntimeModule.java
new file mode 100644
index 0000000..d8ffb35
--- /dev/null
+++ b/java/core/libjoynr-asyncipc-runtime/src/main/java/io/joynr/runtime/LibJoynrAsyncIPCRuntimeModule.java
@@ -0,0 +1,66 @@
+package io.joynr.runtime;
+
+import java.util.Map;
+import java.util.UUID;
+
+import org.apache.commons.lang.StringUtils;
+
+import com.google.common.collect.Maps;
+import com.google.inject.Provides;
+import com.google.inject.Singleton;
+import com.google.inject.name.Named;
+import com.google.inject.name.Names;
+
+import io.joynr.messaging.AbstractMessagingStubFactory;
+import io.joynr.messaging.asyncipc.AsyncIPCMessagingSkeleton;
+import io.joynr.messaging.asyncipc.AsyncIPCMessagingStubFactory;
+import io.joynr.messaging.asyncipc.AsyncIpcModule;
+import io.joynr.messaging.asyncipc.LibAsyncIPCMessagingSkeleton;
+import io.joynr.messaging.routing.ChildMessageRouter;
+import io.joynr.messaging.routing.MessageRouter;
+import joynr.system.RoutingTypes.Address;
+import joynr.system.RoutingTypes.AsyncIPCAddress;
+
+public class LibJoynrAsyncIPCRuntimeModule extends AbstractRuntimeModule {
+
+    @Override
+    protected void configure() {
+        super.configure();
+        install(new AsyncIpcModule());
+        bind(JoynrRuntime.class).to(LibJoynrAsyncIPCRuntime.class).in(Singleton.class);
+        bind(AsyncIPCMessagingSkeleton.class).annotatedWith(Names.named(AsyncIpcModule.PROPERTY_ASYNCIPC_MESSAGING_SKELETON))
+                                             .to(LibAsyncIPCMessagingSkeleton.class)
+                                             .in(Singleton.class);
+        bind(AsyncIPCMessagingStubFactory.class).in(Singleton.class);
+        bind(ChildMessageRouter.class).in(Singleton.class);
+        bind(MessageRouter.class).to(ChildMessageRouter.class);
+    }
+
+    @Provides
+    @Singleton
+    Map<Class<? extends Address>, AbstractMessagingStubFactory> provideMessagingStubFactories(AsyncIPCMessagingStubFactory asyncIpcMessagingStubFactory) {
+        Map<Class<? extends Address>, AbstractMessagingStubFactory> factories = Maps.newHashMap();
+        factories.put(AsyncIPCAddress.class, asyncIpcMessagingStubFactory);
+        return factories;
+    }
+
+    @Provides
+    @Singleton
+    @Named(SystemServicesSettings.PROPERTY_CC_MESSAGING_ADDRESS)
+    public Address provideCCMessagingAddress(@Named(AsyncIpcModule.PROPERTY_ASYNCIPC_MESSAGING_CC_QUEUEID) String queueId) {
+        return new AsyncIPCAddress(queueId);
+    }
+
+    @Provides
+    @Singleton
+    @Named(SystemServicesSettings.PROPERTY_LIBJOYNR_MESSAGING_ADDRESS)
+    AsyncIPCAddress getLibjoynrMessagingAddress(@Named(AsyncIpcModule.PROPERTY_ASYNCIPC_MESSAGING_QUEUEID) String queueId) {
+        if (StringUtils.isEmpty(queueId)) {
+            String messagingUUID = UUID.randomUUID().toString().replace("-", "");
+            return new AsyncIPCAddress("libjoynr.messaging.participantid_" + messagingUUID);
+        } else {
+            return new AsyncIPCAddress(queueId);
+        }
+    }
+
+}
diff --git a/java/core/libjoynr/src/main/java/io/joynr/messaging/routing/ChildMessageRouter.java b/java/core/libjoynr/src/main/java/io/joynr/messaging/routing/ChildMessageRouter.java
index 689120f..a8d1636 100644
--- a/java/core/libjoynr/src/main/java/io/joynr/messaging/routing/ChildMessageRouter.java
+++ b/java/core/libjoynr/src/main/java/io/joynr/messaging/routing/ChildMessageRouter.java
@@ -1,141 +1,144 @@
-package io.joynr.messaging.routing;
-
-/*
- * #%L
- * %%
- * Copyright (C) 2011 - 2015 BMW Car IT GmbH
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * #L%
- */
-
-import com.google.inject.Inject;
-import io.joynr.exceptions.JoynrRuntimeException;
-import io.joynr.provider.DeferredVoid;
-import io.joynr.provider.Promise;
-import io.joynr.proxy.Callback;
-import joynr.exceptions.ProviderRuntimeException;
-import joynr.system.RoutingProxy;
-import joynr.system.RoutingTypes.Address;
-import joynr.system.RoutingTypes.BrowserAddress;
-import joynr.system.RoutingTypes.ChannelAddress;
-import joynr.system.RoutingTypes.CommonApiDbusAddress;
-import joynr.system.RoutingTypes.WebSocketAddress;
-import joynr.system.RoutingTypes.WebSocketClientAddress;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.annotation.CheckForNull;
-import java.util.LinkedList;
-import java.util.List;
-
-/**
- * MessageRouter implementation which adds hops to its parent and tries to resolve unknown addresses at its parent
- */
-public class ChildMessageRouter extends MessageRouterImpl {
-
-    private Logger logger = LoggerFactory.getLogger(ChildMessageRouter.class);
-
-    private Address parentRouterMessagingAddress;
-    private RoutingProxy parentRouter;
-    private Address incomingAddress;
-    private List<Runnable> deferredParentHops = new LinkedList<>();
-
-    @Inject
-    public ChildMessageRouter(RoutingTable routingTable, MessagingStubFactory messagingStubFactory) {
-        super(routingTable, messagingStubFactory);
-    }
-
-    @Override
-    protected Address getAddress(String toParticipantId) {
-        Address address = super.getAddress(toParticipantId);
-        if (address == null && parentRouter != null) {
-            Boolean parentHasNextHop = parentRouter.resolveNextHop(toParticipantId);
-            if (parentHasNextHop) {
-                super.addNextHopInternal(toParticipantId, parentRouterMessagingAddress);
-                address = parentRouterMessagingAddress;
-            }
-        }
-        return address;
-    }
-
-    @Override
-    protected Promise<DeferredVoid> addNextHopInternal(final String participantId, final Address address) {
-        super.addNextHopInternal(participantId, address);
-        final DeferredVoid deferred = new DeferredVoid();
-        if (parentRouter != null) {
-            addNextHopToParent(participantId, deferred);
-        } else {
-            deferredParentHops.add(new Runnable() {
-                @Override public void run() {
-                    addNextHopToParent(participantId, deferred);
-                }
-            });
-        }
-        return new Promise<DeferredVoid>(deferred);
-    }
-
-    private void addNextHopToParent(String participantId, final DeferredVoid deferred) {
-        logger.debug("Adding next hop with participant id " + participantId + " to parent router");
-        Callback<Void> callback = new Callback<Void>() {
-            @Override
-            public void onSuccess(@CheckForNull Void result) {
-                deferred.resolve();
-            }
-
-            @Override
-            public void onFailure(JoynrRuntimeException error) {
-                deferred.reject(new ProviderRuntimeException("Failed to add next hop to parent: " + error));
-            }
-        };
-        if (incomingAddress instanceof ChannelAddress) {
-            parentRouter.addNextHop(callback, participantId, (ChannelAddress) incomingAddress);
-        } else if (incomingAddress instanceof CommonApiDbusAddress) {
-            parentRouter.addNextHop(callback, participantId, (CommonApiDbusAddress) incomingAddress);
-        } else if (incomingAddress instanceof BrowserAddress) {
-            parentRouter.addNextHop(callback, participantId, (BrowserAddress) incomingAddress);
-        } else if (incomingAddress instanceof WebSocketAddress) {
-            parentRouter.addNextHop(callback, participantId, (WebSocketAddress) incomingAddress);
-        } else if (incomingAddress instanceof WebSocketClientAddress) {
-            parentRouter.addNextHop(callback, participantId, (WebSocketClientAddress) incomingAddress);
-        } else {
-            deferred.reject(new ProviderRuntimeException("Failed to add next hop to parent: unknown address type"
-                    + incomingAddress.getClass().getSimpleName()));
-        }
-    }
-
-    public void setParentRouter(RoutingProxy parentRouter,
-                                Address parentRouterMessagingAddress,
-                                String parentRoutingProviderParticipantId,
-                                String routingProxyParticipantId) {
-        this.parentRouter = parentRouter;
-        this.parentRouterMessagingAddress = parentRouterMessagingAddress;
-
-        super.addNextHopInternal(parentRoutingProviderParticipantId, parentRouterMessagingAddress);
-        addNextHopToParent(routingProxyParticipantId, new DeferredVoid());
-        for (Runnable deferredParentHop : deferredParentHops) {
-            deferredParentHop.run();
-        }
-
-    }
-
-    /**
-     * Sets the address which will be registered at the parent router for the next hop
-     * to contact this child message router
-     * @param incomingAddress address of this libjoynr instance. Used by the cluster controller's
-     *                        message router to forward messages
-     */
-    public void setIncomingAddress(Address incomingAddress) {
-        this.incomingAddress = incomingAddress;
-    }
-}
+package io.joynr.messaging.routing;
+
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2015 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+
+import com.google.inject.Inject;
+import io.joynr.exceptions.JoynrRuntimeException;
+import io.joynr.provider.DeferredVoid;
+import io.joynr.provider.Promise;
+import io.joynr.proxy.Callback;
+import joynr.exceptions.ProviderRuntimeException;
+import joynr.system.RoutingProxy;
+import joynr.system.RoutingTypes.Address;
+import joynr.system.RoutingTypes.AsyncIPCAddress;
+import joynr.system.RoutingTypes.BrowserAddress;
+import joynr.system.RoutingTypes.ChannelAddress;
+import joynr.system.RoutingTypes.CommonApiDbusAddress;
+import joynr.system.RoutingTypes.WebSocketAddress;
+import joynr.system.RoutingTypes.WebSocketClientAddress;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import javax.annotation.CheckForNull;
+import java.util.LinkedList;
+import java.util.List;
+
+/**
+ * MessageRouter implementation which adds hops to its parent and tries to resolve unknown addresses at its parent
+ */
+public class ChildMessageRouter extends MessageRouterImpl {
+
+    private Logger logger = LoggerFactory.getLogger(ChildMessageRouter.class);
+
+    private Address parentRouterMessagingAddress;
+    private RoutingProxy parentRouter;
+    private Address incomingAddress;
+    private List<Runnable> deferredParentHops = new LinkedList<>();
+
+    @Inject
+    public ChildMessageRouter(RoutingTable routingTable, MessagingStubFactory messagingStubFactory) {
+        super(routingTable, messagingStubFactory);
+    }
+
+    @Override
+    protected Address getAddress(String toParticipantId) {
+        Address address = super.getAddress(toParticipantId);
+        if (address == null && parentRouter != null) {
+            Boolean parentHasNextHop = parentRouter.resolveNextHop(toParticipantId);
+            if (parentHasNextHop) {
+                super.addNextHopInternal(toParticipantId, parentRouterMessagingAddress);
+                address = parentRouterMessagingAddress;
+            }
+        }
+        return address;
+    }
+
+    @Override
+    protected Promise<DeferredVoid> addNextHopInternal(final String participantId, final Address address) {
+        super.addNextHopInternal(participantId, address);
+        final DeferredVoid deferred = new DeferredVoid();
+        if (parentRouter != null) {
+            addNextHopToParent(participantId, deferred);
+        } else {
+            deferredParentHops.add(new Runnable() {
+                @Override public void run() {
+                    addNextHopToParent(participantId, deferred);
+                }
+            });
+        }
+        return new Promise<DeferredVoid>(deferred);
+    }
+
+    private void addNextHopToParent(String participantId, final DeferredVoid deferred) {
+        logger.debug("Adding next hop with participant id " + participantId + " to parent router");
+        Callback<Void> callback = new Callback<Void>() {
+            @Override
+            public void onSuccess(@CheckForNull Void result) {
+                deferred.resolve();
+            }
+
+            @Override
+            public void onFailure(JoynrRuntimeException error) {
+                deferred.reject(new ProviderRuntimeException("Failed to add next hop to parent: " + error));
+            }
+        };
+        if (incomingAddress instanceof ChannelAddress) {
+            parentRouter.addNextHop(callback, participantId, (ChannelAddress) incomingAddress);
+        } else if (incomingAddress instanceof CommonApiDbusAddress) {
+            parentRouter.addNextHop(callback, participantId, (CommonApiDbusAddress) incomingAddress);
+        } else if (incomingAddress instanceof BrowserAddress) {
+            parentRouter.addNextHop(callback, participantId, (BrowserAddress) incomingAddress);
+        } else if (incomingAddress instanceof WebSocketAddress) {
+            parentRouter.addNextHop(callback, participantId, (WebSocketAddress) incomingAddress);
+        } else if (incomingAddress instanceof WebSocketClientAddress) {
+            parentRouter.addNextHop(callback, participantId, (WebSocketClientAddress) incomingAddress);
+        } else if (incomingAddress instanceof AsyncIPCAddress) {
+            parentRouter.addNextHop(callback, participantId, (AsyncIPCAddress) incomingAddress);
+        } else {
+            deferred.reject(new ProviderRuntimeException("Failed to add next hop to parent: unknown address type"
+                    + incomingAddress.getClass().getSimpleName()));
+        }
+    }
+
+    public void setParentRouter(RoutingProxy parentRouter,
+                                Address parentRouterMessagingAddress,
+                                String parentRoutingProviderParticipantId,
+                                String routingProxyParticipantId) {
+        this.parentRouter = parentRouter;
+        this.parentRouterMessagingAddress = parentRouterMessagingAddress;
+
+        super.addNextHopInternal(parentRoutingProviderParticipantId, parentRouterMessagingAddress);
+        addNextHopToParent(routingProxyParticipantId, new DeferredVoid());
+        for (Runnable deferredParentHop : deferredParentHops) {
+            deferredParentHop.run();
+        }
+
+    }
+
+    /**
+     * Sets the address which will be registered at the parent router for the next hop
+     * to contact this child message router
+     * @param incomingAddress address of this libjoynr instance. Used by the cluster controller's
+     *                        message router to forward messages
+     */
+    public void setIncomingAddress(Address incomingAddress) {
+        this.incomingAddress = incomingAddress;
+    }
+}
diff --git a/java/core/pom.xml b/java/core/pom.xml
index e70b2df..20c01f2 100644
--- a/java/core/pom.xml
+++ b/java/core/pom.xml
@@ -1,41 +1,42 @@
-<!--
-  #%L
-  %%
-  Copyright (C) 2011 - 2013 BMW Car IT GmbH
-  %%
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  #L%
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<groupId>io.joynr.java</groupId>
-	<artifactId>core</artifactId>
-	<modelVersion>4.0.0</modelVersion>
-	<packaging>pom</packaging>
-	<name>${project.groupId}:${project.artifactId}</name>
-
-	<parent>
-		<groupId>io.joynr</groupId>
-		<artifactId>java</artifactId>
-		<version>0.14.1</version>
-		<relativePath>../pom.xml</relativePath>
-	</parent>
-	<modules>
-		<module>joynr-types</module>
-		<module>libjoynr</module>
-		<module>clustercontroller</module>
-        <module>libjoynr-websocket-runtime</module>
-        <module>clustercontroller-websocket-runtime</module>
-        <module>clustercontroller-inprocess-runtime</module>
-        <module>clustercontroller-standalone</module>
-    </modules>
-</project>
+<!--
+  #%L
+  %%
+  Copyright (C) 2011 - 2013 BMW Car IT GmbH
+  %%
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  #L%
+  -->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<groupId>io.joynr.java</groupId>
+	<artifactId>core</artifactId>
+	<modelVersion>4.0.0</modelVersion>
+	<packaging>pom</packaging>
+	<name>${project.groupId}:${project.artifactId}</name>
+
+	<parent>
+		<groupId>io.joynr</groupId>
+		<artifactId>java</artifactId>
+		<version>0.14.1</version>
+		<relativePath>../pom.xml</relativePath>
+	</parent>
+	<modules>
+		<module>joynr-types</module>
+		<module>libjoynr</module>
+		<module>clustercontroller</module>
+        <module>libjoynr-websocket-runtime</module>
+        <module>libjoynr-asyncipc-runtime</module>
+        <module>clustercontroller-websocket-runtime</module>
+        <module>clustercontroller-inprocess-runtime</module>
+        <module>clustercontroller-standalone</module>
+    </modules>
+</project>
diff --git a/java/messaging/asyncipc/joynr-asyncipc/pom.xml b/java/messaging/asyncipc/joynr-asyncipc/pom.xml
new file mode 100644
index 0000000..4da5b56
--- /dev/null
+++ b/java/messaging/asyncipc/joynr-asyncipc/pom.xml
@@ -0,0 +1,48 @@
+<!--
+  #%L
+  %%
+  Copyright (C) 2011 - 2013 BMW Car IT GmbH
+  %%
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  #L%
+  -->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>io.joynr.java.messaging.asyncipc</groupId>
+    <artifactId>joynr-asyncipc</artifactId>
+    <name>${project.groupId}:${project.artifactId}</name>
+    
+    <parent>
+        <groupId>io.joynr.java.messaging</groupId>
+        <artifactId>asyncipc</artifactId>
+        <version>0.14.1</version>
+    </parent>
+
+    <dependencies>
+        <dependency>
+            <groupId>io.joynr.java</groupId>
+            <artifactId>javaapi</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>io.joynr.java.messaging</groupId>
+            <artifactId>messaging-common</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+			<groupId>com.google.code.gson</groupId>
+			<artifactId>gson</artifactId>
+		</dependency>
+    </dependencies>
+    
+</project>
\ No newline at end of file
diff --git a/java/messaging/asyncipc/joynr-asyncipc/src/main/java/de/peiker/EP2011_051/NetworkAndProtocols/IPC/IpcPosixMessageQueue.java b/java/messaging/asyncipc/joynr-asyncipc/src/main/java/de/peiker/EP2011_051/NetworkAndProtocols/IPC/IpcPosixMessageQueue.java
new file mode 100644
index 0000000..bf50da5
--- /dev/null
+++ b/java/messaging/asyncipc/joynr-asyncipc/src/main/java/de/peiker/EP2011_051/NetworkAndProtocols/IPC/IpcPosixMessageQueue.java
@@ -0,0 +1,225 @@
+package de.peiker.EP2011_051.NetworkAndProtocols.IPC;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * The Class IpcPosixMessageQueue.
+ */
+public class IpcPosixMessageQueue {
+    private Logger logger = LoggerFactory.getLogger(IpcPosixMessageQueue.class);
+
+    /** The fd. */
+    protected int fd;
+
+    /** The max_message_size. */
+    protected int max_message_size;
+    /** The Constant default_mode. */
+    public static final int DEFAULT_MODE = 0x180; /*0x600*/
+
+    /** The Constant default_max_msg. */
+    public static final int DEFAULT_MAX_MSG = 10;
+
+    /** The Constant default_max_size. */
+    public static final int DEFAULT_MAX_SIZE = 8192;
+
+    /** The Constant default_priority. */
+    public static final short DEFAULT_PRIORITY = 0;
+
+    /**
+     * Instantiates a new Posix message queue.
+     *
+     * @param name the name
+     * @param isOutputQueue the is_output_queue
+     * @param maxSize the max_size
+     * @param maxMsg the max_msg
+     * @param mode the mode
+     */
+    public IpcPosixMessageQueue(final String name,
+                                final boolean isOutputQueue,
+                                final int maxSize,
+                                final int maxMsg,
+                                final int mode) {
+        fd = mqOpen(name, isOutputQueue, maxSize, maxMsg, mode);
+        if (!is_valid()) {
+            String message = "error while opening message queue: " + name;
+            logger.debug(message);
+        }
+        max_message_size = is_valid() ? mqMaxmsgsize(fd) : 0;
+    }
+
+    /**
+     * Checks if is _valid.
+     *
+     * @return true, if is _valid
+     */
+    public final boolean is_valid() {
+        return (fd != -1);
+    }
+
+    /**
+     * Gets the _max_message_size.
+     *
+     * @return the _max_message_size
+     */
+    public final int get_max_message_size() {
+        return max_message_size;
+    }
+
+    /**
+     * Msg_available.
+     *
+     * @return the int
+     */
+    public final int msg_available() {
+        if (is_valid()) {
+            return (int) mqCurmsgs(fd);
+        }
+        return -1;
+    }
+
+    /**
+     * Clear_queue.
+     */
+    public final void clear_queue() {
+        int available = msg_available();
+        while (available-- > 0) {
+            receive();
+        }
+    }
+
+    /**
+     * Close.
+     *
+     * @return true, if successful
+     */
+    public final boolean close() // Fehlerfall: false 
+    {
+        if (is_valid()) {
+            return mqClose(fd);
+        }
+        return false;
+    }
+
+    /**
+     * Receive.
+     *
+     * @return the byte[]
+     */
+    public final byte[] receive() // Fehlerfall: null-Array
+    {
+        if (is_valid()) {
+            return mqReceive(fd, max_message_size);
+        }
+        return null;
+    }
+
+    /**
+     * Send.
+     *
+     * @param data the data
+     * @param priority the priority
+     * @return true, if successful
+     */
+    protected final boolean send(final byte[] data, final short priority) // Fehlerfall: false
+    {
+        short prio = priority;
+
+        if (prio < 0) {
+            prio = 0;
+        }
+        if (data == null || !is_valid()) {
+            return false;
+        }
+        return mqSend(fd, data, prio);
+    }
+
+    /**
+     * Send.
+     *
+     * @param data the data
+     * @return true, if successful
+     */
+    public boolean send(final byte[] data) // Fehlerfall: false
+    {
+        return send(data, DEFAULT_PRIORITY);
+    }
+
+    /**
+     * Error generic.
+     *
+     * @param functionname the functionname
+     * @param errormessage the errormessage
+     * @param logLevel the log level
+     */
+    /*protected void errorGeneric(final String functionname, final String errormessage, final LogLevelEnum logLevel)
+    {
+        String errortext = this.getClass().getCanonicalName() + "::" + functionname + "(): " + errormessage;
+        
+        LogAndTrace.getLogable().log( AppConID.convert("RPC"), AppConID.convert("MANG"), logLevel, 
+                DLTTypeablePool.getDLTString( errortext ) );
+    }*/
+
+    static {
+        System.loadLibrary("jasyncipc");
+    }
+
+    /**
+     * mqOpen.
+     *
+     * @param name the name
+     * @param isOutputQueue the outputqueue 
+     * @param maxSize the max size
+     * @param maxMsg the max Msg
+     * @param mode the mode
+     * @return true, if successful
+     */
+    private native final int mqOpen(final String name,
+                                    final boolean isOutputQueue,
+                                    final int maxSize,
+                                    final int maxMsg,
+                                    final int mode);
+
+    /**
+     * mqClose.
+     *
+     * @param mFd the fd
+     * @return true, if successful
+     */
+    private native final boolean mqClose(final int mFd);
+
+    /**
+     * mqSend.
+     *
+     * @param mFd the fd
+     * @param data the data
+     * @param priority the priority
+     * @return true, if successful
+     */
+    private native final boolean mqSend(final int mFd, final byte[] data, final short priority);
+
+    /**
+     * mqReceive.
+     *
+     * @param mFd the fd
+     * @param maxSize the max_size
+     * @return the byte[]
+     */
+    private native final byte[] mqReceive(final int mFd, final int maxSize);
+
+    /**
+     * mqCurmsgs.
+     *
+     * @param mFd the fd
+     * @return the long
+     */
+    private native final long mqCurmsgs(final int mFd);
+
+    /**
+     * mqMaxmsgsize.
+     *
+     * @param mFd the fd
+     * @return the int
+     */
+    private native final int mqMaxmsgsize(final int mFd);
+}
diff --git a/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/AsyncIPCMessageReceiver.java b/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/AsyncIPCMessageReceiver.java
new file mode 100644
index 0000000..50f981a
--- /dev/null
+++ b/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/AsyncIPCMessageReceiver.java
@@ -0,0 +1,144 @@
+package io.joynr.messaging.asyncipc;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Queue;
+import java.util.concurrent.ConcurrentLinkedQueue;
+
+import org.apache.commons.lang.StringUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.gson.Gson;
+
+import de.peiker.EP2011_051.NetworkAndProtocols.IPC.IpcPosixMessageQueue;
+import io.joynr.exceptions.JoynrRuntimeException;
+import joynr.JoynrMessage;
+
+public class AsyncIPCMessageReceiver extends IpcPosixMessageQueue {
+
+	protected static List<String> receivers = new ArrayList<>();
+	
+	private Logger logger = LoggerFactory.getLogger(AsyncIPCMessageReceiver.class);
+	
+	private Gson gson = new Gson();
+	
+	private MQThread thread;
+	
+	private MQHandleThread mqHandleThread;
+	
+	protected Queue<String> messages = new ConcurrentLinkedQueue<>();
+	
+	protected static AsyncIPCMessagingSkeleton skeleton;
+	
+	protected Object syncObject = new Object();
+	
+	protected boolean stopThread = false;
+	
+	protected static AsyncIPCMessageReceiver register(AsyncIPCMessagingSkeleton asyncIPCMessagingSkeleton, String queueName){
+		if (!receivers.contains(queueName))
+			receivers.add(queueName);
+		
+		skeleton = asyncIPCMessagingSkeleton;
+		
+		return new AsyncIPCMessageReceiver("/" + queueName + ".mq", false, IpcPosixMessageQueue.DEFAULT_MAX_SIZE,
+				IpcPosixMessageQueue.DEFAULT_MAX_MSG, IpcPosixMessageQueue.DEFAULT_MODE);
+	}
+	
+	public AsyncIPCMessageReceiver(String name, boolean isOutputQueue, int maxSize, int maxMsg, int mode) {
+		super(name, isOutputQueue, maxSize, maxMsg, mode);
+		
+		startMQ();
+	}
+	
+	private void startMQ(){
+		stopThread = false;
+		
+		clear_queue();
+		
+		thread = new MQThread();
+		thread.start();
+		
+		mqHandleThread = new MQHandleThread();
+		mqHandleThread.start();
+	}
+	
+	public void shutdown(){
+		stopThread = true;
+	}
+	
+	protected class MQThread extends Thread {
+		@Override
+		public void run() {
+			while(true){
+				if(msg_available() == 0 && stopThread){
+					close();
+					break;
+				}
+				
+				if(msg_available() > 0){
+					byte[] byteMsg = receive();
+					if(byteMsg != null){
+						synchronized (syncObject) {
+							String serializedMsg = new String(byteMsg);
+							
+							logger.trace("MQ thread name: " + Thread.currentThread().getName());
+							logger.trace("INCOMING serialized message: " + serializedMsg);
+							
+							messages.add(serializedMsg);
+							syncObject.notify();
+						}
+					}
+				}
+			}
+		}
+	}
+	
+	protected class MQHandleThread extends Thread {
+		@Override
+		public void run() {
+			while(true){
+				if(stopThread && messages.size() == 0){
+					break;
+				}
+				
+				synchronized (syncObject) {
+					if(messages.size() > 0){
+						String[] messagesArray = new String[messages.size()];
+						messagesArray = messages.toArray(messagesArray);
+						for (String message : messagesArray) {
+						    logger.trace("Parsing message from memory queue: " + message);
+						    if (!StringUtils.isEmpty(message)) {
+								final JoynrMessage msg = gson.fromJson(message, JoynrMessage.class);
+								
+								new Thread(new Runnable() {
+								    public void run() {
+								    	try {
+											skeleton.transmit(msg);
+										} catch (IOException e) {
+											logger.error("Error processing message: ", e);
+											throw new JoynrRuntimeException(e);
+										}
+								    }
+								}).start();
+						    }
+						    
+						    if(messages.contains(message)){
+						    	logger.trace("Removing message from memory queue: " + message);
+						    	messages.remove(message);
+						    }
+						}
+					} else {
+						try {
+							syncObject.wait();
+						} catch (InterruptedException e) {
+							logger.error("Error waiting for message: ", e);
+						}
+					}
+				}
+			}
+		}
+	}
+
+}
diff --git a/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/AsyncIPCMessageSender.java b/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/AsyncIPCMessageSender.java
new file mode 100644
index 0000000..f4e4d5f
--- /dev/null
+++ b/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/AsyncIPCMessageSender.java
@@ -0,0 +1,26 @@
+package io.joynr.messaging.asyncipc;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import de.peiker.EP2011_051.NetworkAndProtocols.IPC.IpcPosixMessageQueue;
+
+public class AsyncIPCMessageSender extends IpcPosixMessageQueue {
+
+	protected static List<String> senders = new ArrayList<>();
+	
+	protected static AsyncIPCMessageSender register(String queueName){
+		if (!senders.contains(queueName))
+			senders.add(queueName);
+		
+		return new AsyncIPCMessageSender("/" + queueName + ".mq", true, IpcPosixMessageQueue.DEFAULT_MAX_SIZE,
+				IpcPosixMessageQueue.DEFAULT_MAX_MSG, IpcPosixMessageQueue.DEFAULT_MODE);
+	}
+	
+	public AsyncIPCMessageSender(String name, boolean isOutputQueue, int maxSize, int maxMsg, int mode) {
+		super(name, isOutputQueue, maxSize, maxMsg, mode);
+	}
+	
+	/* TODO maybe unlink method is needed */
+	
+}
diff --git a/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/AsyncIPCMessagingSkeleton.java b/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/AsyncIPCMessagingSkeleton.java
new file mode 100644
index 0000000..bb541c0
--- /dev/null
+++ b/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/AsyncIPCMessagingSkeleton.java
@@ -0,0 +1,43 @@
+package io.joynr.messaging.asyncipc;
+
+import java.io.IOException;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import de.peiker.EP2011_051.NetworkAndProtocols.IPC.IpcPosixMessageQueue;
+import io.joynr.messaging.IMessagingSkeleton;
+import io.joynr.messaging.routing.MessageRouter;
+import joynr.JoynrMessage;
+import joynr.system.RoutingTypes.AsyncIPCAddress;
+
+public abstract class AsyncIPCMessagingSkeleton implements IMessagingSkeleton {
+
+    private static final Logger logger = LoggerFactory.getLogger(AsyncIPCMessagingSkeleton.class);
+    protected IpcPosixMessageQueue messageReceiver;
+    protected MessageRouter router;
+
+    public AsyncIPCMessagingSkeleton(AsyncIPCAddress address, MessageRouter router) {
+        this.router = router;
+
+        if (address != null)
+            messageReceiver = AsyncIPCMessageReceiver.register(this, address.getQueueId());
+    }
+
+    @Override
+    public void transmit(JoynrMessage message) throws IOException {
+        logger.trace("Transmitting message: " + message);
+        router.route(message);
+    }
+
+    @Override
+    public void init() {
+
+    }
+
+    @Override
+    public void shutdown() {
+        ((AsyncIPCMessageReceiver) messageReceiver).shutdown();
+    }
+
+}
diff --git a/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/AsyncIPCMessagingStubAdapter.java b/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/AsyncIPCMessagingStubAdapter.java
new file mode 100644
index 0000000..c93b09d
--- /dev/null
+++ b/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/AsyncIPCMessagingStubAdapter.java
@@ -0,0 +1,48 @@
+package io.joynr.messaging.asyncipc;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.gson.Gson;
+import com.google.inject.Inject;
+import com.google.inject.name.Named;
+
+import io.joynr.exceptions.JoynrRuntimeException;
+import io.joynr.messaging.IMessaging;
+import joynr.JoynrMessage;
+
+public class AsyncIPCMessagingStubAdapter implements IMessaging {
+
+    private Logger logger = LoggerFactory.getLogger(AsyncIPCMessagingStubAdapter.class);
+    private Gson gson = new Gson();
+
+    private AsyncIPCMessageSender asyncIPCMessager;
+
+    @Inject
+    public AsyncIPCMessagingStubAdapter(@Named(AsyncIpcModule.PROPERTY_ASYNCIPC_MESSAGING_CC_QUEUEID) String queueName) {
+        asyncIPCMessager = AsyncIPCMessageSender.register(queueName);
+    }
+
+    public void transmit(JoynrMessage message) {
+        logger.trace("Transmiting message: " + message);
+        if (asyncIPCMessager == null)
+            throw new JoynrRuntimeException("AsyncIPCMessageSender is not initialized!");
+
+        String serializedJson = gson.toJson(message);
+        asyncIPCMessager.send(serializedJson.getBytes());
+    }
+
+    public void send(String serializedMsg) {
+        if (serializedMsg != null) {
+            asyncIPCMessager.send(serializedMsg.getBytes());
+        }
+    }
+
+    public void shutdown() {
+        if (asyncIPCMessager != null) {
+            if (!asyncIPCMessager.close())
+                throw new JoynrRuntimeException("Failed to close message queue.");
+        }
+    }
+
+}
diff --git a/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/AsyncIPCMessagingStubFactory.java b/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/AsyncIPCMessagingStubFactory.java
new file mode 100644
index 0000000..7be89fc
--- /dev/null
+++ b/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/AsyncIPCMessagingStubFactory.java
@@ -0,0 +1,41 @@
+package io.joynr.messaging.asyncipc;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import io.joynr.messaging.AbstractMessagingStubFactory;
+import io.joynr.messaging.IMessaging;
+import joynr.system.RoutingTypes.AsyncIPCAddress;
+
+public class AsyncIPCMessagingStubFactory extends AbstractMessagingStubFactory<AsyncIPCAddress> {
+	
+	private Logger logger = LoggerFactory.getLogger(AsyncIPCMessagingStubFactory.class);
+	private Map<String, IMessaging> sessionMap = new HashMap<>();
+
+	@Override
+	protected IMessaging createInternal(AsyncIPCAddress address) {
+		String addressStr = address.getQueueId();
+		
+		IMessaging stub; 
+		if(!sessionMap.containsKey(addressStr)){
+			logger.info("Adding new StubAdapter.");
+			stub = new AsyncIPCMessagingStubAdapter(addressStr);
+			sessionMap.put(addressStr, stub);
+		} else {
+			stub = sessionMap.get(addressStr);
+		}
+		
+		return stub;
+	}
+
+	@Override
+	public void shutdown() {
+		for (IMessaging stub : sessionMap.values()) {
+			((AsyncIPCMessagingStubAdapter)stub).shutdown();
+        }
+	}
+
+}
diff --git a/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/AsyncIpcModule.java b/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/AsyncIpcModule.java
new file mode 100644
index 0000000..b750965
--- /dev/null
+++ b/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/AsyncIpcModule.java
@@ -0,0 +1,30 @@
+package io.joynr.messaging.asyncipc;
+
+import javax.inject.Named;
+
+import com.google.inject.AbstractModule;
+import com.google.inject.Provides;
+
+import joynr.system.RoutingTypes.AsyncIPCAddress;
+
+public class AsyncIpcModule extends AbstractModule {
+
+    public static final String PROPERTY_ASYNCIPC_MESSAGING_SKELETON = "joynr.asyncipc.messaging_skeleton";
+
+    public static final String PROPERTY_ASYNCIPC_MESSAGING_URL_ADDRESS = "joynr.asyncipc.messagingurl";
+
+    public static final String PROPERTY_ASYNCIPC_MESSAGING_CC_QUEUEID = "joynr.messaging.cc.queueid";
+
+    public static final String PROPERTY_ASYNCIPC_MESSAGING_QUEUEID = "joynr.messaging.queueid";
+
+    @Override
+    protected void configure() {
+    }
+
+    @Provides
+    @Named(PROPERTY_ASYNCIPC_MESSAGING_URL_ADDRESS)
+    public AsyncIPCAddress provideAsyncIPCAddress(@Named(PROPERTY_ASYNCIPC_MESSAGING_CC_QUEUEID) String queueId) {
+        return new AsyncIPCAddress(queueId);
+    }
+
+}
diff --git a/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/LibAsyncIPCMessagingSkeleton.java b/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/LibAsyncIPCMessagingSkeleton.java
new file mode 100644
index 0000000..363db4c
--- /dev/null
+++ b/java/messaging/asyncipc/joynr-asyncipc/src/main/java/io/joynr/messaging/asyncipc/LibAsyncIPCMessagingSkeleton.java
@@ -0,0 +1,27 @@
+package io.joynr.messaging.asyncipc;
+
+import com.google.inject.Inject;
+import com.google.inject.name.Named;
+
+import io.joynr.messaging.routing.MessageRouter;
+import io.joynr.runtime.SystemServicesSettings;
+import joynr.system.RoutingTypes.AsyncIPCAddress;
+
+public class LibAsyncIPCMessagingSkeleton extends AsyncIPCMessagingSkeleton {
+
+    @Inject
+    public LibAsyncIPCMessagingSkeleton(@Named(SystemServicesSettings.PROPERTY_LIBJOYNR_MESSAGING_ADDRESS) AsyncIPCAddress address,
+                                        MessageRouter router) {
+        super(address, router);
+    }
+
+    @Override
+    public void init() {
+    }
+
+    @Override
+    public void shutdown() {
+        router.shutdown();
+    }
+
+}
diff --git a/java/messaging/asyncipc/pom.xml b/java/messaging/asyncipc/pom.xml
new file mode 100644
index 0000000..fcd590d
--- /dev/null
+++ b/java/messaging/asyncipc/pom.xml
@@ -0,0 +1,37 @@
+<!--
+  #%L
+  %%
+  Copyright (C) 2011 - 2013 BMW Car IT GmbH
+  %%
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  #L%
+  -->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>io.joynr.java.messaging</groupId>
+    <artifactId>asyncipc</artifactId>
+    <name>${project.groupId}:${project.artifactId}</name>
+    <packaging>pom</packaging>
+
+    <parent>
+        <groupId>io.joynr.java</groupId>
+        <artifactId>messaging</artifactId>
+        <version>0.14.1</version>
+        <relativePath>../pom.xml</relativePath>
+    </parent>
+    
+    <modules>
+        <module>joynr-asyncipc</module>
+    </modules>
+    
+</project>
diff --git a/java/messaging/bounceproxy/bounceproxy-controller-persistence/jdbc/pom.xml b/java/messaging/bounceproxy/bounceproxy-controller-persistence/jdbc/pom.xml
index 77e374b..604fae0 100644
--- a/java/messaging/bounceproxy/bounceproxy-controller-persistence/jdbc/pom.xml
+++ b/java/messaging/bounceproxy/bounceproxy-controller-persistence/jdbc/pom.xml
@@ -1,122 +1,124 @@
-<!--
-  #%L
-  %%
-  Copyright (C) 2011 - 2013 BMW Car IT GmbH
-  %%
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  #L%
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<modelVersion>4.0.0</modelVersion>
-
-	<groupId>io.joynr.java.messaging.bounceproxy.bounceproxy-controller-persistence</groupId>
-	<artifactId>jdbc</artifactId>
-	<packaging>jar</packaging>
-
-	<name>${project.groupId}:${project.artifactId}</name>
-
-	<description>jdbc implementation for directories needed by bounceproxy controller</description>
-
-	<parent>
-		<groupId>io.joynr.java.messaging.bounceproxy</groupId>
-		<artifactId>bounceproxy-controller-persistence</artifactId>
-		<version>0.14.1</version>
-		<relativePath>../pom.xml</relativePath>
-	</parent>
-
-	<properties>
-	</properties>
-
-	<dependencies>
-
-	    <dependency>
-	    	<groupId>
-	    		io.joynr.java.messaging.bounceproxy.bounceproxy-controller-persistence
-	    	</groupId>
-	    	<artifactId>persistence-common</artifactId>
-	    	<version>${project.version}</version>
-	    </dependency>
-
-	    <!-- dependency>
-			<groupId>javax.persistence</groupId>
-			<artifactId>persistence-api</artifactId>
-			<version>1.0.2</version>
-		</dependency-->
-
-		<dependency>
-			<groupId>org.apache.openjpa</groupId>
-			<artifactId>openjpa-jdbc</artifactId>
-			<version>2.3.0</version>
-		</dependency>
-
-		<dependency>
-			<groupId>org.apache.openjpa</groupId>
-			<artifactId>openjpa-persistence</artifactId>
-			<version>2.3.0</version>
-		</dependency>
-
-		<dependency>
-			<groupId>org.apache.openjpa</groupId>
-			<artifactId>openjpa-persistence-jdbc</artifactId>
-			<version>2.3.0</version>
-		</dependency>
-
-		<dependency>
-			<groupId>org.apache.derby</groupId>
-			<artifactId>derby</artifactId>
-			<version>10.10.1.1</version>
-			<scope>test</scope>
-		</dependency>
-
-		<dependency>
-			<groupId>com.google.inject.extensions</groupId>
-			<artifactId>guice-persist</artifactId>
-			<version>3.0</version>
-		</dependency>
-		<dependency>
-			<groupId>org.mockito</groupId>
-			<artifactId>mockito-core</artifactId>
-			<scope>test</scope>
-		</dependency>
-	</dependencies>
-	<build>
-	<plugins>
-	<plugin>
-	<groupId>org.apache.openjpa</groupId>
-	<artifactId>openjpa-maven-plugin</artifactId>
-	<version>2.3.0</version>
-	<configuration>
-		<includes>**/entities/*.class</includes>
-	</configuration>
-	<executions>
-		<execution>
-			<id>enhancer</id>
-			<phase>process-classes</phase>
-			<goals>
-				<goal>enhance</goal>
-			</goals>
-		</execution>
-	</executions>
-	<dependencies>
-		<dependency>
-			<groupId>org.apache.openjpa</groupId>
-			<artifactId>openjpa</artifactId>
-			<!-- set the version to be the same as the level in your runtime -->
-			<version>2.3.0</version>
-		</dependency>
-	</dependencies>
-    </plugin>
-	</plugins>
-	</build>
-
-</project>
+<!--
+  #%L
+  %%
+  Copyright (C) 2011 - 2013 BMW Car IT GmbH
+  %%
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  #L%
+  -->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+
+	<groupId>io.joynr.java.messaging.bounceproxy.bounceproxy-controller-persistence</groupId>
+	<artifactId>jdbc</artifactId>
+	<packaging>jar</packaging>
+
+	<name>${project.groupId}:${project.artifactId}</name>
+
+	<description>jdbc implementation for directories needed by bounceproxy controller</description>
+
+	<parent>
+		<groupId>io.joynr.java.messaging.bounceproxy</groupId>
+		<artifactId>bounceproxy-controller-persistence</artifactId>
+		<version>0.14.1</version>
+		<relativePath>../pom.xml</relativePath>
+	</parent>
+
+	<properties>
+	</properties>
+
+	<dependencies>
+
+	    <dependency>
+	    	<groupId>
+	    		io.joynr.java.messaging.bounceproxy.bounceproxy-controller-persistence
+	    	</groupId>
+	    	<artifactId>persistence-common</artifactId>
+	    	<version>${project.version}</version>
+	    </dependency>
+
+	    <!-- dependency>
+			<groupId>javax.persistence</groupId>
+			<artifactId>persistence-api</artifactId>
+			<version>1.0.2</version>
+		</dependency-->
+
+		<dependency>
+			<groupId>org.apache.openjpa</groupId>
+			<artifactId>openjpa-jdbc</artifactId>
+			<version>2.3.0</version>
+		</dependency>
+
+		<dependency>
+			<groupId>org.apache.openjpa</groupId>
+			<artifactId>openjpa-persistence</artifactId>
+			<version>2.3.0</version>
+		</dependency>
+
+		<dependency>
+			<groupId>org.apache.openjpa</groupId>
+			<artifactId>openjpa-persistence-jdbc</artifactId>
+			<version>2.3.0</version>
+		</dependency>
+
+		<dependency>
+			<groupId>org.apache.derby</groupId>
+			<artifactId>derby</artifactId>
+			<version>10.10.1.1</version>
+			<scope>test</scope>
+		</dependency>
+
+		<dependency>
+			<groupId>com.google.inject.extensions</groupId>
+			<artifactId>guice-persist</artifactId>
+			<version>3.0</version>
+		</dependency>
+		<dependency>
+			<groupId>org.mockito</groupId>
+			<artifactId>mockito-core</artifactId>
+			<scope>test</scope>
+		</dependency>
+	</dependencies>
+	<build>
+	<pluginManagement>
+	<plugins>
+	<plugin>
+	<groupId>org.apache.openjpa</groupId>
+	<artifactId>openjpa-maven-plugin</artifactId>
+	<version>2.3.0</version>
+	<configuration>
+		<includes>**/entities/*.class</includes>
+	</configuration>
+	<executions>
+		<execution>
+			<id>enhancer</id>
+			<phase>process-classes</phase>
+			<goals>
+				<goal>enhance</goal>
+			</goals>
+		</execution>
+	</executions>
+	<dependencies>
+		<dependency>
+			<groupId>org.apache.openjpa</groupId>
+			<artifactId>openjpa</artifactId>
+			<!-- set the version to be the same as the level in your runtime -->
+			<version>2.3.0</version>
+		</dependency>
+	</dependencies>
+    </plugin>
+	</plugins>
+	</pluginManagement>
+	</build>
+
+</project>
diff --git a/java/messaging/messaging-common/src/main/java/io/joynr/messaging/routing/MessageRouterImpl.java b/java/messaging/messaging-common/src/main/java/io/joynr/messaging/routing/MessageRouterImpl.java
index cadfba9..777a8ff 100644
--- a/java/messaging/messaging-common/src/main/java/io/joynr/messaging/routing/MessageRouterImpl.java
+++ b/java/messaging/messaging-common/src/main/java/io/joynr/messaging/routing/MessageRouterImpl.java
@@ -1,160 +1,166 @@
-package io.joynr.messaging.routing;
-
-/*
- * #%L
- * %%
- * Copyright (C) 2011 - 2015 BMW Car IT GmbH
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * #L%
- */
-
-import io.joynr.exceptions.JoynrMessageNotSentException;
-import io.joynr.exceptions.JoynrSendBufferFullException;
-import io.joynr.messaging.IMessaging;
-import io.joynr.provider.DeferredVoid;
-import io.joynr.provider.Promise;
-
-import java.io.IOException;
-
-import javax.annotation.CheckForNull;
-import javax.inject.Inject;
-import javax.inject.Singleton;
-
-import joynr.JoynrMessage;
-import joynr.system.RoutingAbstractProvider;
-import joynr.system.RoutingTypes.Address;
-import joynr.system.RoutingTypes.BrowserAddress;
-import joynr.system.RoutingTypes.ChannelAddress;
-import joynr.system.RoutingTypes.CommonApiDbusAddress;
-import joynr.system.RoutingTypes.WebSocketAddress;
-import joynr.system.RoutingTypes.WebSocketClientAddress;
-import joynr.types.ProviderQos;
-import joynr.types.ProviderScope;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-public class MessageRouterImpl extends RoutingAbstractProvider implements MessageRouter {
-
-    private Logger logger = LoggerFactory.getLogger(MessageRouterImpl.class);
-    private final RoutingTable routingTable;
-    private MessagingStubFactory messagingStubFactory;
-    private static final int UUID_TAIL = 32;
-
-    @Inject
-    @Singleton
-    public MessageRouterImpl(RoutingTable routingTable, MessagingStubFactory messagingStubFactory) {
-        this.routingTable = routingTable;
-        this.messagingStubFactory = messagingStubFactory;
-    }
-
-    protected Promise<DeferredVoid> addNextHopInternal(String participantId, Address address) {
-        routingTable.put(participantId, address);
-        final DeferredVoid deferred = new DeferredVoid();
-        deferred.resolve();
-        return new Promise<DeferredVoid>(deferred);
-    }
-
-    @Override
-    public Promise<DeferredVoid> addNextHop(String participantId, ChannelAddress channelAddress) {
-        return addNextHopInternal(participantId, channelAddress);
-    }
-
-    @Override
-    public Promise<DeferredVoid> addNextHop(String participantId, CommonApiDbusAddress commonApiDbusAddress) {
-        return addNextHopInternal(participantId, commonApiDbusAddress);
-    }
-
-    @Override
-    public Promise<DeferredVoid> addNextHop(String participantId, BrowserAddress browserAddress) {
-        return addNextHopInternal(participantId, browserAddress);
-    }
-
-    @Override
-    public Promise<DeferredVoid> addNextHop(String participantId, WebSocketAddress webSocketAddress) {
-        return addNextHopInternal(participantId, webSocketAddress);
-    }
-
-    @Override
-    public Promise<DeferredVoid> addNextHop(String participantId, WebSocketClientAddress webSocketClientAddress) {
-        return addNextHopInternal(participantId, webSocketClientAddress);
-    }
-
-    @Override
-    public Promise<DeferredVoid> removeNextHop(String participantId) {
-        routingTable.remove(participantId);
-        DeferredVoid deferred = new DeferredVoid();
-        deferred.resolve();
-        return new Promise<DeferredVoid>(deferred);
-    }
-
-    @Override
-    public Promise<ResolveNextHopDeferred> resolveNextHop(String participantId) {
-        ResolveNextHopDeferred deferred = new ResolveNextHopDeferred();
-        deferred.resolve(routingTable.containsKey(participantId));
-        return new Promise<ResolveNextHopDeferred>(deferred);
-    }
-
-    @CheckForNull
-    protected Address getAddress(String toParticipantId) {
-        Address address = null;
-        if (toParticipantId != null && routingTable.containsKey(toParticipantId)) {
-            address = routingTable.get(toParticipantId);
-        }
-        return address;
-    }
-
-    @Override
-    public void route(JoynrMessage message) throws JoynrSendBufferFullException, JoynrMessageNotSentException,
-                                           IOException {
-        String toParticipantId = message.getTo();
-        Address address = getAddress(toParticipantId);
-        if (address != null) {
-            routeMessageByAddress(message, address);
-        } else {
-            throw new JoynrMessageNotSentException("Failed to send Request: No route for given participantId: "
-                    + toParticipantId);
-        }
-    }
-
-    private void routeMessageByAddress(JoynrMessage message, Address address) throws JoynrSendBufferFullException,
-                                                                             JoynrMessageNotSentException, IOException {
-
-        String messageId = message.getId().substring(UUID_TAIL);
-        logger.info(">>>>> SEND  ID:{}:{} from: {} to: {} header: {}", new String[]{ messageId, message.getType(),
-                message.getHeaderValue(JoynrMessage.HEADER_NAME_FROM_PARTICIPANT_ID),
-                message.getHeaderValue(JoynrMessage.HEADER_NAME_TO_PARTICIPANT_ID), message.getHeader().toString() });
-        logger.debug(">>>>> body  ID:{}:{}: {}", new String[]{ messageId, message.getType(), message.getPayload() });
-        IMessaging messagingStub = messagingStubFactory.create(address);
-        messagingStub.transmit(message);
-    }
-
-    @Override
-    public void addNextHop(String participantId, Address address) {
-        addNextHopInternal(participantId, address);
-    }
-
-    @Override
-    public void shutdown() {
-        messagingStubFactory.shutdown();
-    }
-
-    @Override
-    public ProviderQos getProviderQos() {
-        //set provider qos to local to prevent global registration of the routing provider
-        ProviderQos providerQos = super.getProviderQos();
-        providerQos.setScope(ProviderScope.LOCAL);
-        return providerQos;
-    }
-}
+package io.joynr.messaging.routing;
+
+/*
+ * #%L
+ * %%
+ * Copyright (C) 2011 - 2015 BMW Car IT GmbH
+ * %%
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * #L%
+ */
+
+import io.joynr.exceptions.JoynrMessageNotSentException;
+import io.joynr.exceptions.JoynrSendBufferFullException;
+import io.joynr.messaging.IMessaging;
+import io.joynr.provider.DeferredVoid;
+import io.joynr.provider.Promise;
+
+import java.io.IOException;
+
+import javax.annotation.CheckForNull;
+import javax.inject.Inject;
+import javax.inject.Singleton;
+
+import joynr.JoynrMessage;
+import joynr.system.RoutingAbstractProvider;
+import joynr.system.RoutingTypes.Address;
+import joynr.system.RoutingTypes.BrowserAddress;
+import joynr.system.RoutingTypes.ChannelAddress;
+import joynr.system.RoutingTypes.CommonApiDbusAddress;
+import joynr.system.RoutingTypes.AsyncIPCAddress;
+import joynr.system.RoutingTypes.WebSocketAddress;
+import joynr.system.RoutingTypes.WebSocketClientAddress;
+import joynr.types.ProviderQos;
+import joynr.types.ProviderScope;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class MessageRouterImpl extends RoutingAbstractProvider implements MessageRouter {
+
+    private Logger logger = LoggerFactory.getLogger(MessageRouterImpl.class);
+    private final RoutingTable routingTable;
+    private MessagingStubFactory messagingStubFactory;
+    private static final int UUID_TAIL = 32;
+
+    @Inject
+    @Singleton
+    public MessageRouterImpl(RoutingTable routingTable, MessagingStubFactory messagingStubFactory) {
+        this.routingTable = routingTable;
+        this.messagingStubFactory = messagingStubFactory;
+    }
+
+    protected Promise<DeferredVoid> addNextHopInternal(String participantId, Address address) {
+        routingTable.put(participantId, address);
+        final DeferredVoid deferred = new DeferredVoid();
+        deferred.resolve();
+        return new Promise<DeferredVoid>(deferred);
+    }
+
+    @Override
+    public Promise<DeferredVoid> addNextHop(String participantId, ChannelAddress channelAddress) {
+        return addNextHopInternal(participantId, channelAddress);
+    }
+
+    @Override
+    public Promise<DeferredVoid> addNextHop(String participantId, CommonApiDbusAddress commonApiDbusAddress) {
+        return addNextHopInternal(participantId, commonApiDbusAddress);
+    }
+
+    @Override
+    public Promise<DeferredVoid> addNextHop(String participantId, AsyncIPCAddress asyncIPCAddress) {
+        return addNextHopInternal(participantId, asyncIPCAddress);
+    }
+
+    @Override
+    public Promise<DeferredVoid> addNextHop(String participantId, BrowserAddress browserAddress) {
+        return addNextHopInternal(participantId, browserAddress);
+    }
+
+    @Override
+    public Promise<DeferredVoid> addNextHop(String participantId, WebSocketAddress webSocketAddress) {
+        return addNextHopInternal(participantId, webSocketAddress);
+    }
+
+    @Override
+    public Promise<DeferredVoid> addNextHop(String participantId, WebSocketClientAddress webSocketClientAddress) {
+        return addNextHopInternal(participantId, webSocketClientAddress);
+    }
+
+    @Override
+    public Promise<DeferredVoid> removeNextHop(String participantId) {
+        routingTable.remove(participantId);
+        DeferredVoid deferred = new DeferredVoid();
+        deferred.resolve();
+        return new Promise<DeferredVoid>(deferred);
+    }
+
+    @Override
+    public Promise<ResolveNextHopDeferred> resolveNextHop(String participantId) {
+        ResolveNextHopDeferred deferred = new ResolveNextHopDeferred();
+        deferred.resolve(routingTable.containsKey(participantId));
+        return new Promise<ResolveNextHopDeferred>(deferred);
+    }
+
+    @CheckForNull
+    protected Address getAddress(String toParticipantId) {
+        Address address = null;
+        if (toParticipantId != null && routingTable.containsKey(toParticipantId)) {
+            address = routingTable.get(toParticipantId);
+        }
+        return address;
+    }
+
+    @Override
+    public void route(JoynrMessage message) throws JoynrSendBufferFullException, JoynrMessageNotSentException,
+                                           IOException {
+        String toParticipantId = message.getTo();
+        Address address = getAddress(toParticipantId);
+        if (address != null) {
+            routeMessageByAddress(message, address);
+        } else {
+            throw new JoynrMessageNotSentException("Failed to send Request: No route for given participantId: "
+                    + toParticipantId);
+        }
+    }
+
+    private void routeMessageByAddress(JoynrMessage message, Address address) throws JoynrSendBufferFullException,
+                                                                             JoynrMessageNotSentException, IOException {
+
+        String messageId = message.getId().substring(UUID_TAIL);
+        logger.info(">>>>> SEND  ID:{}:{} from: {} to: {} header: {}", new String[]{ messageId, message.getType(),
+                message.getHeaderValue(JoynrMessage.HEADER_NAME_FROM_PARTICIPANT_ID),
+                message.getHeaderValue(JoynrMessage.HEADER_NAME_TO_PARTICIPANT_ID), message.getHeader().toString() });
+        logger.debug(">>>>> body  ID:{}:{}: {}", new String[]{ messageId, message.getType(), message.getPayload() });
+        IMessaging messagingStub = messagingStubFactory.create(address);
+        messagingStub.transmit(message);
+    }
+
+    @Override
+    public void addNextHop(String participantId, Address address) {
+        addNextHopInternal(participantId, address);
+    }
+
+    @Override
+    public void shutdown() {
+        messagingStubFactory.shutdown();
+    }
+
+    @Override
+    public ProviderQos getProviderQos() {
+        //set provider qos to local to prevent global registration of the routing provider
+        ProviderQos providerQos = super.getProviderQos();
+        providerQos.setScope(ProviderScope.LOCAL);
+        return providerQos;
+    }
+}
diff --git a/java/messaging/pom.xml b/java/messaging/pom.xml
index a04adfa..42a493e 100644
--- a/java/messaging/pom.xml
+++ b/java/messaging/pom.xml
@@ -1,52 +1,53 @@
-<!--
-  #%L
-  %%
-  Copyright (C) 2011 - 2013 BMW Car IT GmbH
-  %%
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-        http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  #L%
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<groupId>io.joynr.java</groupId>
-	<artifactId>messaging</artifactId>
-	<modelVersion>4.0.0</modelVersion>
-	<packaging>pom</packaging>
-	<name>${project.groupId}:${project.artifactId}</name>
-
-	<parent>
-		<groupId>io.joynr</groupId>
-		<artifactId>java</artifactId>
-		<version>0.14.1</version>
-		<relativePath>../pom.xml</relativePath>
-	</parent>
-	<modules>
-		<module>bounceproxy</module>
-		<module>messaging-common</module>
-		<module>messaging-servlet</module>
-		<module>servlet-common</module>
-		<module>messaging-service</module>
-		<module>channel-service</module>
-		<module>bounceproxy-controller-service</module>
-		<module>service-common</module>
-		<module>websocket</module>
-	</modules>
-
-		<!-- specify dependencies here to be used in all submodules -->
-	<dependencies>
-		<dependency>
-			<groupId>org.slf4j</groupId>
-			<artifactId>slf4j-api</artifactId>
-		</dependency>
-	</dependencies>
-
-</project>
+<!--
+  #%L
+  %%
+  Copyright (C) 2011 - 2013 BMW Car IT GmbH
+  %%
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  #L%
+  -->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<groupId>io.joynr.java</groupId>
+	<artifactId>messaging</artifactId>
+	<modelVersion>4.0.0</modelVersion>
+	<packaging>pom</packaging>
+	<name>${project.groupId}:${project.artifactId}</name>
+
+	<parent>
+		<groupId>io.joynr</groupId>
+		<artifactId>java</artifactId>
+		<version>0.14.1</version>
+		<relativePath>../pom.xml</relativePath>
+	</parent>
+	<modules>
+		<module>bounceproxy</module>
+		<module>messaging-common</module>
+		<module>messaging-servlet</module>
+		<module>servlet-common</module>
+		<module>messaging-service</module>
+		<module>channel-service</module>
+		<module>bounceproxy-controller-service</module>
+		<module>service-common</module>
+		<module>websocket</module>
+		<module>asyncipc</module>
+	</modules>
+
+		<!-- specify dependencies here to be used in all submodules -->
+	<dependencies>
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>slf4j-api</artifactId>
+		</dependency>
+	</dependencies>
+
+</project>
diff --git a/java/pom.xml b/java/pom.xml
index aed7c2c..44f0d62 100644
--- a/java/pom.xml
+++ b/java/pom.xml
@@ -1,160 +1,170 @@
-<!--
-  #%L
-  %%
-  Copyright (C) 2011 - 2013 BMW Car IT GmbH
-  %%
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  #L%
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<artifactId>java</artifactId>
-	<modelVersion>4.0.0</modelVersion>
-	<packaging>pom</packaging>
-	<name>${project.groupId}:${project.artifactId}</name>
-
-	<parent>
-		<groupId>io.joynr</groupId>
-		<artifactId>joynr</artifactId>
-		<version>0.14.1</version>
-		<relativePath>../pom.xml</relativePath>
-	</parent>
-
-	<modules>
-		<module>backend-services</module>
-		<module>common</module>
-		<module>core</module>
-		<module>javaapi</module>
-		<module>messaging</module>
-		<module>integration-tests</module>
-	</modules>
-	<profiles>
-		<profile>
-			<id>findbugs</id>
-			<build>
-				<plugins>
-					<plugin>
-						<groupId>org.codehaus.mojo</groupId>
-						<artifactId>findbugs-maven-plugin</artifactId>
-					</plugin>
-				</plugins>
-			</build>
-		</profile>
-	</profiles>
-	<dependencies>
-		<dependency>
-			<groupId>com.google.code.findbugs</groupId>
-			<artifactId>jsr305</artifactId>
-			<scope>provided</scope>
-		</dependency>
-		<dependency>
-			<groupId>com.google.code.findbugs</groupId>
-			<artifactId>annotations</artifactId>
-			<!-- <scope>provided</scope> -->
-		</dependency>
-		<dependency>
-			<groupId>org.slf4j</groupId>
-			<artifactId>slf4j-api</artifactId>
-		</dependency>
-        <dependency>
-            <groupId>org.apache.logging.log4j</groupId>
-            <artifactId>log4j-slf4j-impl</artifactId>
-            <version>2.0-rc1</version>
-            <scope>test</scope>
-        </dependency>
-	</dependencies>
-
-	<build>
-		<plugins>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-compiler-plugin</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>com.googlecode.maven-java-formatter-plugin</groupId>
-				<artifactId>maven-java-formatter-plugin</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-checkstyle-plugin</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-javadoc-plugin</artifactId>
-				<version>2.10.3</version>
-				<configuration>
-					<verbose>true</verbose>
-					<failOnError>true</failOnError>
-					<sourcepath>${basedir}</sourcepath>
-					<sourceFileExcludes>
-						<exclude>**/src/test/**/*.java</exclude>
-						<exclude>integration-tests/src/main/**/*.java</exclude>
-						<!-- following files will be quelled, since the package-info is duplicated -->
-						<exclude>backend-services/capabilities-directory/src/main/java/io/joynr/endpoints/package-info.java</exclude>
-						<exclude>backend-services/discovery-directory-servlet/src/main/java/io/joynr/servlet/package-info.java</exclude>
-						<exclude>common/infrastructure-common/src/main/java/io/joynr/arbitration/package-info.java</exclude>
-						<exclude>common/infrastructure-common/src/main/java/io/joynr/capabilities/package-info.java</exclude>
-						<exclude>common/infrastructure-common/src/main/java/io/joynr/common/package-info.java</exclude>
-						<exclude>common/infrastructure-common/src/main/java/io/joynr/messaging/package-info.java</exclude>
-						<exclude>core/joynr-types/src/main/java/io/joynr/dispatcher/rpc/package-info.java</exclude>
-						<exclude>javaapi/src/main/java/io/joynr/provider/package-info.java</exclude>
-						<exclude>javaapi/src/main/java/io/joynr/proxy/package-info.java</exclude>
-						<exclude>javaapi/src/main/java/io/joynr/pubsub/package-info.java</exclude>
-						<exclude>javaapi/src/main/java/io/joynr/pubsub/publication/package-info.java</exclude>
-						<exclude>javaapi/src/main/java/io/joynr/pubsub/subscription/package-info.java</exclude>
-						<exclude>messaging/bounceproxy-controller-service/src/main/java/io/joynr/messaging/info/package-info.java</exclude>
-						<exclude>messaging/bounceproxy-controller-service/src/main/java/io/joynr/messaging/service/package-info.java</exclude>
-						<exclude>messaging/bounceproxy/bounceproxy-controller-clustered/src/main/java/io/joynr/messaging/bounceproxy/controller/runtime/package-info.java</exclude>
-						<exclude>messaging/bounceproxy/bounceproxy-controller/src/main/java/io/joynr/messaging/bounceproxy/controller/runtime/package-info.java</exclude>
-						<exclude>messaging/messaging-common/src/main/java/io/joynr/messaging/package-info.java</exclude>
-						<exclude>messaging/messaging-common/src/main/java/io/joynr/runtime/package-info.java</exclude>
-						<exclude>messaging/messaging-service/src/main/java/io/joynr/messaging/service/package-info.java</exclude>
-						<exclude>messaging/messaging-servlet/src/main/java/io/joynr/dispatcher/package-info.java</exclude>
-						<exclude>messaging/messaging-servlet/src/main/java/io/joynr/messaging/package-info.java</exclude>
-						<exclude>messaging/messaging-servlet/src/main/java/io/joynr/runtime/package-info.java</exclude>
-						<exclude>messaging/service-common/src/main/java/io/joynr/messaging/datatypes/package-info.java</exclude>
-						<exclude>messaging/service-common/src/main/java/io/joynr/messaging/info/package-info.java</exclude>
-					</sourceFileExcludes>
-					<detectJavaApiLink>true</detectJavaApiLink>
-					<detectLinks>true</detectLinks>
-					<additionalDependencies>
-						<additionalDependency>
-							<groupId>org.hamcrest</groupId>
-							<artifactId>hamcrest-core</artifactId>
-							<version>1.3</version>
-						</additionalDependency>
-						<additionalDependency>
-							<groupId>junit</groupId>
-							<artifactId>junit</artifactId>
-							<version>4.11</version>
-						</additionalDependency>
-						<additionalDependency>
-							<groupId>io.joynr.java</groupId>
-							<artifactId>javaapi</artifactId>
-							<version>${project.version}</version>
-							<type>test-jar</type>
-						</additionalDependency>
-					</additionalDependencies>
-				</configuration>
-				<executions>
-					<execution>
-						<id>aggregate</id>
-						<phase>site</phase>
-						<goals>
-							<goal>aggregate-jar</goal>
-						</goals>
-					</execution>
-				</executions>
-			</plugin>
-		</plugins>
-	</build>
-</project>
+<!--
+  #%L
+  %%
+  Copyright (C) 2011 - 2013 BMW Car IT GmbH
+  %%
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  #L%
+  -->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<artifactId>java</artifactId>
+	<modelVersion>4.0.0</modelVersion>
+	<packaging>pom</packaging>
+	<name>${project.groupId}:${project.artifactId}</name>
+
+	<parent>
+		<groupId>io.joynr</groupId>
+		<artifactId>joynr</artifactId>
+		<version>0.14.1</version>
+		<relativePath>../pom.xml</relativePath>
+	</parent>
+
+	<modules>
+		<module>backend-services</module>
+		<module>common</module>
+		<module>core</module>
+		<module>javaapi</module>
+		<module>messaging</module>
+		<module>integration-tests</module>
+	</modules>
+	<profiles>
+		<profile>
+			<id>findbugs</id>
+			<build>
+				<plugins>
+					<plugin>
+						<groupId>org.codehaus.mojo</groupId>
+						<artifactId>findbugs-maven-plugin</artifactId>
+					</plugin>
+				</plugins>
+			</build>
+		</profile>
+		<profile>
+			<!-- Build and joynr lib only -->
+			<id>joynr-lib</id>
+			<modules>
+				<module>common</module>
+				<module>core</module>
+				<module>javaapi</module>
+				<module>messaging</module>
+			</modules>
+		</profile>
+	</profiles>
+	<dependencies>
+		<dependency>
+			<groupId>com.google.code.findbugs</groupId>
+			<artifactId>jsr305</artifactId>
+			<scope>provided</scope>
+		</dependency>
+		<dependency>
+			<groupId>com.google.code.findbugs</groupId>
+			<artifactId>annotations</artifactId>
+			<!-- <scope>provided</scope> -->
+		</dependency>
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>slf4j-api</artifactId>
+		</dependency>
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-slf4j-impl</artifactId>
+            <version>2.0-rc1</version>
+            <scope>test</scope>
+        </dependency>
+	</dependencies>
+
+	<build>
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-compiler-plugin</artifactId>
+			</plugin>
+			<plugin>
+				<groupId>com.googlecode.maven-java-formatter-plugin</groupId>
+				<artifactId>maven-java-formatter-plugin</artifactId>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-checkstyle-plugin</artifactId>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-javadoc-plugin</artifactId>
+				<version>2.10.3</version>
+				<configuration>
+					<verbose>true</verbose>
+					<failOnError>true</failOnError>
+					<sourcepath>${basedir}</sourcepath>
+					<sourceFileExcludes>
+						<exclude>**/src/test/**/*.java</exclude>
+						<exclude>integration-tests/src/main/**/*.java</exclude>
+						<!-- following files will be quelled, since the package-info is duplicated -->
+						<exclude>backend-services/capabilities-directory/src/main/java/io/joynr/endpoints/package-info.java</exclude>
+						<exclude>backend-services/discovery-directory-servlet/src/main/java/io/joynr/servlet/package-info.java</exclude>
+						<exclude>common/infrastructure-common/src/main/java/io/joynr/arbitration/package-info.java</exclude>
+						<exclude>common/infrastructure-common/src/main/java/io/joynr/capabilities/package-info.java</exclude>
+						<exclude>common/infrastructure-common/src/main/java/io/joynr/common/package-info.java</exclude>
+						<exclude>common/infrastructure-common/src/main/java/io/joynr/messaging/package-info.java</exclude>
+						<exclude>core/joynr-types/src/main/java/io/joynr/dispatcher/rpc/package-info.java</exclude>
+						<exclude>javaapi/src/main/java/io/joynr/provider/package-info.java</exclude>
+						<exclude>javaapi/src/main/java/io/joynr/proxy/package-info.java</exclude>
+						<exclude>javaapi/src/main/java/io/joynr/pubsub/package-info.java</exclude>
+						<exclude>javaapi/src/main/java/io/joynr/pubsub/publication/package-info.java</exclude>
+						<exclude>javaapi/src/main/java/io/joynr/pubsub/subscription/package-info.java</exclude>
+						<exclude>messaging/bounceproxy-controller-service/src/main/java/io/joynr/messaging/info/package-info.java</exclude>
+						<exclude>messaging/bounceproxy-controller-service/src/main/java/io/joynr/messaging/service/package-info.java</exclude>
+						<exclude>messaging/bounceproxy/bounceproxy-controller-clustered/src/main/java/io/joynr/messaging/bounceproxy/controller/runtime/package-info.java</exclude>
+						<exclude>messaging/bounceproxy/bounceproxy-controller/src/main/java/io/joynr/messaging/bounceproxy/controller/runtime/package-info.java</exclude>
+						<exclude>messaging/messaging-common/src/main/java/io/joynr/messaging/package-info.java</exclude>
+						<exclude>messaging/messaging-common/src/main/java/io/joynr/runtime/package-info.java</exclude>
+						<exclude>messaging/messaging-service/src/main/java/io/joynr/messaging/service/package-info.java</exclude>
+						<exclude>messaging/messaging-servlet/src/main/java/io/joynr/dispatcher/package-info.java</exclude>
+						<exclude>messaging/messaging-servlet/src/main/java/io/joynr/messaging/package-info.java</exclude>
+						<exclude>messaging/messaging-servlet/src/main/java/io/joynr/runtime/package-info.java</exclude>
+						<exclude>messaging/service-common/src/main/java/io/joynr/messaging/datatypes/package-info.java</exclude>
+						<exclude>messaging/service-common/src/main/java/io/joynr/messaging/info/package-info.java</exclude>
+					</sourceFileExcludes>
+					<detectJavaApiLink>true</detectJavaApiLink>
+					<detectLinks>true</detectLinks>
+					<additionalDependencies>
+						<additionalDependency>
+							<groupId>org.hamcrest</groupId>
+							<artifactId>hamcrest-core</artifactId>
+							<version>1.3</version>
+						</additionalDependency>
+						<additionalDependency>
+							<groupId>junit</groupId>
+							<artifactId>junit</artifactId>
+							<version>4.11</version>
+						</additionalDependency>
+						<additionalDependency>
+							<groupId>io.joynr.java</groupId>
+							<artifactId>javaapi</artifactId>
+							<version>${project.version}</version>
+							<type>test-jar</type>
+						</additionalDependency>
+					</additionalDependencies>
+				</configuration>
+				<executions>
+					<execution>
+						<id>aggregate</id>
+						<phase>site</phase>
+						<goals>
+							<goal>aggregate-jar</goal>
+						</goals>
+					</execution>
+				</executions>
+			</plugin>
+		</plugins>
+	</build>
+</project>
diff --git a/joynr-core-lib/.gitignore b/joynr-core-lib/.gitignore
new file mode 100644
index 0000000..24d6437
--- /dev/null
+++ b/joynr-core-lib/.gitignore
@@ -0,0 +1 @@
+/target/
diff --git a/joynr-core-lib/pom.xml b/joynr-core-lib/pom.xml
new file mode 100644
index 0000000..953df69
--- /dev/null
+++ b/joynr-core-lib/pom.xml
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>joynr</artifactId>
+        <groupId>io.joynr</groupId>
+        <version>0.14.1</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>io.joynr.joynr-core-lib</groupId>
+    <artifactId>joynr-core-lib</artifactId>
+    
+    <dependencies>
+		<dependency>
+			<groupId>io.joynr.java.core</groupId>
+			<artifactId>libjoynr-asyncipc-runtime</artifactId>
+			<version>${project.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>io.joynr.java.common</groupId>
+			<artifactId>access-control-common</artifactId>
+			<version>${project.version}</version>
+		</dependency>
+    </dependencies>
+
+    <build>
+		  <plugins>
+		    <plugin>
+		        <groupId>org.apache.maven.plugins</groupId>
+		        <artifactId>maven-shade-plugin</artifactId>
+		        <version>2.4.3</version>
+		        <executions>
+		          <execution>
+		            <phase>package</phase>
+		            <goals>
+		              <goal>shade</goal>
+		            </goals>
+		            <configuration>
+		            	<artifactSet>
+							<excludes>
+								<exclude>com/**</exclude>
+								<exclude>edu/**</exclude>
+								<exclude>javassist/**</exclude>
+								<exclude>javax/**</exclude>
+								<exclude>net/**</exclude>
+								<exclude>org/**</exclude>
+							</excludes>
+						</artifactSet>
+		            </configuration>
+		          </execution>
+		        </executions>
+		      </plugin>
+	    </plugins>
+    </build>
+
+</project>
\ No newline at end of file
diff --git a/pom.xml b/pom.xml
index 4f5dfbb..8f37879 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,1512 +1,1519 @@
-<!--
-  #%L
-  %%
-  Copyright (C) 2011 - 2013 BMW Car IT GmbH
-  %%
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  #L%
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<modelVersion>4.0.0</modelVersion>
-	<groupId>io.joynr</groupId>
-	<artifactId>joynr</artifactId>
-	<version>0.14.1</version>
-	<packaging>pom</packaging>
-	<name>${project.groupId}:${project.artifactId}</name>
-	<url>http://joynr.io</url>
-	<description>joynr.io communications framework</description>
-	<developers>
-		<developer>
-			<organization>BMW Car IT GmbH</organization>
-			<organizationUrl>http://www.bmw-carit.com</organizationUrl>
-		</developer>
-	</developers>
-
-	<scm>
-		<connection>scm:git:git@github.com:bmwcarit/joynr.git</connection>
-		<developerConnection>scm:git:git@github.com:bmwcarit/joynr.git</developerConnection>
-		<url>git@github.com:bmwcarit/joynr</url>
-	</scm>
-
-	<licenses>
-		<license>
-			<name>The Apache Software License, Version 2.0</name>
-			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-			<distribution>repo</distribution>
-		</license>
-	</licenses>
-
-	<modules>
-		<!--
-			ATTENTION: Order of modules matters!
-			Tools must be build first in order to have build-resources available right
-			at the beginning of the build.
-		-->
-		<module>tools</module>
-		<module>basemodel</module>
-		<module>java</module>
-		<module>cpp</module>
-		<module>examples</module>
-		<module>inter-language-test</module>
-	</modules>
-
-	<profiles>
-		<profile>
-			<!-- Build and test javascript -->
-			<id>javascript</id>
-			<modules>
-				<module>javascript</module>
-			</modules>
-		</profile>
-		<profile>
-			<!-- Build and test Android distribution -->
-			<id>android</id>
-			<modules>
-				<module>android</module>
-			</modules>
-		</profile>
-		<profile>
-			<!--
-				This profile is extended in several submodules with packaging type WAR
-				to disable deployment of WAR files containing third-party software to
-				Sonatype repositories.
-			-->
-			<id>deploy-artifacts-to-sonatype</id>
-			<activation>
-				<!--
-					maven-jgitflow-plugin will set the performRelease property during
-					release and thus automatically activate this profile during release.
-					NOTE: You need to install GPG [1] and publish your public key to a key
-					server.
-					The passphrase must be specified on the command line using -Dgpg.passphrase=thephrase
-					[2].
-					Follow instructions [3] to verify dependencies.
-					[1] https://docs.sonatype.org/display/Repository/How+To+Generate+PGP+Signatures+With+Maven
-					[2] http://maven.apache.org/plugins/maven-gpg-plugin/usage.html
-					[3] http://branchandbound.net/blog/security/2012/08/verify-dependencies-using-pgp/
-				-->
-				<property>
-					<name>performRelease</name>
-					<value>true</value>
-				</property>
-			</activation>
-			<properties>
-				<!--
-					This property will skip the execution of the maven-assembly-plugin during
-					deployment to Sonatype repositories. The plugin builds jar-with-dependencies
-					including third-party software that should not be deployed by this project.
-
-					Following jar-with-dependencies are created during build:
-					java/backend-services/channelurldirectory/target/deploy/channelurldirectory-jar-with-dependencies.jar
-					java/backend-services/capabilitiesdirectory/target/deploy/capabilitiesdirectory-jar-with-dependencies.jar
-					java/backend-services/discovery/target/deploy/discovery-jar-with-dependencies.jar
-				-->
-				<assembly.skipAssembly>true</assembly.skipAssembly>
-			</properties>
-			<distributionManagement>
-				<snapshotRepository>
-					<id>sonatype-nexus-snapshots</id>
-					<name>Sonatype Nexus Snapshots</name>
-					<url>https://oss.sonatype.org/content/repositories/snapshots/</url>
-				</snapshotRepository>
-				<repository>
-					<id>sonatype-nexus-staging</id>
-					<name>Nexus Release Repository</name>
-					<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
-				</repository>
-			</distributionManagement>
-			<build>
-				<plugins>
-					<plugin>
-						<groupId>org.apache.maven.plugins</groupId>
-						<artifactId>maven-gpg-plugin</artifactId>
-						<executions>
-							<execution>
-								<id>sign-artifacts</id>
-								<phase>verify</phase>
-								<goals>
-									<goal>sign</goal>
-								</goals>
-							</execution>
-						</executions>
-						<configuration>
-							<keyname>joynr@bmw-carit.de</keyname>
-						</configuration>
-					</plugin>
-					<plugin>
-						<groupId>org.apache.maven.plugins</groupId>
-						<artifactId>maven-source-plugin</artifactId>
-						<executions>
-							<execution>
-								<id>attach-sources</id>
-								<goals>
-									<goal>jar-no-fork</goal>
-								</goals>
-							</execution>
-						</executions>
-					</plugin>
-					<plugin>
-						<groupId>org.apache.maven.plugins</groupId>
-						<artifactId>maven-javadoc-plugin</artifactId>
-						<executions>
-							<execution>
-								<id>attach-javadocs</id>
-								<goals>
-									<goal>jar</goal>
-								</goals>
-							</execution>
-						</executions>
-					</plugin>
-				</plugins>
-			</build>
-		</profile>
-		<profile>
-			<id>continuous-build-configuration</id>
-			<activation>
-				<property>
-					<name>JOYNR_CI</name>
-				</property>
-			</activation>
-			<properties>
-				<JOYNR_SERVER>joyntest:8080</JOYNR_SERVER>
-				<JOYNR_TEST_SERVER>joyntest:8080</JOYNR_TEST_SERVER>
-			</properties>
-		</profile>
-		<profile>
-			<!--
-				NOTE: if you change activation or the profile ID here, your also must
-				change it in the following child modules that extend this profile:
-				* io.joynr.java.messaging.bounceproxy:bounceproxy-ui
-			-->
-			<id>carit-copyright</id>
-			<build>
-				<plugins>
-					<plugin>
-						<groupId>org.codehaus.mojo</groupId>
-						<artifactId>license-maven-plugin</artifactId>
-						<configuration>
-							<licenseName>apache_v2</licenseName>
-							<inceptionYear>2011</inceptionYear>
-							<organizationName>BMW Car IT GmbH</organizationName>
-							<descriptionTemplate>/license/header-template.ftl</descriptionTemplate>
-							<extraExtensions>
-								<fidl>java</fidl>
-							</extraExtensions>
-						</configuration>
-						<executions>
-							<execution>
-								<id>add-third-party</id>
-								<phase>validate</phase>
-								<goals>
-									<goal>add-third-party</goal>
-								</goals>
-							</execution>
-							<execution>
-								<id>download-licenses</id>
-								<phase>validate</phase>
-								<goals>
-									<goal>download-licenses</goal>
-								</goals>
-							</execution>
-						</executions>
-						<dependencies>
-							<dependency>
-								<groupId>de.bmw.joynr</groupId>
-								<artifactId>license-configuration</artifactId>
-								<version>${licenseConfigurationVersion}</version>
-							</dependency>
-						</dependencies>
-					</plugin>
-					<plugin>
-						<groupId>org.jasig.maven</groupId>
-						<artifactId>maven-notice-plugin</artifactId>
-						<version>1.0.6</version>
-						<configuration>
-							<noticeTemplate>/notice/NOTICE-JOYNR.template</noticeTemplate>
-							<licenseMapping>
-								<param>/notice/license-mappings.xml</param>
-								<param>/notice/license-mappings-local.xml</param>
-							</licenseMapping>
-						</configuration>
-						<dependencies>
-							<dependency>
-								<groupId>de.bmw.joynr</groupId>
-								<artifactId>license-configuration</artifactId>
-								<version>${licenseConfigurationVersion}</version>
-							</dependency>
-						</dependencies>
-					</plugin>
-				</plugins>
-			</build>
-		</profile>
-		<profile>
-			<id>carit-license</id>
-			<properties>
-				<!--
-					For unknown reasons useLicensesConfigFile and licensesConfigFile
-					configuration properties must be set as global properties. It is
-					not sufficient to specify them directly in the plugin configuration.
-				-->
-				<license.useLicensesConfigFile>true</license.useLicensesConfigFile>
-				<license.licensesConfigFile>classpath://license/missinglicenses.xml</license.licensesConfigFile>
-			</properties>
-			<build>
-				<plugins>
-					<plugin>
-						<groupId>org.codehaus.mojo</groupId>
-						<artifactId>license-maven-plugin</artifactId>
-						<!-- overriding version defined in plugin management -->
-						<version>1.3-JOYN.2</version>
-						<configuration>
-							<licenseName>apache_v2</licenseName>
-							<inceptionYear>2011</inceptionYear>
-							<organizationName>BMW Car IT GmbH</organizationName>
-							<descriptionTemplate>/license/header-template.ftl</descriptionTemplate>
-							<includes>
-								<include>**/*pom.xml</include>
-							</includes>
-							<extraExtensions>
-								<fidl>java</fidl>
-							</extraExtensions>
-							<licenseMerges>
-								<licenseMerge>Apache-2.0|The Apache Software License, Version 2.0|Apache
-									License, Version 2.0|Apache License, Version 2.0|Apache License V2.0|Apache 2|ASF
-									2.0|apache-2.0|Apache-2|Apache 2.0|Apache License 2.0|Apache
-									Software License - Version 2.0|Apache Software License - Version 2.0</licenseMerge>
-								<licenseMerge>CDDL-1.0|Common Development and Distribution License (CDDL) v1.0</licenseMerge>
-								<licenseMerge>MIT|The MIT License|MIT License</licenseMerge>
-								<licenseMerge>LGPL-2.1|Lesser Gnu Public License (LGPL), Version 2.1</licenseMerge>
-							</licenseMerges>
-							<generateBundle>true</generateBundle>
-							<fileTemplate>license/joynr-third-party-file.ftl</fileTemplate>
-							<bundleThirdPartyPath>${project.artifactId}-LICENSES.html</bundleThirdPartyPath>
-							<!--
-								For unknown reasons useLicensesConfigFile and licensesConfigFile
-								configuration properties must be set as global properties. It is
-								not sufficient to specify them directly in the plugin configuration.
-							-->
-							<useLicensesConfigFile>true</useLicensesConfigFile>
-							<licensesConfigFile>classpath://license/missinglicenses.xml</licensesConfigFile>
-							<excludedScopes>test</excludedScopes>
-							<licenseResolver>classpath://license/resolver</licenseResolver>
-							<!-- MissingFile is now replaced by the licenses config file -->
-							<useMissingFile>true</useMissingFile>
-							<failIfWarning>false</failIfWarning>
-							<encoding>UTF-8</encoding>
-							<canUpdateCopyright>true</canUpdateCopyright>
-						</configuration>
-						<dependencies>
-							<dependency>
-								<groupId>de.bmw.joynr</groupId>
-								<artifactId>license-configuration</artifactId>
-								<version>${licenseConfigurationVersion}</version>
-							</dependency>
-						</dependencies>
-					</plugin>
-				</plugins>
-			</build>
-		</profile>
-		<profile>
-			<id>no-checkstyle</id>
-			<build>
-				<pluginManagement>
-					<plugins>
-						<plugin>
-							<groupId>org.apache.maven.plugins</groupId>
-							<artifactId>maven-checkstyle-plugin</artifactId>
-							<executions>
-								<execution>
-									<phase>none</phase>
-								</execution>
-							</executions>
-						</plugin>
-					</plugins>
-				</pluginManagement>
-			</build>
-		</profile>
-		<profile>
-			<id>no-java-formatter</id>
-			<build>
-				<pluginManagement>
-					<plugins>
-						<plugin>
-							<groupId>com.googlecode.maven-java-formatter-plugin</groupId>
-							<artifactId>maven-java-formatter-plugin</artifactId>
-							<executions>
-								<execution>
-									<phase>none</phase>
-								</execution>
-							</executions>
-						</plugin>
-					</plugins>
-				</pluginManagement>
-			</build>
-		</profile>
-		<profile>
-			<id>no-tests</id>
-			<properties>
-				<maven.test.skip>true</maven.test.skip>
-			</properties>
-		</profile>
-		<profile>
-			<id>no-license-and-notice</id>
-			<properties>
-				<skip.unpack-license-info>true</skip.unpack-license-info>
-				<skip.copy-notice-file>true</skip.copy-notice-file>
-			</properties>
-		</profile>
-	</profiles>
-
-	<properties>
-		<JOYNR_SERVER>localhost:8080</JOYNR_SERVER>
-		<JOYNR_TEST_SERVER>localhost:8080</JOYNR_TEST_SERVER>
-		<timestamp>${maven.build.timestamp}</timestamp>
-		<maven.build.timestamp.format>yyyyMMdd-HHmmss</maven.build.timestamp.format>
-		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-		<licenseConfigurationVersion>1.0.10</licenseConfigurationVersion>
-		<!--
-			Those versions should not be used outside of the superpom. All dependencies
-			that need those version numbers should be defined in the dependencyManagement
-			here, and should not have a version tag in the the pom-files where they
-			are referenced.
-		-->
-		<jersey.version>1.17</jersey.version>
-		<jackson.version>2.6.2</jackson.version>
-		<guice.version>3.0</guice.version>
-		<jetty.version>9.2.13.v20150730</jetty.version>
-		<tycho.version>0.24.0</tycho.version>
-		<hibernate.version>4.3.8.Final</hibernate.version>
-		<android.platform.version>5.0.1_r2</android.platform.version>
-		<android.platform.level>21</android.platform.level>
-		<javaassist.version>3.12.1.GA</javaassist.version>
-		<skipTests>true</skipTests>
-		<franca.version>0.10.0</franca.version>
-		<xtend.version>2.8.4</xtend.version>
-		<xtext.version>2.8.4</xtext.version>
-	</properties>
-
-	<!--
-		specify dependency versions and properties here to share this information
-		with all children that use the specified dependency
-	-->
-	<dependencyManagement>
-		<dependencies>
-			<!-- The Android SDK must be deployed to the local repository using
-			     https://github.com/simpligility/maven-android-sdk-deployer
-			-->
-			<dependency>
-				<groupId>android</groupId>
-				<artifactId>android</artifactId>
-				<version>${android.platform.version}</version>
-				<scope>provided</scope>
-				<exclusions>
-					<exclusion>
-						<artifactId>xmlParserAPIs</artifactId>
-						<groupId>xerces</groupId>
-					</exclusion>
-				</exclusions>
-			</dependency>
-			<dependency>
-				<groupId>javassist</groupId>
-				<artifactId>javassist</artifactId>
-				<version>${javaassist.version}</version>
-				<classifier>sources</classifier>
-			</dependency>
-			<dependency>
-				<groupId>javassist</groupId>
-				<artifactId>javassist</artifactId>
-				<version>${javaassist.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>junit</groupId>
-				<artifactId>junit</artifactId>
-				<version>4.11</version>
-				<scope>test</scope>
-			</dependency>
-			<dependency>
-				<groupId>xml-apis</groupId>
-				<artifactId>xml-apis</artifactId>
-				<version>1.4.01</version>
-			</dependency>
-			<dependency>
-				<groupId>com.google.code.findbugs</groupId>
-				<artifactId>jsr305</artifactId>
-				<version>2.0.1</version>
-			</dependency>
-			<dependency>
-				<groupId>com.google.code.findbugs</groupId>
-				<artifactId>annotations</artifactId>
-				<version>2.0.1</version>
-			</dependency>
-			<dependency>
-				<groupId>commons-logging</groupId>
-				<artifactId>commons-logging</artifactId>
-				<version>1.0.4</version>
-			</dependency>
-			<dependency>
-				<groupId>org.eclipse.jetty</groupId>
-				<artifactId>jetty-servlet</artifactId>
-				<version>${jetty.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>org.eclipse.jetty</groupId>
-				<artifactId>jetty-server</artifactId>
-				<version>${jetty.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>org.eclipse.jetty</groupId>
-				<artifactId>jetty-webapp</artifactId>
-				<version>${jetty.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>org.eclipse.jetty.websocket</groupId>
-				<artifactId>websocket-client</artifactId>
-				<version>${jetty.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>org.eclipse.jetty.websocket</groupId>
-				<artifactId>websocket-server</artifactId>
-				<version>${jetty.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>com.google.inject</groupId>
-				<artifactId>guice</artifactId>
-				<version>${guice.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>com.google.code.gson</groupId>
-				<artifactId>gson</artifactId>
-				<version>2.1</version>
-			</dependency>
-			<dependency>
-				<groupId>com.google.guava</groupId>
-				<artifactId>guava</artifactId>
-				<version>11.0.2</version>
-			</dependency>
-			<dependency>
-				<groupId>com.sun.jersey</groupId>
-				<artifactId>jersey-json</artifactId>
-				<version>${jersey.version}</version>
-				<scope>compile</scope>
-			</dependency>
-			<dependency>
-				<groupId>com.sun.jersey</groupId>
-				<artifactId>jersey-bundle</artifactId>
-				<version>${jersey.version}</version>
-				<scope>compile</scope>
-			</dependency>
-			<dependency>
-				<groupId>com.sun.jersey</groupId>
-				<artifactId>jersey-server</artifactId>
-				<version>${jersey.version}</version>
-				<scope>compile</scope>
-			</dependency>
-			<dependency>
-				<groupId>org.eclipse.xtend</groupId>
-				<artifactId>org.eclipse.xtend.lib</artifactId>
-				<version>${xtend.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>org.eclipse.xtend</groupId>
-				<artifactId>org.eclipse.xtend.core</artifactId>
-				<version>${xtend.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>org.eclipse.xtext</groupId>
-				<artifactId>org.eclipse.xtext</artifactId>
-				<version>${xtext.version}</version>
-			</dependency>
-			<!--
-				This dependecy is needed to avoid conflicts with Java 5 code (generics)
-				when pulling in transitive dependency org.apache.felix:org.osgi.foundation:1.2.0
-				that defines java.util collection classes without generics.
-				https://bugs.eclipse.org/bugs/show_bug.cgi?id=343069
-			 -->
-			<dependency>
-				<groupId>org.eclipse.equinox</groupId>
-				<artifactId>org.eclipse.equinox.app</artifactId>
-				<version>[1.3.1,2.0.0)</version>
-			</dependency>
-			<dependency>
-				<groupId>org.eclipse.emf</groupId>
-				<artifactId>codegen</artifactId>
-				<version>2.2.3</version>
-			</dependency>
-			<dependency>
-				<groupId>org.eclipse.equinox</groupId>
-				<artifactId>app</artifactId>
-				<version>1.0.0-v20070606</version>
-			</dependency>
-			<dependency>
-				<groupId>com.sun.jersey.contribs</groupId>
-				<artifactId>jersey-multipart</artifactId>
-				<version>${jersey.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>com.sun.jersey</groupId>
-				<artifactId>jersey-servlet</artifactId>
-				<version>${jersey.version}</version>
-				<scope>compile</scope>
-			</dependency>
-			<dependency>
-				<groupId>com.sun.jersey</groupId>
-				<artifactId>jersey-client</artifactId>
-				<version>${jersey.version}</version>
-				<scope>compile</scope>
-			</dependency>
-			<dependency>
-				<groupId>com.sun.jersey.contribs</groupId>
-				<artifactId>jersey-apache-client</artifactId>
-				<version>${jersey.version}</version>
-				<scope>compile</scope>
-			</dependency>
-			<dependency>
-				<groupId>com.sun.jersey.jersey-test-framework</groupId>
-				<artifactId>jersey-test-framework-grizzly</artifactId>
-				<version>${jersey.version}</version>
-				<scope>test</scope>
-			</dependency>
-			<dependency>
-				<groupId>com.sun.jersey.jersey-test-framework</groupId>
-				<artifactId>jersey-test-framework-grizzly2</artifactId>
-				<version>${jersey.version}</version>
-				<scope>test</scope>
-			</dependency>
-			<dependency>
-				<groupId>com.sun.jersey.contribs</groupId>
-				<artifactId>jersey-guice</artifactId>
-				<version>${jersey.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>com.fasterxml.jackson.core</groupId>
-				<artifactId>jackson-core</artifactId>
-				<version>${jackson.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>com.fasterxml.jackson.core</groupId>
-				<artifactId>jackson-databind</artifactId>
-				<version>${jackson.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>com.fasterxml.jackson.core</groupId>
-				<artifactId>jackson-annotations</artifactId>
-				<version>${jackson.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>net.logstash.log4j</groupId>
-				<artifactId>jsonevent-layout</artifactId>
-				<version>1.5</version>
-			</dependency>
-			<dependency>
-				<groupId>org.slf4j</groupId>
-				<artifactId>slf4j-api</artifactId>
-				<version>1.6.6</version>
-			</dependency>
-			<dependency>
-				<groupId>org.slf4j</groupId>
-				<artifactId>slf4j-log4j12</artifactId>
-				<version>1.6.6</version>
-			</dependency>
-			<dependency>
-				<groupId>log4j</groupId>
-				<artifactId>log4j</artifactId>
-				<version>1.2.17</version>
-			</dependency>
-			<dependency>
-				<groupId>org.slf4j</groupId>
-				<artifactId>jcl-over-slf4j</artifactId>
-				<version>1.6.6</version>
-			</dependency>
-			<dependency>
-				<groupId>com.ning</groupId>
-				<artifactId>async-http-client</artifactId>
-				<version>1.7.19</version>
-			</dependency>
-			<dependency>
-				<groupId>org.mockito</groupId>
-				<artifactId>mockito-all</artifactId>
-				<scope>test</scope>
-				<version>1.8.5</version>
-			</dependency>
-			<dependency>
-				<groupId>org.apache.httpcomponents</groupId>
-				<artifactId>httpclient</artifactId>
-				<version>4.3</version>
-				<type>test-jar</type>
-			</dependency>
-			<dependency>
-				<groupId>org.apache.httpcomponents</groupId>
-				<artifactId>httpclient</artifactId>
-				<version>4.3</version>
-			</dependency>
-			<dependency>
-				<groupId>org.apache.httpcomponents</groupId>
-				<artifactId>httpclient-android</artifactId>
-				<version>4.3.3</version>
-			</dependency>
-			<dependency>
-				<groupId>org.apache.httpcomponents</groupId>
-				<artifactId>httpmime</artifactId>
-				<version>4.3</version>
-			</dependency>
-			<dependency>
-				<groupId>org.jboss.shrinkwrap.resolver</groupId>
-				<artifactId>shrinkwrap-resolver-bom</artifactId>
-				<version>2.0.0-alpha-2</version>
-				<scope>test</scope>
-				<type>pom</type>
-			</dependency>
-			<dependency>
-				<groupId>org.jboss.arquillian</groupId>
-				<artifactId>arquillian-bom</artifactId>
-				<version>1.0.2.Final</version>
-				<scope>import</scope>
-				<type>pom</type>
-			</dependency>
-			<dependency>
-				<groupId>com.fasterxml.jackson.jaxrs</groupId>
-				<artifactId>jackson-jaxrs-json-provider</artifactId>
-				<version>${jackson.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>com.sun.jersey</groupId>
-				<artifactId>jersey-core</artifactId>
-				<version>${jersey.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>org.hamcrest</groupId>
-				<artifactId>hamcrest-core</artifactId>
-				<version>1.3</version>
-			</dependency>
-			<dependency>
-				<groupId>org.hamcrest</groupId>
-				<artifactId>hamcrest-library</artifactId>
-				<version>1.3</version>
-			</dependency>
-			<dependency>
-				<groupId>com.jayway.restassured</groupId>
-				<artifactId>rest-assured</artifactId>
-				<version>1.8.1</version>
-				<exclusions>
-					<!-- Exclude Groovy because of classpath issue -->
-					<exclusion>
-						<groupId>org.codehaus.groovy</groupId>
-						<artifactId>groovy</artifactId>
-					</exclusion>
-				</exclusions>
-			</dependency>
-			<!-- included to prevent classpath issue with rest-asured -->
-			<dependency>
-				<groupId>org.codehaus.groovy</groupId>
-				<artifactId>groovy-all</artifactId>
-				<!-- Needs to be the same version that REST Assured depends on -->
-				<version>2.1.2</version>
-				<scope>test</scope>
-			</dependency>
-			<dependency>
-				<groupId>org.reflections</groupId>
-				<artifactId>reflections</artifactId>
-				<version>0.9.8</version>
-			</dependency>
-			<dependency>
-				<groupId>commons-codec</groupId>
-				<artifactId>commons-codec</artifactId>
-				<version>1.4</version>
-			</dependency>
-			<dependency>
-				<groupId>javax.servlet</groupId>
-				<artifactId>javax.servlet-api</artifactId>
-				<version>3.1.0</version>
-			</dependency>
-			<dependency>
-				<groupId>org.mockito</groupId>
-				<artifactId>mockito-core</artifactId>
-				<version>1.9.5</version>
-			</dependency>
-			<dependency>
-				<groupId>commons-io</groupId>
-				<artifactId>commons-io</artifactId>
-				<version>2.4</version>
-			</dependency>
-			<dependency>
-				<groupId>org.franca</groupId>
-				<artifactId>org.franca.core.dsl</artifactId>
-				<version>${franca.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>org.franca</groupId>
-				<artifactId>org.franca.core</artifactId>
-				<version>${franca.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>org.franca</groupId>
-				<artifactId>org.franca.deploymodel.dsl</artifactId>
-				<version>${franca.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>org.genivi.commonapi</groupId>
-				<artifactId>core</artifactId>
-				<version>2.1.4</version>
-			</dependency>
-			<dependency>
-				<groupId>org.genivi.commonapi</groupId>
-				<artifactId>dbus</artifactId>
-				<version>2.1.4</version>
-			</dependency>
-			<dependency>
-				<groupId>net.sf.ehcache</groupId>
-				<artifactId>ehcache</artifactId>
-				<version>2.8.1</version>
-			</dependency>
-			<dependency>
-				<groupId>org.hibernate</groupId>
-				<artifactId>hibernate-core</artifactId>
-				<version>${hibernate.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>org.hibernate</groupId>
-				<artifactId>hibernate-core</artifactId>
-				<version>${hibernate.version}</version>
-				<classifier>sources</classifier>
-			</dependency>
-			<dependency>
-				<groupId>org.hibernate</groupId>
-				<artifactId>hibernate-ehcache</artifactId>
-				<version>${hibernate.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>org.hibernate</groupId>
-				<artifactId>hibernate-entitymanager</artifactId>
-				<version>${hibernate.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>org.hibernate</groupId>
-				<artifactId>hibernate-entitymanager</artifactId>
-				<version>${hibernate.version}</version>
-				<classifier>sources</classifier>
-			</dependency>
-			<dependency>
-				<groupId>org.hibernate.javax.persistence</groupId>
-				<artifactId>hibernate-jpa-2.1-api</artifactId>
-				<version>1.0.0.Final</version>
-			</dependency>
-			<dependency>
-				<groupId>org.apache.derby</groupId>
-				<artifactId>derby</artifactId>
-				<version>10.10.1.1</version>
-			</dependency>
-			<dependency>
-				<groupId>com.google.inject.extensions</groupId>
-				<artifactId>guice-assistedinject</artifactId>
-				<version>${guice.version}</version>
-			</dependency>
-			<dependency>
-				<groupId>com.google.inject.extensions</groupId>
-				<artifactId>guice-persist</artifactId>
-				<version>${guice.version}</version>
-			</dependency>
-		</dependencies>
-	</dependencyManagement>
-
-	<dependencies>
-		<dependency>
-			<groupId>junit</groupId>
-			<artifactId>junit</artifactId>
-			<scope>test</scope>
-		</dependency>
-	</dependencies>
-
-	<build>
-		<!--
-			specify plugin versions and configuration here to apply to all submodules
-			that use the specified plugin
-		-->
-		<pluginManagement>
-			<plugins>
-				<plugin>
-					<groupId>org.codehaus.mojo</groupId>
-					<artifactId>properties-maven-plugin</artifactId>
-					<version>1.0-alpha-2</version>
-				</plugin>
-				<plugin>
-					<groupId>org.eclipse.m2e</groupId>
-					<artifactId>lifecycle-mapping</artifactId>
-					<version>1.0.0</version>
-					<configuration>
-						<lifecycleMappingMetadata>
-							<pluginExecutions>
-								<pluginExecution>
-									<pluginExecutionFilter>
-										<groupId>org.apache.maven.plugins</groupId>
-										<artifactId>maven-enforcer-plugin</artifactId>
-										<versionRange>[1.0.0,)</versionRange>
-										<goals>
-											<goal>enforce</goal>
-											<goal>display-info</goal>
-										</goals>
-									</pluginExecutionFilter>
-									<action>
-										<ignore />
-									</action>
-								</pluginExecution>
-								<pluginExecution>
-									<pluginExecutionFilter>
-										<groupId>com.googlecode.maven-java-formatter-plugin</groupId>
-										<artifactId>maven-java-formatter-plugin</artifactId>
-										<versionRange>[0.3.1,)</versionRange>
-										<goals>
-											<goal>format</goal>
-										</goals>
-									</pluginExecutionFilter>
-									<action>
-										<ignore />
-									</action>
-								</pluginExecution>
-								<pluginExecution>
-									<pluginExecutionFilter>
-										<groupId>org.apache.maven.plugins</groupId>
-										<artifactId>maven-dependency-plugin</artifactId>
-										<versionRange>[2.8,)</versionRange>
-										<goals>
-											<goal>unpack</goal>
-											<goal>copy</goal>
-										</goals>
-									</pluginExecutionFilter>
-									<action>
-										<ignore />
-									</action>
-								</pluginExecution>
-								<pluginExecution>
-									<pluginExecutionFilter>
-										<groupId>org.apache.maven.plugins</groupId>
-										<artifactId>maven-antrun-plugin</artifactId>
-										<versionRange>[1.7,)</versionRange>
-										<goals>
-											<goal>run</goal>
-										</goals>
-									</pluginExecutionFilter>
-									<action>
-										<ignore />
-									</action>
-								</pluginExecution>
-								<pluginExecution>
-									<pluginExecutionFilter>
-										<groupId>org.apache.maven.plugins</groupId>
-										<artifactId>maven-install-plugin</artifactId>
-										<versionRange>[2.5,)</versionRange>
-										<goals>
-											<goal>install-file</goal>
-										</goals>
-									</pluginExecutionFilter>
-									<action>
-										<ignore />
-									</action>
-								</pluginExecution>
-								<pluginExecution>
-									<pluginExecutionFilter>
-										<groupId>io.joynr.tools.generator</groupId>
-										<artifactId>joynr-generator-maven-plugin</artifactId>
-										<versionRange>[0.5.0,)</versionRange>
-										<goals>
-											<goal>generate</goal>
-										</goals>
-									</pluginExecutionFilter>
-									<action>
-										<execute>
-											<runOnIncremental>false</runOnIncremental>
-											<runOnConfiguration>true</runOnConfiguration>
-										</execute>
-									</action>
-								</pluginExecution>
-								<pluginExecution>
-									<pluginExecutionFilter>
-										<groupId>org.apache.maven.plugins</groupId>
-										<artifactId>maven-clean-plugin</artifactId>
-										<versionRange>[2.5,)</versionRange>
-										<goals>
-											<goal>clean</goal>
-										</goals>
-									</pluginExecutionFilter>
-									<action>
-										<execute>
-											<runOnIncremental>false</runOnIncremental>
-										</execute>
-									</action>
-								</pluginExecution>
-								<pluginExecution>
-									<pluginExecutionFilter>
-										<groupId>
-											com.simpligility.maven.plugins
-										</groupId>
-										<artifactId>
-											android-maven-plugin
-										</artifactId>
-										<versionRange>
-											[4.1.0,)
-										</versionRange>
-										<goals>
-											<goal>emma</goal>
-										</goals>
-									</pluginExecutionFilter>
-									<action>
-										<ignore></ignore>
-									</action>
-								</pluginExecution>
-								<pluginExecution>
-									<pluginExecutionFilter>
-										<groupId>
-											com.googlecode.jslint4java
-										</groupId>
-										<artifactId>
-											jslint4java-maven-plugin
-										</artifactId>
-										<versionRange>
-											[2.0.3,)
-										</versionRange>
-										<goals>
-											<goal>lint</goal>
-										</goals>
-									</pluginExecutionFilter>
-									<action>
-										<ignore></ignore>
-									</action>
-								</pluginExecution>
-							</pluginExecutions>
-						</lifecycleMappingMetadata>
-					</configuration>
-				</plugin>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-surefire-plugin</artifactId>
-					<version>2.16</version>
-					<configuration>
-						<forkCount>1</forkCount>
-						<!-- one JVM per test suite -->
-						<reuseForks>false</reuseForks>
-						<argLine>-Xmx1024m -XX:MaxPermSize=256m</argLine>
-						<skipTests>${skipTests}</skipTests>
-					</configuration>
-				</plugin>
-				<plugin>
-					<groupId>org.codehaus.mojo</groupId>
-					<artifactId>license-maven-plugin</artifactId>
-					<version>1.5</version>
-				</plugin>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-javadoc-plugin</artifactId>
-					<version>2.9.1</version>
-				</plugin>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-source-plugin</artifactId>
-					<version>2.2.1</version>
-				</plugin>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-gpg-plugin</artifactId>
-					<version>1.4</version>
-				</plugin>
-				<plugin>
-					<groupId>org.codehaus.mojo</groupId>
-					<artifactId>findbugs-maven-plugin</artifactId>
-					<version>3.0.1</version>
-					<configuration>
-						<failOnError>false</failOnError>
-						<threshold>Normal</threshold>
-						<effort>Default</effort>
-						<xmlOutput>true</xmlOutput>
-						<findbugsXmlOutput>true</findbugsXmlOutput>
-						<findbugsXmlWithMessages>true</findbugsXmlWithMessages>
-						<excludeFilterFile>findbugs/findbugs-exclude.xml</excludeFilterFile>
-					</configuration>
-					<executions>
-						<execution>
-							<phase>verify</phase>
-							<goals>
-								<goal>check</goal>
-							</goals>
-						</execution>
-					</executions>
-					<dependencies>
-						<dependency>
-							<groupId>io.joynr.tools</groupId>
-							<artifactId>build-resources</artifactId>
-							<version>${project.version}</version>
-						</dependency>
-					</dependencies>
-				</plugin>
-				<plugin>
-					<groupId>com.simpligility.maven.plugins</groupId>
-					<artifactId>android-maven-plugin</artifactId>
-					<version>4.3.0</version>
-				</plugin>
-				<plugin>
-					<groupId>org.eclipse.tycho</groupId>
-					<artifactId>tycho-maven-plugin</artifactId>
-					<extensions>true</extensions>
-					<version>${tycho.version}</version>
-				</plugin>
-				<plugin>
-					<groupId>org.eclipse.tycho</groupId>
-					<artifactId>tycho-packaging-plugin</artifactId>
-					<version>${tycho.version}</version>
-				</plugin>
-				<plugin>
-					<groupId>org.codehaus.mojo</groupId>
-					<artifactId>build-helper-maven-plugin</artifactId>
-					<version>1.7</version>
-				</plugin>
-				<plugin>
-					<groupId>org.eclipse.jetty</groupId>
-					<artifactId>jetty-maven-plugin</artifactId>
-					<version>${jetty.version}</version>
-					<dependencies>
-						<dependency>
-							<groupId>org.slf4j</groupId>
-							<artifactId>slf4j-log4j12</artifactId>
-							<version>1.6.6</version>
-						</dependency>
-					</dependencies>
-					<configuration>
-						<webApp>
-							<contextPath>/</contextPath>
-						</webApp>
-						<stopPort>9966</stopPort>
-						<stopKey>joynr</stopKey>
-						<stopWait>60</stopWait>
-						<contextHandlers>
-							<contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext">
-								<war>${project.build.directory}/bounceproxy.war</war>
-								<contextPath>/bounceproxy</contextPath>
-							</contextHandler>
-							<contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext">
-								<war>${project.build.directory}/discovery.war</war>
-								<contextPath>/discovery</contextPath>
-							</contextHandler>
-							<contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext">
-								<war>${project.build.directory}/accesscontrol.war</war>
-								<contextPath>/accesscontrol</contextPath>
-							</contextHandler>
-						</contextHandlers>
-						<systemProperties>
-							<systemProperty>
-								<name>log4j.configuration</name>
-								<value>file:${basedir}/src/main/resources/log4j.properties</value>
-							</systemProperty>
-							<systemProperty>
-								<name>joynr.servlet.hostPath</name>
-								<value>http://localhost:8080</value>
-							</systemProperty>
-							<systemProperty>
-								<name>org.atmosphere.useNative</name>
-								<value>true</value>
-							</systemProperty>
-						</systemProperties>
-					</configuration>
-				</plugin>
-				<plugin>
-					<groupId>org.eclipse.xtend</groupId>
-					<artifactId>xtend-maven-plugin</artifactId>
-					<version>${xtend.version}</version>
-				</plugin>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-clean-plugin</artifactId>
-					<version>2.5</version>
-				</plugin>
-				<plugin>
-					<groupId>org.appfuse</groupId>
-					<artifactId>maven-warpath-plugin</artifactId>
-					<version>2.0.2</version>
-				</plugin>
-				<plugin>
-					<groupId>io.joynr.tools.generator</groupId>
-					<artifactId>joynr-generator-maven-plugin</artifactId>
-					<version>${project.version}</version>
-				</plugin>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-checkstyle-plugin</artifactId>
-					<version>2.13</version>
-					<configuration>
-						<!-- configLocation is resolved from classpath -->
-						<configLocation>checkstyle/checkstyle.xml</configLocation>
-						<!--
-							suppressionsLocation is resolved from classpath and extracted
-							to ${project.build.directory}/checkstyle-suppressions.xml
-						-->
-						<suppressionsLocation>checkstyle/checkstyle-suppressions.xml</suppressionsLocation>
-					</configuration>
-					<executions>
-						<execution>
-							<goals>
-								<goal>check</goal>
-							</goals>
-						</execution>
-					</executions>
-					<dependencies>
-						<dependency>
-							<groupId>io.joynr.tools</groupId>
-							<artifactId>build-resources</artifactId>
-							<version>${project.version}</version>
-						</dependency>
-					</dependencies>
-				</plugin>
-				<plugin>
-					<groupId>org.codehaus.mojo</groupId>
-					<artifactId>cobertura-maven-plugin</artifactId>
-					<version>2.6</version>
-					<configuration>
-						<instrumentation>
-							<excludes>
-								<exclude>io/joynr/generated/**/*.class</exclude>
-								<exclude>io/joynr/generator/**/*.class</exclude>
-								<exclude>io/joynr/**/*Test.class</exclude>
-								<exclude>joynr/**/*.class</exclude>
-							</excludes>
-						</instrumentation>
-						<aggregate>true</aggregate>
-						<formats>
-							<format>xml</format>
-						</formats>
-					</configuration>
-					<executions>
-						<execution>
-							<goals>
-								<goal>clean</goal>
-							</goals>
-						</execution>
-					</executions>
-				</plugin>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-compiler-plugin</artifactId>
-					<version>3.3</version>
-					<configuration>
-						<source>1.7</source>
-						<target>1.7</target>
-						<testSource>1.7</testSource>
-						<testTarget>1.7</testTarget>
-						<debug>true</debug>
-						<debuglevel>lines,vars,source</debuglevel>
-					</configuration>
-					<dependencies>
-						<dependency>
-							<groupId>org.codehaus.plexus</groupId>
-							<artifactId>plexus-compiler-eclipse</artifactId>
-							<version>1.8.6</version>
-						</dependency>
-					</dependencies>
-				</plugin>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-deploy-plugin</artifactId>
-					<version>2.8</version>
-					<dependencies>
-						<!-- webdav wagon is not included in Maven 3 -->
-						<dependency>
-							<groupId>org.apache.maven.wagon</groupId>
-							<artifactId>wagon-webdav</artifactId>
-							<version>1.0-beta-2</version>
-						</dependency>
-					</dependencies>
-				</plugin>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-assembly-plugin</artifactId>
-					<version>2.2.1</version>
-				</plugin>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-eclipse-plugin</artifactId>
-					<version>2.9</version>
-					<configuration>
-						<useProjectReferences>true</useProjectReferences>
-						<downloadSources>true</downloadSources>
-						<downloadJavadocs>true</downloadJavadocs>
-					</configuration>
-				</plugin>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-war-plugin</artifactId>
-					<version>2.3</version>
-				</plugin>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-jar-plugin</artifactId>
-					<version>2.4</version>
-					<configuration>
-						<excludes>
-							<!-- to prevent package-info files from different projects to collide -->
-							<exclude>**/package-info*</exclude>
-							<!--
-								to prevent check-for-null annotations from package-info to be pulled
-								into jar-files
-							-->
-							<exclude>**/CheckForNull*</exclude>
-						</excludes>
-						<archive>
-							<manifestEntries>
-								<artifactId>${project.artifactId}</artifactId>
-							</manifestEntries>
-							<addMavenDescriptor>false</addMavenDescriptor>
-						</archive>
-					</configuration>
-				</plugin>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-release-plugin</artifactId>
-					<version>2.3.2</version>
-				</plugin>
-				<plugin>
-					<groupId>com.googlecode.maven-java-formatter-plugin</groupId>
-					<artifactId>maven-java-formatter-plugin</artifactId>
-					<version>0.3.1</version>
-					<executions>
-						<execution>
-							<goals>
-								<goal>format</goal>
-							</goals>
-						</execution>
-					</executions>
-					<configuration>
-						<lineEnding>KEEP</lineEnding>
-						<configFile>java-formatter/code-formatter-config.xml</configFile>
-					</configuration>
-					<dependencies>
-						<dependency>
-							<groupId>io.joynr.tools</groupId>
-							<artifactId>build-resources</artifactId>
-							<version>${project.version}</version>
-						</dependency>
-					</dependencies>
-				</plugin>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-resources-plugin</artifactId>
-					<version>2.6</version>
-					<configuration>
-						<encoding>UTF-8</encoding>
-					</configuration>
-				</plugin>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-dependency-plugin</artifactId>
-					<version>2.8</version>
-				</plugin>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-antrun-plugin</artifactId>
-					<version>1.7</version>
-				</plugin>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-enforcer-plugin</artifactId>
-					<version>1.3.1</version>
-				</plugin>
-			</plugins>
-		</pluginManagement>
-
-		<plugins>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-enforcer-plugin</artifactId>
-				<executions>
-					<execution>
-						<id>display-platform-info</id>
-						<goals>
-							<goal>display-info</goal>
-						</goals>
-						<phase>validate</phase>
-					</execution>
-					<execution>
-						<id>enforce-maven-and-java-version</id>
-						<goals>
-							<goal>enforce</goal>
-						</goals>
-						<phase>validate</phase>
-						<configuration>
-							<rules>
-								<requireMavenVersion>
-									<version>[3.1,3.4)</version>
-									<message>Wrong Maven version. You must use Maven 3.1.x to 3.3.x to build joynr.</message>
-								</requireMavenVersion>
-								<requireJavaVersion>
-									<version>1.8.0</version>
-									<message>Wrong java version. You must use Java 1.8.0 to build joynr.</message>
-								</requireJavaVersion>
-							</rules>
-						</configuration>
-					</execution>
-				</executions>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-compiler-plugin</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-dependency-plugin</artifactId>
-				<executions>
-					<execution>
-						<id>unpack-license-info</id>
-						<phase>prepare-package</phase>
-						<goals>
-							<goal>unpack</goal>
-						</goals>
-						<configuration>
-							<skip>${skip.unpack-license-info}</skip>
-							<artifactItems>
-								<artifactItem>
-									<groupId>io.joynr.tools</groupId>
-									<artifactId>build-resources</artifactId>
-									<version>${project.version}</version>
-									<outputDirectory>${project.build.directory}</outputDirectory>
-									<includes>LICENSE</includes>
-								</artifactItem>
-							</artifactItems>
-						</configuration>
-					</execution>
-				</executions>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-resources-plugin</artifactId>
-				<executions>
-					<execution>
-						<id>copy-notice-license-to-apidoc</id>
-						<phase>prepare-package</phase>
-						<goals>
-							<goal>copy-resources</goal>
-						</goals>
-						<configuration>
-							<skip>${skip.copy-notice-and-license-files}</skip>
-							<outputDirectory>${project.build.directory}/apidocs/META-INF</outputDirectory>
-							<resources>
-								<resource>
-									<directory>${basedir}</directory>
-									<includes>
-										<include>NOTICE*</include>
-									</includes>
-								</resource>
-								<resource>
-									<directory>${project.build.directory}</directory>
-									<includes>
-										<include>LICENSE</include>
-									</includes>
-								</resource>
-							</resources>
-						</configuration>
-					</execution>
-					<execution>
-						<id>copy-notice-license-to-classes</id>
-						<phase>prepare-package</phase>
-						<goals>
-							<goal>copy-resources</goal>
-						</goals>
-						<configuration>
-							<skip>${skip.copy-notice-and-license-files}</skip>
-							<outputDirectory>${project.build.directory}/classes/META-INF</outputDirectory>
-							<resources>
-								<resource>
-									<directory>${basedir}</directory>
-									<includes>
-										<include>NOTICE*</include>
-									</includes>
-								</resource>
-								<resource>
-									<directory>${project.build.directory}</directory>
-									<includes>
-										<include>LICENSE</include>
-									</includes>
-								</resource>
-							</resources>
-						</configuration>
-					</execution>
-					<execution>
-						<id>copy-notice-license-to-test-classes</id>
-						<phase>prepare-package</phase>
-						<goals>
-							<goal>copy-resources</goal>
-						</goals>
-						<configuration>
-							<skip>${skip.copy-notice-and-license-files}</skip>
-							<outputDirectory>${project.build.directory}/test-classes/META-INF</outputDirectory>
-							<resources>
-								<resource>
-									<directory>${basedir}</directory>
-									<includes>
-										<include>NOTICE*</include>
-									</includes>
-								</resource>
-								<resource>
-									<directory>${project.build.directory}</directory>
-									<includes>
-										<include>LICENSE</include>
-									</includes>
-								</resource>
-							</resources>
-						</configuration>
-					</execution>
-				</executions>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-antrun-plugin</artifactId>
-				<executions>
-					<!--
-						Workaraound: sets properties to skip execution of copying NOTICE file
-						and unpacking of LICENSE information on Maven projects with packaging pom.
-					-->
-					<execution>
-						<phase>validate</phase>
-						<goals>
-							<goal>run</goal>
-						</goals>
-						<configuration>
-							<exportAntProperties>true</exportAntProperties>
-							<target>
-								<condition property="skip.copy-notice-and-license-files" value="true" else="false">
-									<equals arg1="${project.packaging}" arg2="pom" />
-								</condition>
-								<condition property="skip.unpack-license-info" value="true" else="false">
-									<equals arg1="${project.packaging}" arg2="pom" />
-								</condition>
-							</target>
-						</configuration>
-					</execution>
-				</executions>
-			</plugin>
-			<plugin>
-				<artifactId>maven-clean-plugin</artifactId>
-				<configuration>
-					<filesets>
-						<fileset>
-							<directory>gen</directory>
-						</fileset>
-						<fileset>
-							<directory>logs</directory>
-						</fileset>
-						<fileset>
-							<directory>bin</directory>
-						</fileset>
-						<fileset>
-							<directory>target</directory>
-						</fileset>
-					</filesets>
-				</configuration>
-			</plugin>
-		</plugins>
-	</build>
-</project>
+<!--
+  #%L
+  %%
+  Copyright (C) 2011 - 2013 BMW Car IT GmbH
+  %%
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  #L%
+  -->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+	<groupId>io.joynr</groupId>
+	<artifactId>joynr</artifactId>
+	<version>0.14.1</version>
+	<packaging>pom</packaging>
+	<name>${project.groupId}:${project.artifactId}</name>
+	<url>http://joynr.io</url>
+	<description>joynr.io communications framework</description>
+	<developers>
+		<developer>
+			<organization>BMW Car IT GmbH</organization>
+			<organizationUrl>http://www.bmw-carit.com</organizationUrl>
+		</developer>
+	</developers>
+
+	<scm>
+		<connection>scm:git:git@github.com:bmwcarit/joynr.git</connection>
+		<developerConnection>scm:git:git@github.com:bmwcarit/joynr.git</developerConnection>
+		<url>git@github.com:bmwcarit/joynr</url>
+	</scm>
+
+	<licenses>
+		<license>
+			<name>The Apache Software License, Version 2.0</name>
+			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
+			<distribution>repo</distribution>
+		</license>
+	</licenses>
+
+	<modules>
+		<!--
+			ATTENTION: Order of modules matters!
+			Tools must be build first in order to have build-resources available right
+			at the beginning of the build.
+		-->
+		<module>tools</module>
+		<module>basemodel</module>
+		<module>java</module>
+		<module>cpp</module>
+		<module>examples</module>
+		<module>inter-language-test</module>
+	</modules>
+
+	<profiles>
+		<profile>
+			<!-- Build and test javascript -->
+			<id>javascript</id>
+			<modules>
+				<module>javascript</module>
+			</modules>
+		</profile>
+		<profile>
+			<!-- Build and test Android distribution -->
+			<id>android</id>
+			<modules>
+				<module>android</module>
+			</modules>
+		</profile>
+		<profile>
+			<!-- Build and test Android distribution -->
+			<id>joynr-core-lib</id>
+			<modules>
+				<module>joynr-core-lib</module>
+			</modules>
+		</profile>
+		<profile>
+			<!--
+				This profile is extended in several submodules with packaging type WAR
+				to disable deployment of WAR files containing third-party software to
+				Sonatype repositories.
+			-->
+			<id>deploy-artifacts-to-sonatype</id>
+			<activation>
+				<!--
+					maven-jgitflow-plugin will set the performRelease property during
+					release and thus automatically activate this profile during release.
+					NOTE: You need to install GPG [1] and publish your public key to a key
+					server.
+					The passphrase must be specified on the command line using -Dgpg.passphrase=thephrase
+					[2].
+					Follow instructions [3] to verify dependencies.
+					[1] https://docs.sonatype.org/display/Repository/How+To+Generate+PGP+Signatures+With+Maven
+					[2] http://maven.apache.org/plugins/maven-gpg-plugin/usage.html
+					[3] http://branchandbound.net/blog/security/2012/08/verify-dependencies-using-pgp/
+				-->
+				<property>
+					<name>performRelease</name>
+					<value>true</value>
+				</property>
+			</activation>
+			<properties>
+				<!--
+					This property will skip the execution of the maven-assembly-plugin during
+					deployment to Sonatype repositories. The plugin builds jar-with-dependencies
+					including third-party software that should not be deployed by this project.
+
+					Following jar-with-dependencies are created during build:
+					java/backend-services/channelurldirectory/target/deploy/channelurldirectory-jar-with-dependencies.jar
+					java/backend-services/capabilitiesdirectory/target/deploy/capabilitiesdirectory-jar-with-dependencies.jar
+					java/backend-services/discovery/target/deploy/discovery-jar-with-dependencies.jar
+				-->
+				<assembly.skipAssembly>true</assembly.skipAssembly>
+			</properties>
+			<distributionManagement>
+				<snapshotRepository>
+					<id>sonatype-nexus-snapshots</id>
+					<name>Sonatype Nexus Snapshots</name>
+					<url>https://oss.sonatype.org/content/repositories/snapshots/</url>
+				</snapshotRepository>
+				<repository>
+					<id>sonatype-nexus-staging</id>
+					<name>Nexus Release Repository</name>
+					<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
+				</repository>
+			</distributionManagement>
+			<build>
+				<plugins>
+					<plugin>
+						<groupId>org.apache.maven.plugins</groupId>
+						<artifactId>maven-gpg-plugin</artifactId>
+						<executions>
+							<execution>
+								<id>sign-artifacts</id>
+								<phase>verify</phase>
+								<goals>
+									<goal>sign</goal>
+								</goals>
+							</execution>
+						</executions>
+						<configuration>
+							<keyname>joynr@bmw-carit.de</keyname>
+						</configuration>
+					</plugin>
+					<plugin>
+						<groupId>org.apache.maven.plugins</groupId>
+						<artifactId>maven-source-plugin</artifactId>
+						<executions>
+							<execution>
+								<id>attach-sources</id>
+								<goals>
+									<goal>jar-no-fork</goal>
+								</goals>
+							</execution>
+						</executions>
+					</plugin>
+					<plugin>
+						<groupId>org.apache.maven.plugins</groupId>
+						<artifactId>maven-javadoc-plugin</artifactId>
+						<executions>
+							<execution>
+								<id>attach-javadocs</id>
+								<goals>
+									<goal>jar</goal>
+								</goals>
+							</execution>
+						</executions>
+					</plugin>
+				</plugins>
+			</build>
+		</profile>
+		<profile>
+			<id>continuous-build-configuration</id>
+			<activation>
+				<property>
+					<name>JOYNR_CI</name>
+				</property>
+			</activation>
+			<properties>
+				<JOYNR_SERVER>joyntest:8080</JOYNR_SERVER>
+				<JOYNR_TEST_SERVER>joyntest:8080</JOYNR_TEST_SERVER>
+			</properties>
+		</profile>
+		<profile>
+			<!--
+				NOTE: if you change activation or the profile ID here, your also must
+				change it in the following child modules that extend this profile:
+				* io.joynr.java.messaging.bounceproxy:bounceproxy-ui
+			-->
+			<id>carit-copyright</id>
+			<build>
+				<plugins>
+					<plugin>
+						<groupId>org.codehaus.mojo</groupId>
+						<artifactId>license-maven-plugin</artifactId>
+						<configuration>
+							<licenseName>apache_v2</licenseName>
+							<inceptionYear>2011</inceptionYear>
+							<organizationName>BMW Car IT GmbH</organizationName>
+							<descriptionTemplate>/license/header-template.ftl</descriptionTemplate>
+							<extraExtensions>
+								<fidl>java</fidl>
+							</extraExtensions>
+						</configuration>
+						<executions>
+							<execution>
+								<id>add-third-party</id>
+								<phase>validate</phase>
+								<goals>
+									<goal>add-third-party</goal>
+								</goals>
+							</execution>
+							<execution>
+								<id>download-licenses</id>
+								<phase>validate</phase>
+								<goals>
+									<goal>download-licenses</goal>
+								</goals>
+							</execution>
+						</executions>
+						<dependencies>
+							<dependency>
+								<groupId>de.bmw.joynr</groupId>
+								<artifactId>license-configuration</artifactId>
+								<version>${licenseConfigurationVersion}</version>
+							</dependency>
+						</dependencies>
+					</plugin>
+					<plugin>
+						<groupId>org.jasig.maven</groupId>
+						<artifactId>maven-notice-plugin</artifactId>
+						<version>1.0.6</version>
+						<configuration>
+							<noticeTemplate>/notice/NOTICE-JOYNR.template</noticeTemplate>
+							<licenseMapping>
+								<param>/notice/license-mappings.xml</param>
+								<param>/notice/license-mappings-local.xml</param>
+							</licenseMapping>
+						</configuration>
+						<dependencies>
+							<dependency>
+								<groupId>de.bmw.joynr</groupId>
+								<artifactId>license-configuration</artifactId>
+								<version>${licenseConfigurationVersion}</version>
+							</dependency>
+						</dependencies>
+					</plugin>
+				</plugins>
+			</build>
+		</profile>
+		<profile>
+			<id>carit-license</id>
+			<properties>
+				<!--
+					For unknown reasons useLicensesConfigFile and licensesConfigFile
+					configuration properties must be set as global properties. It is
+					not sufficient to specify them directly in the plugin configuration.
+				-->
+				<license.useLicensesConfigFile>true</license.useLicensesConfigFile>
+				<license.licensesConfigFile>classpath://license/missinglicenses.xml</license.licensesConfigFile>
+			</properties>
+			<build>
+				<plugins>
+					<plugin>
+						<groupId>org.codehaus.mojo</groupId>
+						<artifactId>license-maven-plugin</artifactId>
+						<!-- overriding version defined in plugin management -->
+						<version>1.3-JOYN.2</version>
+						<configuration>
+							<licenseName>apache_v2</licenseName>
+							<inceptionYear>2011</inceptionYear>
+							<organizationName>BMW Car IT GmbH</organizationName>
+							<descriptionTemplate>/license/header-template.ftl</descriptionTemplate>
+							<includes>
+								<include>**/*pom.xml</include>
+							</includes>
+							<extraExtensions>
+								<fidl>java</fidl>
+							</extraExtensions>
+							<licenseMerges>
+								<licenseMerge>Apache-2.0|The Apache Software License, Version 2.0|Apache
+									License, Version 2.0|Apache License, Version 2.0|Apache License V2.0|Apache 2|ASF
+									2.0|apache-2.0|Apache-2|Apache 2.0|Apache License 2.0|Apache
+									Software License - Version 2.0|Apache Software License - Version 2.0</licenseMerge>
+								<licenseMerge>CDDL-1.0|Common Development and Distribution License (CDDL) v1.0</licenseMerge>
+								<licenseMerge>MIT|The MIT License|MIT License</licenseMerge>
+								<licenseMerge>LGPL-2.1|Lesser Gnu Public License (LGPL), Version 2.1</licenseMerge>
+							</licenseMerges>
+							<generateBundle>true</generateBundle>
+							<fileTemplate>license/joynr-third-party-file.ftl</fileTemplate>
+							<bundleThirdPartyPath>${project.artifactId}-LICENSES.html</bundleThirdPartyPath>
+							<!--
+								For unknown reasons useLicensesConfigFile and licensesConfigFile
+								configuration properties must be set as global properties. It is
+								not sufficient to specify them directly in the plugin configuration.
+							-->
+							<useLicensesConfigFile>true</useLicensesConfigFile>
+							<licensesConfigFile>classpath://license/missinglicenses.xml</licensesConfigFile>
+							<excludedScopes>test</excludedScopes>
+							<licenseResolver>classpath://license/resolver</licenseResolver>
+							<!-- MissingFile is now replaced by the licenses config file -->
+							<useMissingFile>true</useMissingFile>
+							<failIfWarning>false</failIfWarning>
+							<encoding>UTF-8</encoding>
+							<canUpdateCopyright>true</canUpdateCopyright>
+						</configuration>
+						<dependencies>
+							<dependency>
+								<groupId>de.bmw.joynr</groupId>
+								<artifactId>license-configuration</artifactId>
+								<version>${licenseConfigurationVersion}</version>
+							</dependency>
+						</dependencies>
+					</plugin>
+				</plugins>
+			</build>
+		</profile>
+		<profile>
+			<id>no-checkstyle</id>
+			<build>
+				<pluginManagement>
+					<plugins>
+						<plugin>
+							<groupId>org.apache.maven.plugins</groupId>
+							<artifactId>maven-checkstyle-plugin</artifactId>
+							<executions>
+								<execution>
+									<phase>none</phase>
+								</execution>
+							</executions>
+						</plugin>
+					</plugins>
+				</pluginManagement>
+			</build>
+		</profile>
+		<profile>
+			<id>no-java-formatter</id>
+			<build>
+				<pluginManagement>
+					<plugins>
+						<plugin>
+							<groupId>com.googlecode.maven-java-formatter-plugin</groupId>
+							<artifactId>maven-java-formatter-plugin</artifactId>
+							<executions>
+								<execution>
+									<phase>none</phase>
+								</execution>
+							</executions>
+						</plugin>
+					</plugins>
+				</pluginManagement>
+			</build>
+		</profile>
+		<profile>
+			<id>no-tests</id>
+			<properties>
+				<maven.test.skip>true</maven.test.skip>
+			</properties>
+		</profile>
+		<profile>
+			<id>no-license-and-notice</id>
+			<properties>
+				<skip.unpack-license-info>true</skip.unpack-license-info>
+				<skip.copy-notice-file>true</skip.copy-notice-file>
+			</properties>
+		</profile>
+	</profiles>
+
+	<properties>
+		<JOYNR_SERVER>localhost:8080</JOYNR_SERVER>
+		<JOYNR_TEST_SERVER>localhost:8080</JOYNR_TEST_SERVER>
+		<timestamp>${maven.build.timestamp}</timestamp>
+		<maven.build.timestamp.format>yyyyMMdd-HHmmss</maven.build.timestamp.format>
+		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+		<licenseConfigurationVersion>1.0.10</licenseConfigurationVersion>
+		<!--
+			Those versions should not be used outside of the superpom. All dependencies
+			that need those version numbers should be defined in the dependencyManagement
+			here, and should not have a version tag in the the pom-files where they
+			are referenced.
+		-->
+		<jersey.version>1.17</jersey.version>
+		<jackson.version>2.6.2</jackson.version>
+		<guice.version>3.0</guice.version>
+		<jetty.version>9.2.13.v20150730</jetty.version>
+		<tycho.version>0.24.0</tycho.version>
+		<hibernate.version>4.3.8.Final</hibernate.version>
+		<android.platform.version>5.0.1_r2</android.platform.version>
+		<android.platform.level>21</android.platform.level>
+		<javaassist.version>3.12.1.GA</javaassist.version>
+		<skipTests>true</skipTests>
+		<franca.version>0.10.0</franca.version>
+		<xtend.version>2.8.4</xtend.version>
+		<xtext.version>2.8.4</xtext.version>
+	</properties>
+
+	<!--
+		specify dependency versions and properties here to share this information
+		with all children that use the specified dependency
+	-->
+	<dependencyManagement>
+		<dependencies>
+			<!-- The Android SDK must be deployed to the local repository using
+			     https://github.com/simpligility/maven-android-sdk-deployer
+			-->
+			<dependency>
+				<groupId>android</groupId>
+				<artifactId>android</artifactId>
+				<version>${android.platform.version}</version>
+				<scope>provided</scope>
+				<exclusions>
+					<exclusion>
+						<artifactId>xmlParserAPIs</artifactId>
+						<groupId>xerces</groupId>
+					</exclusion>
+				</exclusions>
+			</dependency>
+			<dependency>
+				<groupId>javassist</groupId>
+				<artifactId>javassist</artifactId>
+				<version>${javaassist.version}</version>
+				<classifier>sources</classifier>
+			</dependency>
+			<dependency>
+				<groupId>javassist</groupId>
+				<artifactId>javassist</artifactId>
+				<version>${javaassist.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>junit</groupId>
+				<artifactId>junit</artifactId>
+				<version>4.11</version>
+				<scope>test</scope>
+			</dependency>
+			<dependency>
+				<groupId>xml-apis</groupId>
+				<artifactId>xml-apis</artifactId>
+				<version>1.4.01</version>
+			</dependency>
+			<dependency>
+				<groupId>com.google.code.findbugs</groupId>
+				<artifactId>jsr305</artifactId>
+				<version>2.0.1</version>
+			</dependency>
+			<dependency>
+				<groupId>com.google.code.findbugs</groupId>
+				<artifactId>annotations</artifactId>
+				<version>2.0.1</version>
+			</dependency>
+			<dependency>
+				<groupId>commons-logging</groupId>
+				<artifactId>commons-logging</artifactId>
+				<version>1.0.4</version>
+			</dependency>
+			<dependency>
+				<groupId>org.eclipse.jetty</groupId>
+				<artifactId>jetty-servlet</artifactId>
+				<version>${jetty.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>org.eclipse.jetty</groupId>
+				<artifactId>jetty-server</artifactId>
+				<version>${jetty.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>org.eclipse.jetty</groupId>
+				<artifactId>jetty-webapp</artifactId>
+				<version>${jetty.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>org.eclipse.jetty.websocket</groupId>
+				<artifactId>websocket-client</artifactId>
+				<version>${jetty.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>org.eclipse.jetty.websocket</groupId>
+				<artifactId>websocket-server</artifactId>
+				<version>${jetty.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>com.google.inject</groupId>
+				<artifactId>guice</artifactId>
+				<version>${guice.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>com.google.code.gson</groupId>
+				<artifactId>gson</artifactId>
+				<version>2.1</version>
+			</dependency>
+			<dependency>
+				<groupId>com.google.guava</groupId>
+				<artifactId>guava</artifactId>
+				<version>11.0.2</version>
+			</dependency>
+			<dependency>
+				<groupId>com.sun.jersey</groupId>
+				<artifactId>jersey-json</artifactId>
+				<version>${jersey.version}</version>
+				<scope>compile</scope>
+			</dependency>
+			<dependency>
+				<groupId>com.sun.jersey</groupId>
+				<artifactId>jersey-bundle</artifactId>
+				<version>${jersey.version}</version>
+				<scope>compile</scope>
+			</dependency>
+			<dependency>
+				<groupId>com.sun.jersey</groupId>
+				<artifactId>jersey-server</artifactId>
+				<version>${jersey.version}</version>
+				<scope>compile</scope>
+			</dependency>
+			<dependency>
+				<groupId>org.eclipse.xtend</groupId>
+				<artifactId>org.eclipse.xtend.lib</artifactId>
+				<version>${xtend.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>org.eclipse.xtend</groupId>
+				<artifactId>org.eclipse.xtend.core</artifactId>
+				<version>${xtend.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>org.eclipse.xtext</groupId>
+				<artifactId>org.eclipse.xtext</artifactId>
+				<version>${xtext.version}</version>
+			</dependency>
+			<!--
+				This dependecy is needed to avoid conflicts with Java 5 code (generics)
+				when pulling in transitive dependency org.apache.felix:org.osgi.foundation:1.2.0
+				that defines java.util collection classes without generics.
+				https://bugs.eclipse.org/bugs/show_bug.cgi?id=343069
+			 -->
+			<dependency>
+				<groupId>org.eclipse.equinox</groupId>
+				<artifactId>org.eclipse.equinox.app</artifactId>
+				<version>[1.3.1,2.0.0)</version>
+			</dependency>
+			<dependency>
+				<groupId>org.eclipse.emf</groupId>
+				<artifactId>codegen</artifactId>
+				<version>2.2.3</version>
+			</dependency>
+			<dependency>
+				<groupId>org.eclipse.equinox</groupId>
+				<artifactId>app</artifactId>
+				<version>1.0.0-v20070606</version>
+			</dependency>
+			<dependency>
+				<groupId>com.sun.jersey.contribs</groupId>
+				<artifactId>jersey-multipart</artifactId>
+				<version>${jersey.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>com.sun.jersey</groupId>
+				<artifactId>jersey-servlet</artifactId>
+				<version>${jersey.version}</version>
+				<scope>compile</scope>
+			</dependency>
+			<dependency>
+				<groupId>com.sun.jersey</groupId>
+				<artifactId>jersey-client</artifactId>
+				<version>${jersey.version}</version>
+				<scope>compile</scope>
+			</dependency>
+			<dependency>
+				<groupId>com.sun.jersey.contribs</groupId>
+				<artifactId>jersey-apache-client</artifactId>
+				<version>${jersey.version}</version>
+				<scope>compile</scope>
+			</dependency>
+			<dependency>
+				<groupId>com.sun.jersey.jersey-test-framework</groupId>
+				<artifactId>jersey-test-framework-grizzly</artifactId>
+				<version>${jersey.version}</version>
+				<scope>test</scope>
+			</dependency>
+			<dependency>
+				<groupId>com.sun.jersey.jersey-test-framework</groupId>
+				<artifactId>jersey-test-framework-grizzly2</artifactId>
+				<version>${jersey.version}</version>
+				<scope>test</scope>
+			</dependency>
+			<dependency>
+				<groupId>com.sun.jersey.contribs</groupId>
+				<artifactId>jersey-guice</artifactId>
+				<version>${jersey.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>com.fasterxml.jackson.core</groupId>
+				<artifactId>jackson-core</artifactId>
+				<version>${jackson.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>com.fasterxml.jackson.core</groupId>
+				<artifactId>jackson-databind</artifactId>
+				<version>${jackson.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>com.fasterxml.jackson.core</groupId>
+				<artifactId>jackson-annotations</artifactId>
+				<version>${jackson.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>net.logstash.log4j</groupId>
+				<artifactId>jsonevent-layout</artifactId>
+				<version>1.5</version>
+			</dependency>
+			<dependency>
+				<groupId>org.slf4j</groupId>
+				<artifactId>slf4j-api</artifactId>
+				<version>1.6.6</version>
+			</dependency>
+			<dependency>
+				<groupId>org.slf4j</groupId>
+				<artifactId>slf4j-log4j12</artifactId>
+				<version>1.6.6</version>
+			</dependency>
+			<dependency>
+				<groupId>log4j</groupId>
+				<artifactId>log4j</artifactId>
+				<version>1.2.17</version>
+			</dependency>
+			<dependency>
+				<groupId>org.slf4j</groupId>
+				<artifactId>jcl-over-slf4j</artifactId>
+				<version>1.6.6</version>
+			</dependency>
+			<dependency>
+				<groupId>com.ning</groupId>
+				<artifactId>async-http-client</artifactId>
+				<version>1.7.19</version>
+			</dependency>
+			<dependency>
+				<groupId>org.mockito</groupId>
+				<artifactId>mockito-all</artifactId>
+				<scope>test</scope>
+				<version>1.8.5</version>
+			</dependency>
+			<dependency>
+				<groupId>org.apache.httpcomponents</groupId>
+				<artifactId>httpclient</artifactId>
+				<version>4.3</version>
+				<type>test-jar</type>
+			</dependency>
+			<dependency>
+				<groupId>org.apache.httpcomponents</groupId>
+				<artifactId>httpclient</artifactId>
+				<version>4.3</version>
+			</dependency>
+			<dependency>
+				<groupId>org.apache.httpcomponents</groupId>
+				<artifactId>httpclient-android</artifactId>
+				<version>4.3.3</version>
+			</dependency>
+			<dependency>
+				<groupId>org.apache.httpcomponents</groupId>
+				<artifactId>httpmime</artifactId>
+				<version>4.3</version>
+			</dependency>
+			<dependency>
+				<groupId>org.jboss.shrinkwrap.resolver</groupId>
+				<artifactId>shrinkwrap-resolver-bom</artifactId>
+				<version>2.0.0-alpha-2</version>
+				<scope>test</scope>
+				<type>pom</type>
+			</dependency>
+			<dependency>
+				<groupId>org.jboss.arquillian</groupId>
+				<artifactId>arquillian-bom</artifactId>
+				<version>1.0.2.Final</version>
+				<scope>import</scope>
+				<type>pom</type>
+			</dependency>
+			<dependency>
+				<groupId>com.fasterxml.jackson.jaxrs</groupId>
+				<artifactId>jackson-jaxrs-json-provider</artifactId>
+				<version>${jackson.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>com.sun.jersey</groupId>
+				<artifactId>jersey-core</artifactId>
+				<version>${jersey.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>org.hamcrest</groupId>
+				<artifactId>hamcrest-core</artifactId>
+				<version>1.3</version>
+			</dependency>
+			<dependency>
+				<groupId>org.hamcrest</groupId>
+				<artifactId>hamcrest-library</artifactId>
+				<version>1.3</version>
+			</dependency>
+			<dependency>
+				<groupId>com.jayway.restassured</groupId>
+				<artifactId>rest-assured</artifactId>
+				<version>1.8.1</version>
+				<exclusions>
+					<!-- Exclude Groovy because of classpath issue -->
+					<exclusion>
+						<groupId>org.codehaus.groovy</groupId>
+						<artifactId>groovy</artifactId>
+					</exclusion>
+				</exclusions>
+			</dependency>
+			<!-- included to prevent classpath issue with rest-asured -->
+			<dependency>
+				<groupId>org.codehaus.groovy</groupId>
+				<artifactId>groovy-all</artifactId>
+				<!-- Needs to be the same version that REST Assured depends on -->
+				<version>2.1.2</version>
+				<scope>test</scope>
+			</dependency>
+			<dependency>
+				<groupId>org.reflections</groupId>
+				<artifactId>reflections</artifactId>
+				<version>0.9.8</version>
+			</dependency>
+			<dependency>
+				<groupId>commons-codec</groupId>
+				<artifactId>commons-codec</artifactId>
+				<version>1.4</version>
+			</dependency>
+			<dependency>
+				<groupId>javax.servlet</groupId>
+				<artifactId>javax.servlet-api</artifactId>
+				<version>3.1.0</version>
+			</dependency>
+			<dependency>
+				<groupId>org.mockito</groupId>
+				<artifactId>mockito-core</artifactId>
+				<version>1.9.5</version>
+			</dependency>
+			<dependency>
+				<groupId>commons-io</groupId>
+				<artifactId>commons-io</artifactId>
+				<version>2.4</version>
+			</dependency>
+			<dependency>
+				<groupId>org.franca</groupId>
+				<artifactId>org.franca.core.dsl</artifactId>
+				<version>${franca.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>org.franca</groupId>
+				<artifactId>org.franca.core</artifactId>
+				<version>${franca.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>org.franca</groupId>
+				<artifactId>org.franca.deploymodel.dsl</artifactId>
+				<version>${franca.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>org.genivi.commonapi</groupId>
+				<artifactId>core</artifactId>
+				<version>2.1.4</version>
+			</dependency>
+			<dependency>
+				<groupId>org.genivi.commonapi</groupId>
+				<artifactId>dbus</artifactId>
+				<version>2.1.4</version>
+			</dependency>
+			<dependency>
+				<groupId>net.sf.ehcache</groupId>
+				<artifactId>ehcache</artifactId>
+				<version>2.8.1</version>
+			</dependency>
+			<dependency>
+				<groupId>org.hibernate</groupId>
+				<artifactId>hibernate-core</artifactId>
+				<version>${hibernate.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>org.hibernate</groupId>
+				<artifactId>hibernate-core</artifactId>
+				<version>${hibernate.version}</version>
+				<classifier>sources</classifier>
+			</dependency>
+			<dependency>
+				<groupId>org.hibernate</groupId>
+				<artifactId>hibernate-ehcache</artifactId>
+				<version>${hibernate.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>org.hibernate</groupId>
+				<artifactId>hibernate-entitymanager</artifactId>
+				<version>${hibernate.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>org.hibernate</groupId>
+				<artifactId>hibernate-entitymanager</artifactId>
+				<version>${hibernate.version}</version>
+				<classifier>sources</classifier>
+			</dependency>
+			<dependency>
+				<groupId>org.hibernate.javax.persistence</groupId>
+				<artifactId>hibernate-jpa-2.1-api</artifactId>
+				<version>1.0.0.Final</version>
+			</dependency>
+			<dependency>
+				<groupId>org.apache.derby</groupId>
+				<artifactId>derby</artifactId>
+				<version>10.10.1.1</version>
+			</dependency>
+			<dependency>
+				<groupId>com.google.inject.extensions</groupId>
+				<artifactId>guice-assistedinject</artifactId>
+				<version>${guice.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>com.google.inject.extensions</groupId>
+				<artifactId>guice-persist</artifactId>
+				<version>${guice.version}</version>
+			</dependency>
+		</dependencies>
+	</dependencyManagement>
+
+	<dependencies>
+		<dependency>
+			<groupId>junit</groupId>
+			<artifactId>junit</artifactId>
+			<scope>test</scope>
+		</dependency>
+	</dependencies>
+
+	<build>
+		<!--
+			specify plugin versions and configuration here to apply to all submodules
+			that use the specified plugin
+		-->
+		<pluginManagement>
+			<plugins>
+				<plugin>
+					<groupId>org.codehaus.mojo</groupId>
+					<artifactId>properties-maven-plugin</artifactId>
+					<version>1.0-alpha-2</version>
+				</plugin>
+				<plugin>
+					<groupId>org.eclipse.m2e</groupId>
+					<artifactId>lifecycle-mapping</artifactId>
+					<version>1.0.0</version>
+					<configuration>
+						<lifecycleMappingMetadata>
+							<pluginExecutions>
+								<pluginExecution>
+									<pluginExecutionFilter>
+										<groupId>org.apache.maven.plugins</groupId>
+										<artifactId>maven-enforcer-plugin</artifactId>
+										<versionRange>[1.0.0,)</versionRange>
+										<goals>
+											<goal>enforce</goal>
+											<goal>display-info</goal>
+										</goals>
+									</pluginExecutionFilter>
+									<action>
+										<ignore />
+									</action>
+								</pluginExecution>
+								<pluginExecution>
+									<pluginExecutionFilter>
+										<groupId>com.googlecode.maven-java-formatter-plugin</groupId>
+										<artifactId>maven-java-formatter-plugin</artifactId>
+										<versionRange>[0.3.1,)</versionRange>
+										<goals>
+											<goal>format</goal>
+										</goals>
+									</pluginExecutionFilter>
+									<action>
+										<ignore />
+									</action>
+								</pluginExecution>
+								<pluginExecution>
+									<pluginExecutionFilter>
+										<groupId>org.apache.maven.plugins</groupId>
+										<artifactId>maven-dependency-plugin</artifactId>
+										<versionRange>[2.8,)</versionRange>
+										<goals>
+											<goal>unpack</goal>
+											<goal>copy</goal>
+										</goals>
+									</pluginExecutionFilter>
+									<action>
+										<ignore />
+									</action>
+								</pluginExecution>
+								<pluginExecution>
+									<pluginExecutionFilter>
+										<groupId>org.apache.maven.plugins</groupId>
+										<artifactId>maven-antrun-plugin</artifactId>
+										<versionRange>[1.7,)</versionRange>
+										<goals>
+											<goal>run</goal>
+										</goals>
+									</pluginExecutionFilter>
+									<action>
+										<ignore />
+									</action>
+								</pluginExecution>
+								<pluginExecution>
+									<pluginExecutionFilter>
+										<groupId>org.apache.maven.plugins</groupId>
+										<artifactId>maven-install-plugin</artifactId>
+										<versionRange>[2.5,)</versionRange>
+										<goals>
+											<goal>install-file</goal>
+										</goals>
+									</pluginExecutionFilter>
+									<action>
+										<ignore />
+									</action>
+								</pluginExecution>
+								<pluginExecution>
+									<pluginExecutionFilter>
+										<groupId>io.joynr.tools.generator</groupId>
+										<artifactId>joynr-generator-maven-plugin</artifactId>
+										<versionRange>[0.5.0,)</versionRange>
+										<goals>
+											<goal>generate</goal>
+										</goals>
+									</pluginExecutionFilter>
+									<action>
+										<execute>
+											<runOnIncremental>false</runOnIncremental>
+											<runOnConfiguration>true</runOnConfiguration>
+										</execute>
+									</action>
+								</pluginExecution>
+								<pluginExecution>
+									<pluginExecutionFilter>
+										<groupId>org.apache.maven.plugins</groupId>
+										<artifactId>maven-clean-plugin</artifactId>
+										<versionRange>[2.5,)</versionRange>
+										<goals>
+											<goal>clean</goal>
+										</goals>
+									</pluginExecutionFilter>
+									<action>
+										<execute>
+											<runOnIncremental>false</runOnIncremental>
+										</execute>
+									</action>
+								</pluginExecution>
+								<pluginExecution>
+									<pluginExecutionFilter>
+										<groupId>
+											com.simpligility.maven.plugins
+										</groupId>
+										<artifactId>
+											android-maven-plugin
+										</artifactId>
+										<versionRange>
+											[4.1.0,)
+										</versionRange>
+										<goals>
+											<goal>emma</goal>
+										</goals>
+									</pluginExecutionFilter>
+									<action>
+										<ignore></ignore>
+									</action>
+								</pluginExecution>
+								<pluginExecution>
+									<pluginExecutionFilter>
+										<groupId>
+											com.googlecode.jslint4java
+										</groupId>
+										<artifactId>
+											jslint4java-maven-plugin
+										</artifactId>
+										<versionRange>
+											[2.0.3,)
+										</versionRange>
+										<goals>
+											<goal>lint</goal>
+										</goals>
+									</pluginExecutionFilter>
+									<action>
+										<ignore></ignore>
+									</action>
+								</pluginExecution>
+							</pluginExecutions>
+						</lifecycleMappingMetadata>
+					</configuration>
+				</plugin>
+				<plugin>
+					<groupId>org.apache.maven.plugins</groupId>
+					<artifactId>maven-surefire-plugin</artifactId>
+					<version>2.16</version>
+					<configuration>
+						<forkCount>1</forkCount>
+						<!-- one JVM per test suite -->
+						<reuseForks>false</reuseForks>
+						<argLine>-Xmx1024m -XX:MaxPermSize=256m</argLine>
+						<skipTests>${skipTests}</skipTests>
+					</configuration>
+				</plugin>
+				<plugin>
+					<groupId>org.codehaus.mojo</groupId>
+					<artifactId>license-maven-plugin</artifactId>
+					<version>1.5</version>
+				</plugin>
+				<plugin>
+					<groupId>org.apache.maven.plugins</groupId>
+					<artifactId>maven-javadoc-plugin</artifactId>
+					<version>2.9.1</version>
+				</plugin>
+				<plugin>
+					<groupId>org.apache.maven.plugins</groupId>
+					<artifactId>maven-source-plugin</artifactId>
+					<version>2.2.1</version>
+				</plugin>
+				<plugin>
+					<groupId>org.apache.maven.plugins</groupId>
+					<artifactId>maven-gpg-plugin</artifactId>
+					<version>1.4</version>
+				</plugin>
+				<plugin>
+					<groupId>org.codehaus.mojo</groupId>
+					<artifactId>findbugs-maven-plugin</artifactId>
+					<version>3.0.1</version>
+					<configuration>
+						<failOnError>false</failOnError>
+						<threshold>Normal</threshold>
+						<effort>Default</effort>
+						<xmlOutput>true</xmlOutput>
+						<findbugsXmlOutput>true</findbugsXmlOutput>
+						<findbugsXmlWithMessages>true</findbugsXmlWithMessages>
+						<excludeFilterFile>findbugs/findbugs-exclude.xml</excludeFilterFile>
+					</configuration>
+					<executions>
+						<execution>
+							<phase>verify</phase>
+							<goals>
+								<goal>check</goal>
+							</goals>
+						</execution>
+					</executions>
+					<dependencies>
+						<dependency>
+							<groupId>io.joynr.tools</groupId>
+							<artifactId>build-resources</artifactId>
+							<version>${project.version}</version>
+						</dependency>
+					</dependencies>
+				</plugin>
+				<plugin>
+					<groupId>com.simpligility.maven.plugins</groupId>
+					<artifactId>android-maven-plugin</artifactId>
+					<version>4.3.0</version>
+				</plugin>
+				<plugin>
+					<groupId>org.eclipse.tycho</groupId>
+					<artifactId>tycho-maven-plugin</artifactId>
+					<extensions>true</extensions>
+					<version>${tycho.version}</version>
+				</plugin>
+				<plugin>
+					<groupId>org.eclipse.tycho</groupId>
+					<artifactId>tycho-packaging-plugin</artifactId>
+					<version>${tycho.version}</version>
+				</plugin>
+				<plugin>
+					<groupId>org.codehaus.mojo</groupId>
+					<artifactId>build-helper-maven-plugin</artifactId>
+					<version>1.7</version>
+				</plugin>
+				<plugin>
+					<groupId>org.eclipse.jetty</groupId>
+					<artifactId>jetty-maven-plugin</artifactId>
+					<version>${jetty.version}</version>
+					<dependencies>
+						<dependency>
+							<groupId>org.slf4j</groupId>
+							<artifactId>slf4j-log4j12</artifactId>
+							<version>1.6.6</version>
+						</dependency>
+					</dependencies>
+					<configuration>
+						<webApp>
+							<contextPath>/</contextPath>
+						</webApp>
+						<stopPort>9966</stopPort>
+						<stopKey>joynr</stopKey>
+						<stopWait>60</stopWait>
+						<contextHandlers>
+							<contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext">
+								<war>${project.build.directory}/bounceproxy.war</war>
+								<contextPath>/bounceproxy</contextPath>
+							</contextHandler>
+							<contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext">
+								<war>${project.build.directory}/discovery.war</war>
+								<contextPath>/discovery</contextPath>
+							</contextHandler>
+							<contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext">
+								<war>${project.build.directory}/accesscontrol.war</war>
+								<contextPath>/accesscontrol</contextPath>
+							</contextHandler>
+						</contextHandlers>
+						<systemProperties>
+							<systemProperty>
+								<name>log4j.configuration</name>
+								<value>file:${basedir}/src/main/resources/log4j.properties</value>
+							</systemProperty>
+							<systemProperty>
+								<name>joynr.servlet.hostPath</name>
+								<value>http://localhost:8080</value>
+							</systemProperty>
+							<systemProperty>
+								<name>org.atmosphere.useNative</name>
+								<value>true</value>
+							</systemProperty>
+						</systemProperties>
+					</configuration>
+				</plugin>
+				<plugin>
+					<groupId>org.eclipse.xtend</groupId>
+					<artifactId>xtend-maven-plugin</artifactId>
+					<version>${xtend.version}</version>
+				</plugin>
+				<plugin>
+					<groupId>org.apache.maven.plugins</groupId>
+					<artifactId>maven-clean-plugin</artifactId>
+					<version>2.5</version>
+				</plugin>
+				<plugin>
+					<groupId>org.appfuse</groupId>
+					<artifactId>maven-warpath-plugin</artifactId>
+					<version>2.0.2</version>
+				</plugin>
+				<plugin>
+					<groupId>io.joynr.tools.generator</groupId>
+					<artifactId>joynr-generator-maven-plugin</artifactId>
+					<version>${project.version}</version>
+				</plugin>
+				<plugin>
+					<groupId>org.apache.maven.plugins</groupId>
+					<artifactId>maven-checkstyle-plugin</artifactId>
+					<version>2.13</version>
+					<configuration>
+						<!-- configLocation is resolved from classpath -->
+						<configLocation>checkstyle/checkstyle.xml</configLocation>
+						<!--
+							suppressionsLocation is resolved from classpath and extracted
+							to ${project.build.directory}/checkstyle-suppressions.xml
+						-->
+						<suppressionsLocation>checkstyle/checkstyle-suppressions.xml</suppressionsLocation>
+					</configuration>
+					<executions>
+						<execution>
+							<goals>
+								<goal>check</goal>
+							</goals>
+						</execution>
+					</executions>
+					<dependencies>
+						<dependency>
+							<groupId>io.joynr.tools</groupId>
+							<artifactId>build-resources</artifactId>
+							<version>${project.version}</version>
+						</dependency>
+					</dependencies>
+				</plugin>
+				<plugin>
+					<groupId>org.codehaus.mojo</groupId>
+					<artifactId>cobertura-maven-plugin</artifactId>
+					<version>2.6</version>
+					<configuration>
+						<instrumentation>
+							<excludes>
+								<exclude>io/joynr/generated/**/*.class</exclude>
+								<exclude>io/joynr/generator/**/*.class</exclude>
+								<exclude>io/joynr/**/*Test.class</exclude>
+								<exclude>joynr/**/*.class</exclude>
+							</excludes>
+						</instrumentation>
+						<aggregate>true</aggregate>
+						<formats>
+							<format>xml</format>
+						</formats>
+					</configuration>
+					<executions>
+						<execution>
+							<goals>
+								<goal>clean</goal>
+							</goals>
+						</execution>
+					</executions>
+				</plugin>
+				<plugin>
+					<groupId>org.apache.maven.plugins</groupId>
+					<artifactId>maven-compiler-plugin</artifactId>
+					<version>3.3</version>
+					<configuration>
+						<source>1.7</source>
+						<target>1.7</target>
+						<testSource>1.7</testSource>
+						<testTarget>1.7</testTarget>
+						<debug>true</debug>
+						<debuglevel>lines,vars,source</debuglevel>
+					</configuration>
+					<dependencies>
+						<dependency>
+							<groupId>org.codehaus.plexus</groupId>
+							<artifactId>plexus-compiler-eclipse</artifactId>
+							<version>1.8.6</version>
+						</dependency>
+					</dependencies>
+				</plugin>
+				<plugin>
+					<groupId>org.apache.maven.plugins</groupId>
+					<artifactId>maven-deploy-plugin</artifactId>
+					<version>2.8</version>
+					<dependencies>
+						<!-- webdav wagon is not included in Maven 3 -->
+						<dependency>
+							<groupId>org.apache.maven.wagon</groupId>
+							<artifactId>wagon-webdav</artifactId>
+							<version>1.0-beta-2</version>
+						</dependency>
+					</dependencies>
+				</plugin>
+				<plugin>
+					<groupId>org.apache.maven.plugins</groupId>
+					<artifactId>maven-assembly-plugin</artifactId>
+					<version>2.2.1</version>
+				</plugin>
+				<plugin>
+					<groupId>org.apache.maven.plugins</groupId>
+					<artifactId>maven-eclipse-plugin</artifactId>
+					<version>2.9</version>
+					<configuration>
+						<useProjectReferences>true</useProjectReferences>
+						<downloadSources>true</downloadSources>
+						<downloadJavadocs>true</downloadJavadocs>
+					</configuration>
+				</plugin>
+				<plugin>
+					<groupId>org.apache.maven.plugins</groupId>
+					<artifactId>maven-war-plugin</artifactId>
+					<version>2.3</version>
+				</plugin>
+				<plugin>
+					<groupId>org.apache.maven.plugins</groupId>
+					<artifactId>maven-jar-plugin</artifactId>
+					<version>2.4</version>
+					<configuration>
+						<excludes>
+							<!-- to prevent package-info files from different projects to collide -->
+							<exclude>**/package-info*</exclude>
+							<!--
+								to prevent check-for-null annotations from package-info to be pulled
+								into jar-files
+							-->
+							<exclude>**/CheckForNull*</exclude>
+						</excludes>
+						<archive>
+							<manifestEntries>
+								<artifactId>${project.artifactId}</artifactId>
+							</manifestEntries>
+							<addMavenDescriptor>false</addMavenDescriptor>
+						</archive>
+					</configuration>
+				</plugin>
+				<plugin>
+					<groupId>org.apache.maven.plugins</groupId>
+					<artifactId>maven-release-plugin</artifactId>
+					<version>2.3.2</version>
+				</plugin>
+				<plugin>
+					<groupId>com.googlecode.maven-java-formatter-plugin</groupId>
+					<artifactId>maven-java-formatter-plugin</artifactId>
+					<version>0.3.1</version>
+					<executions>
+						<execution>
+							<goals>
+								<goal>format</goal>
+							</goals>
+						</execution>
+					</executions>
+					<configuration>
+						<lineEnding>KEEP</lineEnding>
+						<configFile>java-formatter/code-formatter-config.xml</configFile>
+					</configuration>
+					<dependencies>
+						<dependency>
+							<groupId>io.joynr.tools</groupId>
+							<artifactId>build-resources</artifactId>
+							<version>${project.version}</version>
+						</dependency>
+					</dependencies>
+				</plugin>
+				<plugin>
+					<groupId>org.apache.maven.plugins</groupId>
+					<artifactId>maven-resources-plugin</artifactId>
+					<version>2.6</version>
+					<configuration>
+						<encoding>UTF-8</encoding>
+					</configuration>
+				</plugin>
+				<plugin>
+					<groupId>org.apache.maven.plugins</groupId>
+					<artifactId>maven-dependency-plugin</artifactId>
+					<version>2.8</version>
+				</plugin>
+				<plugin>
+					<groupId>org.apache.maven.plugins</groupId>
+					<artifactId>maven-antrun-plugin</artifactId>
+					<version>1.7</version>
+				</plugin>
+				<plugin>
+					<groupId>org.apache.maven.plugins</groupId>
+					<artifactId>maven-enforcer-plugin</artifactId>
+					<version>1.3.1</version>
+				</plugin>
+			</plugins>
+		</pluginManagement>
+
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-enforcer-plugin</artifactId>
+				<executions>
+					<execution>
+						<id>display-platform-info</id>
+						<goals>
+							<goal>display-info</goal>
+						</goals>
+						<phase>validate</phase>
+					</execution>
+					<execution>
+						<id>enforce-maven-and-java-version</id>
+						<goals>
+							<goal>enforce</goal>
+						</goals>
+						<phase>validate</phase>
+						<configuration>
+							<rules>
+								<requireMavenVersion>
+									<version>[3.1,3.4)</version>
+									<message>Wrong Maven version. You must use Maven 3.1.x to 3.3.x to build joynr.</message>
+								</requireMavenVersion>
+								<requireJavaVersion>
+									<version>1.8.0</version>
+									<message>Wrong java version. You must use Java 1.8.0 to build joynr.</message>
+								</requireJavaVersion>
+							</rules>
+						</configuration>
+					</execution>
+				</executions>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-compiler-plugin</artifactId>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-dependency-plugin</artifactId>
+				<executions>
+					<execution>
+						<id>unpack-license-info</id>
+						<phase>prepare-package</phase>
+						<goals>
+							<goal>unpack</goal>
+						</goals>
+						<configuration>
+							<skip>${skip.unpack-license-info}</skip>
+							<artifactItems>
+								<artifactItem>
+									<groupId>io.joynr.tools</groupId>
+									<artifactId>build-resources</artifactId>
+									<version>${project.version}</version>
+									<outputDirectory>${project.build.directory}</outputDirectory>
+									<includes>LICENSE</includes>
+								</artifactItem>
+							</artifactItems>
+						</configuration>
+					</execution>
+				</executions>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-resources-plugin</artifactId>
+				<executions>
+					<execution>
+						<id>copy-notice-license-to-apidoc</id>
+						<phase>prepare-package</phase>
+						<goals>
+							<goal>copy-resources</goal>
+						</goals>
+						<configuration>
+							<skip>${skip.copy-notice-and-license-files}</skip>
+							<outputDirectory>${project.build.directory}/apidocs/META-INF</outputDirectory>
+							<resources>
+								<resource>
+									<directory>${basedir}</directory>
+									<includes>
+										<include>NOTICE*</include>
+									</includes>
+								</resource>
+								<resource>
+									<directory>${project.build.directory}</directory>
+									<includes>
+										<include>LICENSE</include>
+									</includes>
+								</resource>
+							</resources>
+						</configuration>
+					</execution>
+					<execution>
+						<id>copy-notice-license-to-classes</id>
+						<phase>prepare-package</phase>
+						<goals>
+							<goal>copy-resources</goal>
+						</goals>
+						<configuration>
+							<skip>${skip.copy-notice-and-license-files}</skip>
+							<outputDirectory>${project.build.directory}/classes/META-INF</outputDirectory>
+							<resources>
+								<resource>
+									<directory>${basedir}</directory>
+									<includes>
+										<include>NOTICE*</include>
+									</includes>
+								</resource>
+								<resource>
+									<directory>${project.build.directory}</directory>
+									<includes>
+										<include>LICENSE</include>
+									</includes>
+								</resource>
+							</resources>
+						</configuration>
+					</execution>
+					<execution>
+						<id>copy-notice-license-to-test-classes</id>
+						<phase>prepare-package</phase>
+						<goals>
+							<goal>copy-resources</goal>
+						</goals>
+						<configuration>
+							<skip>${skip.copy-notice-and-license-files}</skip>
+							<outputDirectory>${project.build.directory}/test-classes/META-INF</outputDirectory>
+							<resources>
+								<resource>
+									<directory>${basedir}</directory>
+									<includes>
+										<include>NOTICE*</include>
+									</includes>
+								</resource>
+								<resource>
+									<directory>${project.build.directory}</directory>
+									<includes>
+										<include>LICENSE</include>
+									</includes>
+								</resource>
+							</resources>
+						</configuration>
+					</execution>
+				</executions>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-antrun-plugin</artifactId>
+				<executions>
+					<!--
+						Workaraound: sets properties to skip execution of copying NOTICE file
+						and unpacking of LICENSE information on Maven projects with packaging pom.
+					-->
+					<execution>
+						<phase>validate</phase>
+						<goals>
+							<goal>run</goal>
+						</goals>
+						<configuration>
+							<exportAntProperties>true</exportAntProperties>
+							<target>
+								<condition property="skip.copy-notice-and-license-files" value="true" else="false">
+									<equals arg1="${project.packaging}" arg2="pom" />
+								</condition>
+								<condition property="skip.unpack-license-info" value="true" else="false">
+									<equals arg1="${project.packaging}" arg2="pom" />
+								</condition>
+							</target>
+						</configuration>
+					</execution>
+				</executions>
+			</plugin>
+			<plugin>
+				<artifactId>maven-clean-plugin</artifactId>
+				<configuration>
+					<filesets>
+						<fileset>
+							<directory>gen</directory>
+						</fileset>
+						<fileset>
+							<directory>logs</directory>
+						</fileset>
+						<fileset>
+							<directory>bin</directory>
+						</fileset>
+						<fileset>
+							<directory>target</directory>
+						</fileset>
+					</filesets>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
+</project>
